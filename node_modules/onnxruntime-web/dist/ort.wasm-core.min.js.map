{"version":3,"file":"ort.wasm-core.min.js","mappings":";;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAa,IAAID,IAEjBD,EAAU,IAAIC,GACf,CATD,CASGK,MAAM,KACT,O,gDCPA,gBACA,UAEA,UACA,UAQa,KAAkB,KAa7B,IAZoC,iBAAzB,EAAAC,IAAIC,KAAKC,aAA4B,EAAAF,IAAIC,KAAKC,YAAc,KACrE,EAAAF,IAAIC,KAAKC,YAAc,GAGI,kBAAlB,EAAAF,IAAIC,KAAKE,OAClB,EAAAH,IAAIC,KAAKE,MAAO,GAGY,kBAAnB,EAAAH,IAAIC,KAAKG,QAClB,EAAAJ,IAAIC,KAAKG,OAAQ,GAGgB,iBAAxB,EAAAJ,IAAIC,KAAKI,aAA4BC,OAAOC,UAAU,EAAAP,IAAIC,KAAKI,aAAe,EAAAL,IAAIC,KAAKI,YAAc,EAAG,CACjH,MAAMG,EAA0C,oBAAdC,WAA4B,IAAAC,QAAOC,OAASF,UAAUG,oBACxF,EAAAZ,IAAIC,KAAKI,WAAaQ,KAAKC,IAAI,EAAGD,KAAKE,MAAMP,GAAsB,GAAK,G,GAsB/D,KAAc,IAlB3B,MACEQ,cAEE,gBAGM,IAAAC,gCACR,CAGAD,2BAA2BE,EAAiCC,GAE1D,MAAMC,EAAU,IAAI,EAAAC,qCAEpB,aADMD,EAAQE,UAAUJ,EAAcC,GAC/BI,QAAQC,QAAQJ,EACzB,E,ygBCzCF,aACA,gBACA,UAO8B,CAC5B,MAAMK,EAAc,YAIpB,IAAAC,iBAAgB,MAAOD,EAAa,KACpC,IAAAC,iBAAgB,OAAQD,EAAa,KACrC,IAAAC,iBAAgB,UAAWD,EAAa,IACxC,IAAAC,iBAAgB,QAASD,EAAa,E,CAGxC,EAAAzB,IAAI2B,SAASC,IAAM,EAAAC,O,8FCtBN,EAAAA,QAAU,gC,sGCDvB,gBAEA,UACA,UACA,UA2BA,oCAiBE,KAAAC,gBAA+B,KAmC/B,KAAAC,eAAyC,KACzC,KAAAC,mBAAiD,KACjD,KAAAC,sBAAwB,EAExB,KAAAC,kBAAmB,CA0QrB,CAjSMC,8BACF,GAA6B,OAAzBC,KAAKN,gBACP,MAAM,IAAIO,MAAM,2EAGlB,IAAIC,EAAOF,KAAKG,iBAAiBC,IAAIJ,KAAKN,iBAM1C,OALKQ,IACHA,EAAO,CAAC,EACRF,KAAKG,iBAAiBE,IAAIL,KAAKN,gBAAiBQ,IAG3CA,CACT,CAeAtB,iBAAiBhB,GACf,IAAKS,UAAUiC,IAEb,MAAM,IAAIL,MAAM,2CAGlB,MAAMM,QAAgBlC,UAAUiC,IAAIE,iBACpC,IAAKD,EACH,MAAM,IAAIN,MAAM,6CAGlB,MAAMQ,EAAwC,CAC5CC,eAAgB,CACdC,+BAAgCJ,EAAQK,OAAOD,+BAC/CE,iCAAkCN,EAAQK,OAAOC,iCACjDC,4BAA6BP,EAAQK,OAAOE,8BAK5CP,EAAQQ,SAASC,IAAI,kCAAiE,YAA7BpD,EAAIqD,OAAOC,gBACtElB,KAAKF,kBAAmB,EAExBW,EAAiBU,iBAAmB,CAAC,kCAGvCnB,KAAKoB,aAAeb,EAAQc,cAAcZ,GAC1CT,KAAKsB,gBAAiB,IAAAC,sBAAqBvB,MAC3CA,KAAKwB,eAAiB,IAAI,EAAAC,eAAezB,MACzCA,KAAK0B,QAAU,IAAIC,IACnB3B,KAAK4B,qBAAuB,IAAID,IAChC3B,KAAKG,iBAAmB,IAAIwB,KAG5B,IAAAE,iBAAgBjE,EAAIkE,WAAalE,EAAImE,OAIrC/B,KAAKoB,OAAOY,kBAAoBC,IAC1BA,EAAGC,iBAAiBC,oBAEtBC,QAAQF,MAAM,mDAAmDD,EAAGC,MAAMG,U,EAI1ErC,KAAKF,mBACPE,KAAKsC,kBAAoBtC,KAAKoB,OAAOmB,eAAe,CAClDC,KAAM,YACNC,MAAO,IAGb,CAEAC,UAKA,CAEAC,oBAIE,OAHK3C,KAAKL,iBACRK,KAAKL,eAAiBK,KAAKoB,OAAOwB,wBAE7B5C,KAAKL,cACd,CAEAkD,wBAIE,OAHK7C,KAAKJ,qBACRI,KAAKJ,mBAAqBI,KAAK2C,oBAAoBG,oBAE9C9C,KAAKJ,kBACd,CAEAmD,iBACM/C,KAAKJ,qBACPI,KAAKJ,mBAAmBoD,MACxBhD,KAAKJ,mBAAqB,KAE9B,CAEAqD,QACEjD,KAAK+C,iBACL/C,KAAKoB,OAAO8B,MAAMC,OAAO,CAACnD,KAAK2C,oBAAoBS,WACnDpD,KAAKsB,eAAe+B,wBACpBrD,KAAKL,eAAiB,KACtBK,KAAKH,sBAAwB,CAC/B,CAcAyD,IAAIC,EAAwCC,EAA+BC,EACvEC,EACAC,GACF,GAAIH,EAAOjF,SAAWgF,EAAQK,WAAWrF,OACvC,MAAM,IAAI0B,MAAM,+BAA+BsD,EAAQK,WAAWrF,WAIpE,MAAMsF,EAAwB,GAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAOjF,SAAUuF,EAAG,CACtC,MAAMC,EAAU/D,KAAKsB,eAAelB,IAAIoD,EAAOM,GAAG5D,MAClD,IAAK6D,EACH,MAAM,IAAI9D,MAAM,0BAA0BuD,EAAOM,GAAG5D,QAEtD2D,EAAWC,GAAKC,C,CAGlB,MAAMC,EAlMN,EAACC,EAA4CC,EAC5CC,KACC,MAAMC,EAA4BF,EAAkBG,KAAIC,GAAK,GAAGA,EAAEC,KAAK,SAAQA,KAAK,KAC9EC,EAA4BL,EAAkBI,KAAK,KACzD,IAAIP,EAAMC,EAAYQ,KAKtB,OAJIR,EAAYS,YACdV,GAAO,IAAMC,EAAYS,UAAY,KAEvCV,GAAO,IAAMI,EAA4B,IAAMI,EACxCR,CAAG,EAyLAW,CAAwBpB,EAASC,EAAOa,KAAIP,GAAKA,EAAEc,OAAOf,EAAWQ,KAAIP,GAAKA,EAAEtB,QAC5F,IAAIqC,EAAW7E,KAAKwB,eAAesD,YAAYd,GAC/C,MAAMC,EAAcY,EAChBA,EAASZ,YACsC,mBAAtCV,EAA8BnD,IAAsBmD,EAA8BnD,MAC9BmD,EAG3DwB,EAAkD,IAAzBtB,EAAclF,OAAe0F,EAAYe,QAAQX,KAAI,CAACY,EAAGnB,IAAMA,IAAKL,EACnG,GAAIsB,EAAuBxG,SAAW0F,EAAYe,QAAQzG,OACxD,MAAM,IAAI0B,MAAM,eAAe8E,EAAuBxG,2BAA2B0F,EAAYe,QAAQzG,WAIvG,MAAM2G,EAAkC,GAClCC,EAAyB,GAC/B,IAAK,IAAIrB,EAAI,EAAGA,EAAIG,EAAYe,QAAQzG,SAAUuF,EAAG,CAGnD,IAAK5F,OAAOC,UAAU4G,EAAuBjB,KAAOiB,EAAuBjB,IAAM,GAC7EiB,EAAuBjB,IAAMG,EAAYe,QAAQzG,OACnD,MAAM,IAAI0B,MAAM,yBAAyB8E,EAAuBjB,MAElE,MAAMsB,GAA6C,IAA/BL,EAAuBjB,GACrCuB,GAA8C,IAA/BN,EAAuBjB,GACtCwB,EAAcF,GAAeC,EAC/B1B,EAAyBM,EAAYe,QAAQlB,GAAGyB,SAAUtB,EAAYe,QAAQlB,GAAGc,MACjFlB,EAAmBqB,EAAuBjB,GAAIG,EAAYe,QAAQlB,GAAGyB,SAAUtB,EAAYe,QAAQlB,GAAGc,MACpGb,EAAU/D,KAAKsB,eAAelB,IAAIkF,EAAWpF,MACnD,IAAK6D,EACH,MAAM,IAAI9D,MAAM,2BAA2BqF,EAAWpF,QAKxD,GAHIkF,GACFpF,KAAKwF,cAAcC,KAAK1B,GAEtBsB,EAAc,CAChB,IAAIK,EAAiB1F,KAAK4B,qBAAqBxB,IAAIJ,KAAKN,iBACnDgG,IACHA,EAAiB,GACjB1F,KAAK4B,qBAAqBvB,IAAIL,KAAKN,gBAAkBgG,IAEvDA,EAAeD,KAAK1B,E,CAEtBmB,EAAkBO,KAAKH,GACvBH,EAAYM,KAAK1B,E,CAGnB,MAAM4B,EAA0B3F,KAAKwB,eAAeoE,2BAA2B3B,EAAY4B,cAAcrC,IAazG,OAXKqB,IACHA,EAAW7E,KAAKwB,eAAesE,MAAM7B,EAAa0B,GAClD3F,KAAKwB,eAAeuE,YAAY/B,EAAKa,KAGvC,IAAAmB,WACI,QACA,IAAM,yBAAyB/B,EAAYQ,cAAcT,WAAa2B,EAAwB,MAC1FA,EAAwB,MAAMA,EAAwB,OAC9D3F,KAAKwB,eAAe8B,IAAIuB,EAAUhB,EAAYsB,EAAaQ,GAEpDT,CACT,CAEAe,OAAOC,EAAmBhG,GACxBF,KAAKsB,eAAe2E,OAAOC,EAAWhG,EACxC,CAEAiG,OAAOC,EAAaC,GAClBrG,KAAKsB,eAAe6E,OAAOC,EAAKC,EAClC,CAEAzH,eAAesH,EAAmBI,GAChC,MAAMC,QAAoBvG,KAAKsB,eAAekF,SAASN,GAIjDhG,EAAOoG,IACbpG,EAAKG,IAAI,IAAIoG,WAAWF,EAAa,EAAGrG,EAAKwG,YAC/C,CAEAC,MAAMC,GACJ,OAAO5G,KAAKsB,eAAeuF,OAAOD,GAAME,EAC1C,CAEAC,KAAKC,GACH,OAAOhH,KAAKsB,eAAe2F,QAAQD,EACrC,CAEAE,aAAazC,EAAc0C,EAAkBC,GAC3C,MAAMC,EAAK,EAAAC,wBAAwBlH,IAAIqE,GACvC,IAAK4C,EACH,MAAM,IAAIpH,MAAM,2BAA2BwE,KAG7CzE,KAAK0B,QAAQrB,IAAI8G,EAAU,CAAC1C,EAAM4C,EAAG,GAAI,CAACA,EAAG,GAAID,IACnD,CAEAG,cAAcJ,GACZ,MAAMzB,EAAiB1F,KAAK4B,qBAAqBxB,IAAI+G,GACrD,GAAIzB,EAAgB,CAClB,IAAK,MAAMxF,KAAQwF,EACjB1F,KAAKsB,eAAe2F,QAAQ/G,EAAK4G,IAEnC9G,KAAK4B,qBAAqB4F,OAAOL,E,CAGnCnH,KAAKG,iBAAiBqH,OAAOL,GAC7BnH,KAAK0B,QAAQ8F,OAAOL,EACtB,CAEAM,cAAcN,EAAkBO,GAC9B,MAAMC,EAAS3H,KAAK0B,QAAQtB,IAAI+G,GAChC,IAAKQ,EACH,MAAM,IAAI1H,MAAM,uBAAuBkH,KAEzC,MAAO1C,EAAMmD,EAAaC,GAAcF,EACxC,GAA6B,OAAzB3H,KAAKN,gBACP,MAAM,IAAIO,MAAM,WAAWwE,8CAE7BzE,KAAKN,gBAAkByH,EAGnBU,EAAW,KACbA,EAAW,GAAKA,EAAW,GAAGA,EAAW,IACzCA,EAAW,QAAKC,IAGlB,IAAA9B,WAAU,QAAQ,IAAM,iCAAiCvB,UAEzDzE,KAAKwF,cAAgB,GACrB,IAEE,OADAoC,EAAYF,EAASG,EAAW,IACzB,C,CACP,MAAOE,GAEP,OADA,IAAA/B,WAAU,UAAW,oBAAoBvB,qBAAwBsD,KAC1D,C,SAEP,IAAK,MAAM7H,KAAQF,KAAKwF,cACtBxF,KAAKsB,eAAe2F,QAAQ/G,EAAK4G,IAEnC9G,KAAKwF,cAAgB,GACrBxF,KAAKN,gBAAkB,I,CAE3B,E,6FC/VF,gBAEA,UACA,UAEA,UAKA,MAAMsI,EACJC,YACYzK,EAAuC+H,EAAkCrF,EACjE0E,GADR,KAAApH,OAAAA,EAAuC,KAAA+H,SAAAA,EAAkC,KAAArF,KAAAA,EACjE,KAAA0E,KAAAA,CAA0B,CAE9CsD,kBACE,GAAsB,IAAlBlI,KAAKuF,SACP,MAAM,IAAItF,MAAM,qBAElB,MAAMkI,EAAe,EAAAC,UAAUxB,KAAK5G,KAAK4E,MACzC,OAAwB,IAAjBuD,EAAqB,IAAIE,aACJ,IAAIA,aAAarI,KAAKxC,OAAO8K,MAAMC,OAAQvI,KAAKE,KAAMiI,EACpF,CAEAK,mBACE,GAAsB,IAAlBxI,KAAKuF,SACP,MAAM,IAAItF,MAAM,qBAElB,MAAMkI,EAAe,EAAAC,UAAUxB,KAAK5G,KAAK4E,MACzC,OAAwB,IAAjBuD,EAAqB,IAAIM,cACJ,IAAIA,cAAczI,KAAKxC,OAAO8K,MAAMC,OAAQvI,KAAKE,KAAMiI,EACrF,CAEAO,QAAQC,GACN,GAAI,EAAAP,UAAUxB,KAAK+B,KAAa,EAAAP,UAAUxB,KAAK5G,KAAK4E,MAClD,MAAM,IAAI3E,MAAM,qBAElB,OAAO,IAAI+H,EAAehI,KAAKxC,OAAQwC,KAAKuF,SAAUvF,KAAKE,KAAMyI,EACnE,EAGF,MAAMC,EAGAC,iBACF,OAAO7I,KAAK8I,QAAQ/I,uBACtB,CACAkI,YAAoBzK,EAA+BsL,EAAwBC,GAAvD,KAAAvL,OAAAA,EAA+B,KAAAsL,QAAAA,EACjD,MAAME,EAAUxL,EAAOyL,QAGvB,IAAIC,EAAaH,GAAqB,EACtC/I,KAAKmJ,gBAAkBH,EAAQE,KAC/B,MAAME,EAAaJ,EAAQE,KAErB1F,EAAuB,GAC7B,IAAK,IAAIM,EAAI,EAAGA,EAAIsF,EAAYtF,IAAK,CACnC,MAAMyB,EAAWyD,EAAQE,KACnBhJ,EAAO8I,EAAQE,KACfG,EAAML,EAAQE,KACdtE,EAAiB,GACvB,IAAK,IAAIN,EAAI,EAAGA,EAAI+E,EAAK/E,IACvBM,EAAKa,KAAKuD,EAAQE,MAEpB1F,EAAOiC,KAAK,IAAIuC,EAAexK,EAAQ+H,EAAUrF,EAAM0E,G,CAEzD5E,KAAKwD,OAASA,CAChB,CAEA8F,QAAQ/F,EAAwCgG,G,UAG9C,MAAMC,EACgF,QAAlF,EAA4B,QAA5B,EAAAD,aAAoB,EAApBA,EAAsB/F,cAAM,eAAEa,KAAIP,GAAkB,iBAANA,EAAiB9D,KAAKwD,OAAOM,GAAKA,WAAE,QAAI9D,KAAKwD,OAEzFC,EAA6C,QAA7B,EAAA8F,aAAoB,EAApBA,EAAsBvE,eAAO,QAAI,GAWvD,OAAOhF,KAAK8I,QAAQxF,IAAIC,EAASiG,EAAc/F,GAVpB,CAACgG,EAAelE,EAAkBX,IACzD,IAAIoD,EAAehI,KAAKxC,OAAQ+H,EAAUvF,KAAK0J,OAAOD,EAAO7E,GAAOA,KAC1C,CAACW,EAAkBX,KAC/C,MAAM+E,GAAc,IAAAC,sBAAqBrE,GACzC,IAAKoE,EACH,MAAM,IAAI1J,MAAM,0BAA0BsF,KAE5C,MAAMsE,EAAaF,EAAc,EAAAvB,UAAUxB,KAAKhC,GAChD,OAAO,IAAIoD,EAAehI,KAAKxC,OAAQ+H,EAAUvF,KAAK8I,QAAQxH,eAAeuF,OAAOgD,GAAY/C,GAAIlC,EAAK,GAG7G,CAEA8E,OAAOD,EAAe7E,GACpB,MAAMkF,EAAQ9J,KAAKxC,OAAOuM,YAC1B,IACE,MAAM7J,EAAOF,KAAKxC,OAAOwM,WAA+B,GAAnB,EAAIpF,EAAKrG,SAC9C,IAAI0L,EAAS/J,GAAQ,EACrBF,KAAKxC,OAAOyL,QAAQgB,KAAYrF,EAAKrG,OACrC,IAAK,IAAIuF,EAAI,EAAGA,EAAIc,EAAKrG,OAAQuF,IAC/B9D,KAAKxC,OAAOyL,QAAQgB,KAAYrF,EAAKd,GAEvC,OAAO9D,KAAKxC,OAAO0M,YAAYlK,KAAKmJ,gBAAiBM,EAAOvJ,E,SAE5DF,KAAKxC,OAAO2M,aAAaL,E,CAE7B,EAGW,EAAAM,KAAOxL,MAAMpB,EAAuBI,KAC/C,MAAMwM,EAAO5M,EAAO6M,SACpB,GAAID,GAAQ/L,UAAUiC,IAAK,CACzB,IAAK1C,EAAIC,KAAKE,KACZ,MAAM,IAAIkC,MACN,qGAEN,MAAM6I,EAAU,IAAI,EAAAwB,oBACdxB,EAAQyB,WAAW3M,GAEzBwM,EAEI,CAACtB,YAGAlC,GAAiBkC,EAAQnC,MAAMC,KAG/BI,GAAgB8B,EAAQ/B,KAAKC,KAG9B,CAACZ,EAAaC,EAAaO,EAAc4D,GAAc,KACrD,GAAIA,GACF,IAAAxE,WAAU,WAAW,IAAM,kCAAkCI,UAAYC,WAAaO,MACtFkC,EAAQ3C,OAAOC,EAAKC,OACf,EACL,IAAAL,WAAU,WAAW,IAAM,yCAAyCI,gBAAkBC,WAAaO,MACnG,MAAM1G,EAAO1C,EAAOiN,OAAOC,SAAStE,EAAKA,EAAMQ,GAC/CkC,EAAQ7C,OAAOI,EAAKnG,E,KAKxBtB,MAAMsH,EAAmByE,EAAoB/D,MAEvC,IAAAZ,WACI,WACA,IAAM,wCAAwCE,iBAAyByE,WAAoB/D,YAEzFkC,EAAQtC,SAASN,GAAW,IAAM1I,EAAOiN,OAAOC,SAASC,EAAYA,EAAa/D,IAAM,IAIpG,CAACnC,EAAckD,EAAgBP,IAAuB0B,EAAQ5B,aAAazC,EAAMkD,EAAQP,KAGxFO,GAAmBmB,EAAQvB,cAAcI,KAG1C,CAACA,EAAgBoB,MACf,IAAA/C,WAAU,WAAW,IAAM,4BAA4B2B,wBAA6BoB,MACpF,MAAMrB,EAAU,IAAIkB,EAAmBpL,EAAQsL,EAASC,GACxD,OAAOD,EAAQrB,cAAcE,EAAQD,EAAQ,G,4HC9JvD,gBAOMkD,EAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,KAO5C,IAAIC,EACA9I,EAES,EAAAF,gBAAkB,CAACiJ,EAA2BC,KACzDF,EAAiBC,EACjB/I,EAAQgJ,CAAM,EAMH,EAAAC,IAAM,CAAClJ,EAAoBmJ,KACtC,MAAMC,GAAe,IAAAC,sBAAqBrJ,GAjB9B,IAACsJ,EAAe/I,EAmBxB6I,IADgB,IAAAC,sBAAqBN,KAlB5BO,EAoBLF,EApBoB7I,EAoBS,mBAAR4I,EAAqBA,IAAQA,EAlB1D7I,QAAQiJ,IAAI,IAAIT,EAAeQ,OAAU,IAAIE,MAAOC,iBAAiBlJ,K,EAyB1D,EAAA2D,UAAwB,IAAIwF,KACnCzJ,IACF,IAAAiJ,QAAOQ,E,8KCtCX,MAAaC,EAOXC,uBAAuBC,EAAqBC,GAC1C,OAAQD,EAAE,KAAOC,EAAE,QAAM9D,EAAY,CAAC6D,EAAE,GAAIC,EAAE,GAChD,EATF,eAaA,MAAaC,EAQXH,iBAAiBI,EAA0BC,EAA0BC,GAAW,GAC9E,MAAMC,EAAQH,EAAMvN,OACd2N,EAAQH,EAAMxN,OACpB,GAAc,IAAV0N,EACF,OAAOF,EAET,GAAc,IAAVG,EACF,OAAOJ,EAET,MAAMK,EAAQ1N,KAAK2N,IAAIN,EAAMvN,OAAQwN,EAAMxN,QACrC8N,EAAQ,IAAIC,MAAcH,GAGhC,GAAIH,EAAU,CACZ,GAAIC,EAAQ,GAAKC,EAAQ,EACvB,OAEF,MAAMK,EACFd,EAAWe,gBAAgB,CAACV,EAAMG,EAAQ,GAAIH,EAAMG,EAAQ,IAAK,CAACF,EAAMG,EAAQ,GAAIH,EAAMG,EAAQ,KACtG,QAAqBpE,IAAjByE,EACF,QAEDF,EAAMF,EAAQ,GAAIE,EAAMF,EAAQ,IAAMI,C,CAGzC,IAAK,IAAIzI,EAAIkI,EAAW,EAAI,EAAGlI,GAAKqI,EAAOrI,IAAK,CAC9C,MAAM2I,EAAOR,EAAQnI,EAAI,EAAI,EAAIgI,EAAMG,EAAQnI,GACzC4I,EAAOR,EAAQpI,EAAI,EAAI,EAAIiI,EAAMG,EAAQpI,GAE/C,GAAI2I,IAASC,GAAQD,EAAO,GAAKC,EAAO,EACtC,OAEFL,EAAMF,EAAQrI,GAAKrF,KAAK2N,IAAIK,EAAMC,E,CAGpC,OAAOL,CACT,CAOAX,wBAAwBiB,EAA0BC,GAEhD,MAAMC,EAAYF,EAAMpO,OAClBuO,EAAYF,EAAWrO,OAC7B,GAAIsO,EAAYC,EACd,OAAO,EAET,IAAK,IAAIhJ,EAAI,EAAGA,GAAK+I,EAAW/I,IAC9B,GAA6B,IAAzB6I,EAAME,EAAY/I,IAAY6I,EAAME,EAAY/I,KAAO8I,EAAWE,EAAYhJ,GAChF,OAAO,EAGX,OAAO,CACT,EAhEF,kBAoEA,MAAasE,EAIXsD,YAAY9G,GACV,OAAOwD,EAAU2E,0BAA0BnI,EAAM,EAAGA,EAAKrG,OAC3D,CAKAmN,yBAAyB9G,EAAyBoI,GAChD,GAAIA,EAAO,GAAKA,EAAOpI,EAAKrG,OAC1B,MAAM,IAAI0B,MAAM,wBAAwB+M,yCAA4CpI,EAAKrG,sBAE3F,OAAO6J,EAAU2E,0BAA0BnI,EAAMoI,EAAMpI,EAAKrG,OAC9D,CAKAmN,uBAAuB9G,EAAyBoI,GAC9C,GAAIA,EAAO,GAAKA,EAAOpI,EAAKrG,OAC1B,MAAM,IAAI0B,MAAM,wBAAwB+M,uCAA0CpI,EAAKrG,sBAEzF,OAAO6J,EAAU2E,0BAA0BnI,EAAM,EAAGoI,EACtD,CAKAtB,iCAAiC9G,EAAyBqI,EAAejK,GACvE,IAAI4D,EAAO,EACX,IAAK,IAAI9C,EAAImJ,EAAOnJ,EAAId,EAAKc,IAAK,CAGhC,GAAIc,EAAKd,GAAK,EACZ,MAAM,IAAI7D,MAEN,iHAEN2G,GAAQhC,EAAKd,E,CAEf,OAAO8C,CACT,CAEA8E,sBAAsB9G,GACpB,MAAMsI,EAAOtI,EAAKrG,OAClB,GAAa,IAAT2O,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAAC,GAEV,MAAMC,EAAU,IAAIb,MAAMY,GAC1BC,EAAQD,EAAO,GAAK,EACpBC,EAAQD,EAAO,GAAKtI,EAAKsI,EAAO,GAChC,IAAK,IAAIpJ,EAAIoJ,EAAO,EAAGpJ,GAAK,IAAKA,EAC/BqJ,EAAQrJ,GAAKqJ,EAAQrJ,EAAI,GAAKc,EAAKd,EAAI,GAEzC,OAAOqJ,CACT,CAKAzB,qBAAqBsB,EAAcI,GACjC,GAAIJ,GAAQI,GAAcJ,GAAQI,EAChC,MAAM,IAAInN,MAAM,wCAElB,OAAO+M,EAAO,EAAIA,EAAOI,EAAaJ,CACxC,CAEAtB,qBAAqB2B,EAAyBD,GAC5C,OAAOC,EAAKhJ,KAAIiJ,GAAKtN,KAAKuN,cAAcD,EAAGF,QAAAA,EAAcC,EAAK9O,SAChE,CAQAmN,uBAAuBC,EAAsB6B,GAC3C,OAAIA,EACKA,EAAKnJ,KAAKoJ,GAAM9B,EAAE8B,KAElB9B,EAAE+B,QAAQC,SAErB,CAOAjC,gBAAgB9G,EAAyBgJ,GACvC,MAAMV,EAAOtI,EAAKrG,OAClB,OAAOqG,EAAKP,KAAI,CAACoJ,EAAG3J,IAAM2J,EAAIG,EAAI9J,GAAK8J,EAAI9J,EAAIoJ,IACjD,CAOAxB,gBAAgBmC,EAA2BC,GACzC,OAAID,EAAOtP,SAAWuP,EAAOvP,QAGtBsP,EAAOE,OAAM,CAACN,EAAG3J,IAAM2J,IAAMK,EAAOhK,IAC7C,EA9GF,cAiHA,MAAakK,EAUXtC,4BACIuC,EAA2BC,EAA8BC,EAAuBhB,EAChFiB,EAAqBC,GACvB,IAAKJ,GAAoBE,EAAY5P,SAAW2P,EAAU3P,OAAS,EACjE,MAAM,IAAI0B,MAAM,sFAGlB,GAAIgO,EAEF,IAAK,IAAI5E,EAAM,EAAGA,EAAM6E,EAAU3P,OAAS,EAAG8K,IACxCA,GAAO8E,EAAY5P,OACrB4P,EAAY1I,KAAKyI,EAAU7E,EAAM,IAEjC8E,EAAY9E,GAAO6E,EAAU7E,EAAM,GAMzC,IAAK,IAAIA,EAAM,EAAGA,EAAM8E,EAAY5P,OAAQ8K,IAC1C,GAAIA,EAAM8D,EAAQ5O,QAChB,GAAI4O,EAAQ9D,GAAO,EACjB,MAAM,IAAIpJ,MAAM,qDAGlBkN,EAAQ1H,KAAK,GAKjB,IAAK,IAAI4D,EAAM,EAAGA,EAAM8E,EAAY5P,OAAQ8K,IAC1C,GAAIA,EAAM+E,EAAU7P,QAClB,GAAI6P,EAAU/E,GAAO,EACnB,MAAM,IAAIpJ,MAAM,uDAGlBmO,EAAU3I,KAAK,GAKnB,IAAK,IAAI4D,EAAM,EAAGA,EAA2B,EAArB8E,EAAY5P,OAAY8K,IAC9C,GAAIA,EAAMgF,EAAK9P,QACb,GAAI8P,EAAKhF,GAAO,EACd,MAAM,IAAIpJ,MAAM,iDAGlBoO,EAAK5I,KAAK,GAKd,IAAK,IAAI4D,EAAM,EAAGA,EAAM8E,EAAY5P,OAAQ8K,IAAO,CACjD,GAAI8E,EAAY9E,IAAQ,EACtB,MAAM,IAAIpJ,MAAM,2CAGlB,GAAIoO,EAAKhF,IAAQ8E,EAAY9E,IAAQgF,EAAKhF,EAAM8E,EAAY5P,SAAW4P,EAAY9E,GACjF,MAAM,IAAIpJ,MAAM,qC,CAGtB,CAGAyL,gCACIwC,EAA8Bf,EAA4BiB,EAC1DD,EAAgCE,EAAgBC,EAAwBC,GAC1E,GAAKA,EAAL,CAIA,GAAIF,EAAK9P,SAAW,GAAK2P,EAAU3P,OAAS,GAC1C,MAAM,IAAI0B,MAAM,gEAGlB,GAAIkN,EAAQ5O,SAAY2P,EAAU3P,OAAS,EACzC,MAAM,IAAI0B,MAAM,6DAGlB,GAAIkO,EAAY5P,SAAY2P,EAAU3P,OAAS,EAC7C,MAAM,IAAI0B,MAAM,mEAGlB,IAAK,IAAIoJ,EAAM,EAAGA,EAAM6E,EAAU3P,OAAS,EAAG8K,IAC5C2E,EAAaQ,wBACTN,EAAU7E,GAAOiF,EAAgB,EAAI,IAAKnB,EAAQ9D,GAAM+E,EAAU/E,GAAM8E,EAAY9E,GAAMgF,EAAMhF,EAChGA,EAAM6E,EAAU3P,OAAS,EAAGgQ,E,CAEpC,CAaA7C,8BACIuC,EAA2BC,EAA8Bf,EAAmBiB,EAC5ED,EAAuBE,EAAgBE,GACzC,GAAIL,EAAU3P,QAAU,EACtB,MAAM,IAAI0B,MAAM,8CAIlB,MAAMwO,EAAa,CAACP,EAAU,GAAIA,EAAU,IAI5C,OAFAF,EAAaU,mBACTT,EAAkBC,EAAWO,EAAYtB,EAASiB,EAAWD,EAAaE,EAAME,GAC7EE,CACT,CAYA/C,8BACIwC,EAA8BS,EAA+BxB,EAAmBiB,EAChFD,EAAuBE,EAAgBE,GACzC,GAAIL,EAAU3P,QAAU,GAAKoQ,EAAWpQ,QAAU,EAChD,MAAM,IAAI0B,MAAM,2DAIlB,MAAMwO,EAAa,CAACP,EAAU,GAAIS,EAAW,IAG7C,OADAX,EAAaU,oBAAmB,EAAOR,EAAWO,EAAYtB,EAASiB,EAAWD,EAAaE,EAAME,GAC9FE,CACT,CAKQ/C,0BACJuC,EAA2BC,EAA8BO,EAAsBtB,EAC/EiB,EAA8BD,EAAgCE,EAAgBE,GAChF,GAAIN,EACF,IAAK,IAAI5E,EAAM,EAAGA,EAAM6E,EAAU3P,OAAS,EAAG8K,IAC5CoF,EAAWhJ,KAAK,QAGlB,IAAK,IAAI4D,EAAM,EAAGA,EAAM6E,EAAU3P,OAAS,EAAG8K,IAC5CoF,EAAWhJ,KAAKuI,EAAaQ,wBACzBN,EAAU7E,EAAM,GAAI8D,EAAQ9D,GAAM+E,EAAU/E,GAAM8E,EAAY9E,GAAMgF,EAAMhF,EAAKA,EAAM6E,EAAU3P,OAAS,EACxGgQ,GAGV,CAIQ7C,+BACJkD,EAAgBC,EAAgBC,EAAkBnH,EAAgB0G,EAAgBU,EAClFC,EAAsBT,GACxB,MAAMU,EAAUH,GAAYnH,EAAS,GAAK,EAC1C,IAAI4G,GAAuB,WAAZA,EAsBb,OAAO9P,KAAKyQ,OAAQN,EAASP,EAAKU,GAAgBV,EAAKW,GAAgBC,GAAWJ,EAAU,GArB5F,OAAQN,GACN,IAAK,QAGH,OAFAF,EAAKU,GAAgB,EACrBV,EAAKW,GAAgB,EACdvQ,KAAKyQ,OAAQN,EAASK,GAAWJ,EAAU,GACpD,IAAK,aACL,IAAK,aACH,GAAiB,IAAbC,EACF,MAAM,IAAI7O,MAAM,uDACX,CACL,MACMkP,IADoBP,EAASC,EAAS,GAAKA,EACX,GAAKA,EAASlH,EAASiH,EAI7D,OAHAP,EAAKU,GACY,eAAZR,EAA4B9P,KAAKyQ,OAAOC,EAAY,GAAK,GAAK1Q,KAAKyQ,MAAMC,EAAY,GAC1Fd,EAAKW,GAAgBG,EAAYd,EAAKU,GAC/BtQ,KAAKyQ,OAAQN,EAASO,EAAYxH,GAAUkH,EAAU,E,CAEjE,QACE,MAAM,IAAI5O,MAAM,4BAKxB,EAvMF,iBA0MA,iBAIEyL,4BACI0D,EAA8BC,EAAoBC,EAA+BC,EACjFC,GACF,GAAyB,IAArBJ,EAAU7Q,QAAsC,IAAtB+Q,EAAW/Q,OACvC,MAAM,IAAI0B,MAAM,8BAGlB,IAAIwP,EACAC,EACAC,EAEAN,GACFI,EAAIL,EAAU,GACdM,EAAIN,EAAU,KAEdK,EAAIL,EAAU,GACdM,EAAIN,EAAU,IAGhB,IAAIQ,GAAQ,EAUZ,GARIL,GACFI,EAAIL,EAAW,GACfM,EAAO,IAEPD,EAAIL,EAAW,GACfM,EAAO,GAGLN,EAAWM,KAAUF,EACvB,MAAM,IAAIzP,MAAM,sBAGlB,GAAIwP,GAAK,GAAKE,GAAK,GAAKD,GAAK,EAC3B,MAAM,IAAIzP,MAAM,2BAGlB,GAAIuP,IAAc3D,EAAcgE,iBAAiBL,EAAW,CAACC,EAAGE,IAC9D,MAAM,IAAI1P,MAAM,0CAGlB,MAAO,CAACwP,EAAGE,EAAGD,EAChB,GAIW,EAAAI,UAAY,qBACZ,EAAAC,SAAW,oB,iHCjcxB,MAAMC,EACJ/H,YAAYb,GACV6I,OAAOC,OAAOlQ,KAAMoH,EACtB,CAGW+I,eAKT,OAJKnQ,KAAKoQ,YACRpQ,KAAKoQ,UACDH,OAAOI,oBAAoBrQ,MAAMsQ,OAAOjM,KAAII,GAAQ,GAAIzE,KAAiCyE,OAASF,KAAK,MAEtGvE,KAAKoQ,SACd,EAUW,EAAAG,4BAAkEnJ,GAC3E,IAAI4I,EAA0B5I,E,6GCtBlC,gBAEA,UAuDMoJ,EAA4B5J,GAAwC,GAAvBnI,KAAKE,KAAKiI,EAAO,IAEpE,IAAI6J,EAAO,EAGX,MAAMC,EAYJzI,YAAoBa,GAAA,KAAAA,QAAAA,EAClB9I,KAAK2Q,aAAe,IAAIhP,IACxB3B,KAAK4Q,cAAgB,IAAIjP,IACzB3B,KAAK6Q,2BAA6B,GAClC7Q,KAAK8Q,eAAiB,EACxB,CAEA7K,OAAOa,EAAe5G,GACpB,MAAM6Q,EAAiB7Q,EAAKqI,OACtByI,EAAY9Q,EAAK+Q,WACjBC,EAAYhR,EAAKwG,WACjBE,EAAO4J,EAAyBU,GAGhCC,EAAenR,KAAK2Q,aAAavQ,IAAI0G,GAC3C,IAAKqK,EACH,MAAM,IAAIlR,MAAM,yCAElB,GAAIkR,EAAaC,eAAiBF,EAChC,MAAM,IAAIjR,MAAM,yCAAyCkR,EAAaC,2BAA2BF,KAInG,MAAMG,EAAwBrR,KAAK8I,QAAQ1H,OAAOkQ,aAE9C,CAACC,kBAAkB,EAAM3K,OAAM4K,MAAOC,eAAeC,UAAYD,eAAeE,WAG9EpL,EAAc8K,EAAsBO,iBAC1C,IAAInL,WAAWF,GAAalG,IAAI,IAAIoG,WAAWsK,EAAgBC,EAAWE,IAC1EG,EAAsBQ,QAItB,MAAMlS,EAAiBK,KAAK8I,QAAQnG,oBACpC3C,KAAK8I,QAAQ/F,iBACbpD,EAAemS,mBAAmBT,EAAuB,EAAGF,EAAapN,QAAQwE,OAAQ,EAAG3B,IAE5F,IAAAZ,WAAU,WAAW,IAAM,qCAAqCc,OAEhE9G,KAAK6Q,2BAA2BpL,KAAK4L,EACvC,CAEAlL,OAAO4L,EAAqBC,GAE1B,MAAMC,EAAqBjS,KAAK2Q,aAAavQ,IAAI2R,GACjD,IAAKE,EACH,MAAM,IAAIhS,MAAM,6CAGlB,MAAMiS,EAA0BlS,KAAK2Q,aAAavQ,IAAI4R,GACtD,IAAKE,EACH,MAAM,IAAIjS,MAAM,kDAElB,GAAIgS,EAAmBb,eAAiBc,EAAwBd,aAC9D,MAAM,IAAInR,MAAM,qDAElB,MAAM2G,EAAO4J,EAAyByB,EAAmBb,cAGnDzR,EAAiBK,KAAK8I,QAAQnG,oBACpC3C,KAAK8I,QAAQ/F,iBACbpD,EAAemS,mBACXG,EAAmBlO,QAAQwE,OAAQ,EAAG2J,EAAwBnO,QAAQwE,OAAQ,EAAG3B,EACvF,CAGAC,OAAOD,EAAc4K,EAAQC,eAAeU,QAAUV,eAAeE,SAAWF,eAAeW,UAM7F,MAAMvI,EAAa2G,EAAyB5J,GAGtCyL,EAAYrS,KAAK8I,QAAQ1H,OAAOkQ,aAAa,CAAC1K,KAAMiD,EAAY2H,UAEhEzN,EAAU,CAAC+C,GA5FY2J,IA4FcjO,KAAM,EAAA8P,YAAYC,QAAShK,OAAQ8J,GAI9E,OAHArS,KAAK2Q,aAAatQ,IAAI0D,EAAQ+C,GAAI,CAAC/C,UAASqN,aAAcxK,KAE1D,IAAAZ,WAAU,WAAW,IAAM,uCAAuCY,YAAe7C,EAAQ+C,OAClF/C,CACT,CAEA3D,IAAI0G,G,MACF,OAAgC,QAAzB,EAAA9G,KAAK2Q,aAAavQ,IAAI0G,UAAG,eAAE/C,OACpC,CAEAkD,QAAQH,GACN,MAAM0L,EAAaxS,KAAK2Q,aAAavQ,IAAI0G,GACzC,IAAK0L,EACH,MAAM,IAAIvS,MAAM,iCAclB,OAXA,IAAA+F,WAAU,WAAW,IAAM,sCAAsCc,iBAAkB0L,EAAWzO,QAAQ+C,OAEtG9G,KAAK2Q,aAAanJ,OAAOV,GACzB9G,KAAK8Q,eAAerL,KAAK+M,EAAWzO,QAAQwE,QAGpBvI,KAAK4Q,cAAcxQ,IAAI0G,IAE7C9G,KAAK4Q,cAAcpJ,OAAOV,GAGrB0L,EAAWpB,YACpB,CAEAxS,eAAekI,GACb,MAAM2L,EAAezS,KAAK4Q,cAAcxQ,IAAI0G,GAC5C,GAAI2L,EACF,OAAOA,EAAavS,KAGtB,MAAMsS,EAAaxS,KAAK2Q,aAAavQ,IAAI0G,GACzC,IAAK0L,EACH,MAAM,IAAIvS,MAAM,uBAGlB,MAAMN,EAAiBK,KAAK8I,QAAQnG,oBACpC3C,KAAK8I,QAAQ/F,iBACb,MAAM8G,EAAa2G,EAAyBgC,EAAWpB,cACjDsB,EAAgB1S,KAAK8I,QAAQ1H,OAAOkQ,aAEtC,CAAC1K,KAAMiD,EAAY2H,MAAOC,eAAeW,SAAWX,eAAekB,WACvEhT,EAAemS,mBACXU,EAAWzO,QAAQwE,OAA4B,EAAuBmK,EACtE,EAA4B7I,GAEhC7J,KAAK8I,QAAQ7F,QAEb,MAAM2P,EAAkB,IAAIzT,SAAsBC,IAChDsT,EAAcG,SAASC,WAAWC,MAAMC,MAAK,KAC3C,MAAM9S,EAAOwS,EAAcd,iBAAiBlE,MAAM,GAClDgF,EAAcO,UACd7T,EAAQc,EAAK,GACb,IAKJ,OAFAF,KAAK4Q,cAAcvQ,IAAIyG,EAAI,CAAC5G,KAAM0S,IAE3BA,CACT,CAEAvP,wBACE,IAAK,MAAMkF,KAAUvI,KAAK6Q,2BACxBtI,EAAO0K,UAET,IAAK,MAAM1K,KAAUvI,KAAK8Q,eACxBvI,EAAO0K,SAEX,EAGW,EAAA1R,qBAAuB,IAAIiK,IACpC,IAAIkF,KAAsBlF,E,8vBCvO9B,kBACA,UACA,UACA,UACA,aACA,UACA,UACA,aAOa,EAAAlE,wBAA+D,IAAI3F,IAAI,CAClF,CAAC,MAAO,CAACuR,EAASC,MAClB,CAAC,OAAQ,CAACD,EAASE,OACnB,CAAC,QAAS,CAACF,EAASG,QACpB,CAAC,MAAO,CAACC,EAAUC,MACnB,CAAC,OAAQ,CAACL,EAASM,OACnB,CAAC,QAAS,CAACN,EAASO,QACpB,CAAC,OAAQ,CAACP,EAASQ,OACnB,CAAC,QAAS,CAACR,EAASS,QAEpB,CAAC,cAAe,CAACC,EAAKC,YAAaD,EAAKE,6BACxC,CAAC,OAAQ,CAACZ,EAASvU,OACnB,CAAC,UAAW,CAACuU,EAASa,UACtB,CAAC,OAAQ,CAACb,EAASc,OACnB,CAAC,OAAQ,CAAC,EAAAC,KAAM,EAAAC,sBAChB,CAAC,MAAO,CAAChB,EAASiB,MAClB,CAAC,OAAQ,CAACjB,EAASkB,OACnB,CAAC,MAAO,CAACd,EAAUe,MACnB,CAAC,MAAO,CAACnB,EAASoB,IAAKpB,EAASqB,uBAChC,CAAC,MAAO,CAACrB,EAASsB,MAClB,CAAC,MAAO,CAACtB,EAASuB,MAClB,CAAC,QAAS,CAACvB,EAAShE,QACpB,CAAC,OAAQ,CAAC,EAAAwF,KAAM,EAAAC,sBAChB,CAAC,oBAAqB,CAACf,EAAKgB,kBAAmBhB,EAAKiB,mCACpD,CAAC,gBAAiB,CAACjB,EAAKkB,cAAelB,EAAKmB,+BAC5C,CAAC,YAAa,CAAC7B,EAAS8B,UAAW9B,EAASqB,uBAC5C,CAAC,SAAU,CAAC,EAAAU,SAEZ,CAAC,UAAW,CAACrB,EAAKsB,QAAStB,EAAKuB,yBAChC,CAAC,MAAO,CAAC7B,EAAU8B,MACnB,CAAC,MAAO,CAAClC,EAASmC,MAClB,CAAC,MAAO,CAAC/B,EAAUgC,MACnB,CAAC,aAAc,CAACpC,EAASqC,aACzB,CAAC,YAAa,CAAC,EAAAC,UAAW,EAAAC,wBAC1B,CAAC,aAAc,CAAC,EAAAC,WAAY,EAAAD,wBAC5B,CAAC,YAAa,CAAC,EAAAE,UAAW,EAAAF,wBAC1B,CAAC,YAAa,CAAC,EAAAG,UAAW,EAAAH,wBAC1B,CAAC,aAAc,CAAC,EAAAI,WAAY,EAAAJ,wBAC5B,CAAC,WAAY,CAAC,EAAAK,SAAU,EAAAL,wBACxB,CAAC,WAAY,CAAC,EAAAM,SAAU,EAAAN,wBACxB,CAAC,eAAgB,CAAC,EAAAO,aAAc,EAAAP,wBAChC,CAAC,kBAAmB,CAAC,EAAAQ,gBAAiB,EAAAR,wBACtC,CAAC,kBAAmB,CAAC,EAAAS,gBAAiB,EAAAT,wBACtC,CAAC,OAAQ,CAACvC,EAASiD,OACnB,CAAC,UAAW,CAACjD,EAASkD,UACtB,CAAC,MAAO,CAAClD,EAASmD,MAClB,CAAC,OAAQ,CAACnD,EAASoD,OACnB,CAAC,OAAQ,CAACpD,EAASqD,OACnB,CAAC,MAAO,CAACjD,EAAUkD,MACnB,CAAC,MAAO,CAACtD,EAASuD,MAClB,CAAC,OAAQ,CAACvD,EAASwD,OACnB,CAAC,kBAAmB,CAACxD,EAASyD,gBAAiBzD,EAASqB,uBACxD,CAAC,YAAa,CAAC,EAAAqC,UAAW,EAAAC,4B,gJC9Cf,EAAAC,YAAeC,IAC1B,OAAQA,GACN,KAAK,EACH,MAAO,MACT,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,YACT,QACE,MAAM,IAAI9W,MAAM,GAAG8W,iC,EAIZ,EAAAC,oBACT,CAACC,EAAyBC,GAA6B,EAAOC,GAAU,EAAOC,EAAgB,IAMtF,GAGA,EAAAC,sBAAwB,CAACC,EAAkBL,IAAoC,WACpFK,EAAU,iDAAmD,aAC7DL,EAAa,qCAAuC,Y,sHC7B5D,gBAEA,UACA,UAGA,UACA,UACA,SA2Ha,EAAAM,8BACT,CAAC/T,EAA+BgU,EAA2B3P,EAC1D4P,EAAgCC,EAAmBC,EAAmBC,EAAkBN,EACxFO,KACC,MAAMC,EAAuC,SAAtBjQ,EAAWkQ,OAC5BC,EAAaF,EAAiBtU,EAAO,GAAGoB,KAAK,GAAKpB,EAAO,GAAGoB,KAAK,GACjEqT,EAAYR,EAAY,GACxBS,EAAWJ,EAAiBL,EAAY,GAAKA,EAAY,GACzDU,EAAYL,EAAiBL,EAAY,GAAKA,EAAY,GAC1DW,EAAcN,EAAiBL,EAAY,GAAKA,EAAY,GAC5DY,IAAYL,EAAa,GAAM,GAAKA,EAAa,GAAM,IAAMF,GAClDI,EAAW,GAAM,IAAMJ,IACpCM,EAAc,GAAM,EAGlBE,EAAYR,EAAiBM,EAAcF,EAAWC,EACtDI,EAAYT,EAAiBI,EAAWC,EAAYC,EACpDI,EACFH,EAAS,CAAC,EAAG,EAAG,GAAK,CAACC,GAAa,EAAI,EAAI,GAAIA,EAAY,GAAKC,GAAa,EAAI,EAAI,GAAI,GACvFE,EACFJ,EAAS,CAAC,EAAG,EAAG,GAAK,CAACC,GAAa,EAAI,EAAI,EAAGA,EAAY,GAAKC,GAAa,EAAI,EAAI,EAAG,GACrFG,EAAW,CACfja,KAAKE,KAAK2Z,EAAYE,EAAc,GAAKC,EAAkB,IAC3Dha,KAAKE,KAAK4Z,EAAYC,EAAc,GAAKC,EAAkB,IAC3Dha,KAAKE,KAAKsZ,EAAYO,EAAc,GAAKC,EAAkB,MAG7D,IAAAzS,WAAU,WAAW,IAAM,iCAAiC0S,MAE5D,MAAMC,EAAmBN,EAAUP,GAAkBE,EAAa,GAAM,EAAI,EAAI,EAAKS,EAAkB,GAEjGG,EAAaJ,EAAc,GAAKC,EAAkB,GAClDI,EAAaL,EAAc,GAAKC,EAAkB,GAClDK,EAAYra,KAAK2N,IAAIoM,EAAc,GAAKG,EAAkBH,EAAc,IAExEO,EAAYrB,EAAYkB,GAAe,EACvCI,EAAYrB,EAAYkB,GAAe,EACvCI,EAAWrB,EAAWkB,GAAc,EAEpCI,EAAeb,EAAS,CAACM,EAAkB,EAAG,GAAK,CAAC,EAAG,EAAG,GAE1DQ,EAAgB,CACpB,qDAAqDd,GAA+B,IAArBM,EAAyB,YAAc,UACtG,qDAAqDN,EAAS,YAAc,WAE9E,IAAIe,EAAmB,wDACwBf,EAAS,YAAc,yCAC9CA,EAAS,YAAc,sGAEwBA,EAAS,YAAc,8HAE/DA,EAAS,MAAQ,uBAUhD,OARIf,IACF6B,EAAc1T,KAAK,wDAAwD4S,EAAS,YAAc,WAClGe,GAAoB,6DAC8Bf,EAAS,YAAc,yCAClDP,EAAiB,IAAM,MAAMO,EAAS,MAAQ,mBAIhE,OAAP,wBACKb,GAAQ,CACXxS,QAAS,CAAC,CAACJ,KAAM6S,EAAalS,SAAU/B,EAAO,GAAG+B,SAAU8T,YAAa,EAAA/G,YAAYC,UACrF1M,cAAe,KAAM,CAAEyH,EAAGoL,EAAS,GAAIY,EAAGZ,EAAS,GAAIa,EAAGb,EAAS,KACnEc,gBAAiB,IAAM,aACrB,EAAAC,kTAIAN,EAAc5U,KAAK,mCACA4U,EAAc5a,kDAC/B8Z,EAAS,YAAc,yCACJc,EAAc5a,OAAS,uFAEPiF,EAAO,GAAGoB,KAAKL,KAAK,wDACpBf,EAAO,GAAGoB,KAAKL,KAAK,0DAClBkT,EAAYlT,KAAK,iEACV,EAAA6D,UAAUsR,eAAejC,GAAa/J,MAAM,EAAG,GAAGnJ,KAAK,4DAC5DsD,EAAWsG,YAAY,OAAOtG,EAAWsG,YAAY,mDAC5DtG,EAAWwG,KAAK,OAAOxG,EAAWwG,KAAK,sDACpCxG,EAAWsF,QAAQ,OAAOtF,EAAWsF,QAAQ,wDAC3CtF,EAAWuG,UAAU,OAAOvG,EAAWuG,UAAU,yCAChEsJ,uCACAC,sCACDC,eACvBwB,cA9MN,EAACtB,EAAyBiB,EAAoBC,EAAoBC,EAAmBU,GAAU,EAC9F1C,EAAyB2C,GAA4B,EAAOC,EAAoB,EAAGC,EAAoB,EACvGnB,EAAmB,KAClB,MAsBMoB,EAAgBjC,EAAiB,6DAGA,6DAIjCkC,EAAkBlC,EAAiB,+GAOA,+GAQnCmC,EAAUnC,EAAiB,YAAc,YACzCoC,EAASpC,EAAiB,YAAc,YACxCqC,EAAMrC,EAAiB,MAAQ,MAC/BsC,EAAMtC,EAAiB,MAAQ,MAC/BuC,EAAe,yDAENvC,EAAiB,cAAgB,oCACnCqC,mCACAA,mCAEFC,qDACAA,sLAGDA,uCACI,IAAAtD,aAAY+C,uJAGFI,4BAAkCC,eACxDH,qEA/DkB,CAACpB,IACnB,OAAQA,GACN,KAAK,EACH,MAAO,uBACT,KAAK,EACH,MAAO,gEACT,KAAK,EACH,MAAO,2BACT,QACE,MAAM,IAAI1Y,MAAM,oBAAoB0Y,uB,EAwDxC2B,CAAYT,iCAIRU,EAAUzC,EAAkBiB,GAAaE,EAAW,2BACxCY,WAClBQ,IAC0D,2BACxCR,2DAEhBQ,yBAEK,IAAAvD,aAAY+C,WACeZ,GAAYD,EAAY,2BACxCa,WAClBQ,IAC0D,2BACxCR,2DAEhBQ,yBAEK,IAAAvD,aAAY+C,WAEbW,EAAU,GA5EI,CAAC7B,IACnB,OAAQA,GACN,KAAK,EACH,MAAO,qCACT,KAAK,EACH,MAAO,yCACT,QACE,MAAM,IAAI1Y,MAAM,oBAAoB0Y,uB,EAqEvB8B,CAAYX,KAEzBY,GAAU,IAAA5D,aAAY6B,GACtBgC,EAAQ7C,GAAiB,IAAAhB,aAAY+C,IAAqB,IAAA/C,aAAYgD,GACtEc,EAAQ9C,GAAiB,IAAAhB,aAAYgD,IAAqB,IAAAhD,aAAY+C,GAsB5E,MArBiB,UACjB,IAAA7C,qBAAoBC,EAAY2C,EAAgD,IAArBjB,EAAwB,8DAChCgC,cACjD7C,EAAiByC,EAAUC,sEAGsBI,cACjD9C,EAAiB0C,EAAUD,6EAG6BG,iCACtC/B,gHAIHb,EAAiB,cAAgB,yBAChDkC,aACA,IAAA3C,uBAAsBsC,EAAS1C,iGAIlB,EA2FT4D,CACI/C,EAAgBiB,EAAWC,EAAWC,EAAU3B,OAASxP,GAAW,EAAOoR,EAAa,GACxFA,EAAa,GAAIA,EAAa,oBAElCb,GAAS,IAAAyC,4BAA2BrC,EAAmBD,GAAgBV,EAAgBgB,IAC9E,IAAAiC,wBACItC,EAAmBD,GAAgBV,EAAgBgB,GAAW,OAAOhR,EACrE+P,MAA4B,C,oGClOxC,EAAA4B,cAAgB,uV,yIC0ChB,EAAAqB,2BACT,CAACE,EAAyBC,EAAyCC,GAAa,EAAOpC,EAAY,GAClGqC,GAAS,EAAOC,EAAkB,GAAIC,GAAY,KACjD,MAAMzC,EAAaqC,EAAc,GAAKD,EAAc,GAC9CnC,EAAaoC,EAAc,GAAKD,EAAc,GAC9CM,EAAaJ,EAAatC,EAAaE,EACvCyC,EAAaL,EAAapC,EAAYF,EACtCD,EAAmB2C,EAAaL,EAAc,GAC9CO,EAAgB1C,EAAYmC,EAAc,GAEhD,KAAQC,GAAmC,IAArBvC,GAA+C,IAArBqC,EAAc,MACrDE,GAAoC,IAArBvC,GAA+C,IAArBA,IAC5C2C,EAAaL,EAAc,IAAO,GAAKnC,EAAYmC,EAAc,IAAO,GAA0B,IAArBD,EAAc,GAC/F,MAAM,IAAI/a,MAAM,iBAAiBib,+BAC7BvC,0BAAyCqC,EAAc,oDAC/BrC,mCACrB2C,0CAAmDL,EAAc,iBACpEnC,2CAAmDmC,EAAc,oBACjED,EAAc,iBAEpB,MAAO,6CAC6BrC,WAA0B2C,EAAa3C,OAAsB4C,wDACrD1C,EAAamC,EAAc,QAAQlC,+BAE9DkC,EAAc,6BACdA,EAAc,iCACVrC,yBACPG,kCAEOmC,EAAc,OAAOA,EAAc,OAAOA,EAAc,+OAKjEI,EAAY,IAAM,oFAGhBA,EAAY,IAAM,wFAEtBF,EAAS,IAAM,mEACevC,0BAE3BuC,EAAS,GAAG1c,KAAKE,KAAKyc,EAAkBtC,KAAe,qDACzDqC,EAAS,qBAAqBC,IAAoB,uHAKrCI,kRA1FM5E,EAgGGsE,EA/FjCtE,EACK,4JAOA,8PA2F+B4E,smBAaT,IAArB7C,EAAyB,GAAK,6EAhGX,EAACuC,EAAqBvC,IAC/CuC,EACK,wNAIoB,IAArBvC,EAAyB,GAAK,mSAKP,IAArBA,EAAyB,GAAK,yDAG/B,kRAMsB,IAArBA,EAAyB,GAAK,uDA8E9B8C,CAAuBP,EAAYvC,gNAnHZ,IAAC/B,CA4HlC,EAGF,MAAM8E,EAA0B9E,GAC1BA,EACK,yJAOA,yJAaE,EAAAmE,uBACT,CAACC,EAAyBC,EAAyCC,GAAa,EAAOpC,EAAY,GAClGqC,GAAS,EAAOC,EAAkB,GAAIvD,GAA4B,KACjE,MAAMe,EAAaoC,EAAc,GAAKC,EAAc,GAC9CpC,EAAamC,EAAc,GAAKC,EAAc,GAC9CK,EAAaJ,EAAatC,EAAaE,EACvCyC,EAAaL,EAAapC,EAAYF,EAE5C,GAAM2C,EAAaN,EAAc,IAAO,GAAKK,EAAaL,EAAc,IAAO,GACzEnC,EAAYmC,EAAc,IAAO,EACrC,MAAM,IAAIhb,MAAM,cAAcsb,0CAC1BN,EAAc,kBAAkBK,0CAChCL,EAAc,iBAAiBnC,0CAAkDmC,EAAc,MAErG,MAAMU,EAAgBJ,EAAaN,EAAc,GAC3CW,EAAgBN,EAAaL,EAAc,GAC3CO,EAAgB1C,EAAYmC,EAAc,GAC1CY,EAAgBhE,EAClB,2HAGsCe,qDACAC,4LAKC0C,4BAAqCN,EAAc,2DACjDK,4BAAqCL,EAAc,oBAC1FS,EAAuBR,0HAIcpC,4BAAoCmC,EAAc,+DAC5CpC,4BAAqCoC,EAAc,sfAa/CA,EAAc,gIAI3DC,EAAa,oCAAoCD,EAAc,OAClD,iCAAiCA,EAAc,8ZAUhBA,EAAc,oJAEZA,EAAc,2FAKhE,+OAMkCrC,yCAEV+C,uCACAC,uCACAJ,mKAIIG,wEACEC,8HAGhCF,EAAuBR,qGAKOM,6tBAjGN,CAACN,GAC7BA,EAAa,gDAAkD,gDAoH3DY,CAAwBZ,4eAkB1B,MAAO,iDACiCI,OAAgBC,oDAChB1C,OAAgBC,+BACrCkC,EAAc,+BACdA,EAAc,4BACjBlC,kCAEKmC,EAAc,OAAOA,EAAc,OAAOA,EAAc,6MAIjEE,EAAS,IAAM,0CACZA,EAAS,GAAG1c,KAAKE,KAAKyc,EAAkBtC,KAAe,uDACzDqC,EAAS,qBAAqBC,IAAoB,4WAU/DS,UAEL,C,mHCjUD,gBACA,UAEA,UA6JME,EACF,CAACvY,EAA+BiB,EAAcuX,EAA8BC,EAC3E9L,KACC,MAAMqH,EACgB,CAAC/S,OAAMb,WAAY,CAAC,EAAA0O,YAAYC,QAAS,EAAAD,YAAYC,SAAU7N,UAAWyL,GAChG,OAAO,OAAP,wBACKqH,GAAQ,CACXpX,IAAK,IAxDT,EAACoX,EAA2B7L,EAAeC,EAAeoQ,EACzDC,EAAmCC,EAAyBvQ,EAAEpG,Y,QAC7D,MAAM4W,GAAe,EAAA/T,UAAUgU,SAASzQ,EAAE/G,KAAMgH,EAAEhH,MAClD,IAAI6S,EAAc9L,EAAE/G,KAChByX,EAAa,EAAAjU,UAAUxB,KAAK+E,EAAE/G,MAE9B0X,GAAY,EAIhB,GAAIH,EAAa,CACf,MAAMI,EAAkB,EAAA1Q,cAAc2Q,UAAU7Q,EAAE/G,KAAMgH,EAAEhH,MAAM,GAChE,IAAK2X,EACH,MAAM,IAAItc,MAAM,gDAElBwX,EAAc8E,EACdF,EAAa,EAAAjU,UAAUxB,KAAK6Q,GAG5B,IAAIgF,EAAkB,EACtB,IAAK,IAAI3Y,EAAI,EAAGA,EAAI2T,EAAYlZ,OAAQuF,IAAK,CAC3C,MAAM4Y,EAAgC,QAAzB,EAAA/Q,EAAE/G,KAAK+G,EAAE/G,KAAKrG,OAASuF,UAAE,QAAI,EAE1C,GAAI4Y,KADkC,QAAzB,EAAA9Q,EAAEhH,KAAKgH,EAAEhH,KAAKrG,OAASuF,UAAE,QAAI,GAIxC,MAFA2Y,GAAmBC,C,CAKnBD,EAAkB,GAAM,IAC1BH,GAAY,E,MAMdA,GAAY,EAGd,OAAO,OAAP,wBACK9E,GAAQ,CACXgC,gBAAkBmD,GA3ItB,EAACA,EAA4BC,EAA0BC,EAA0BC,EAChFR,EAAoBS,EAAsBf,EAA8BC,EACxEe,EAAQ,MAAOC,EAAQ,MAAOC,EAAa,SAC1C,MAAMb,EAAa,EAAAjU,UAAUxB,KAAKkW,GAC5BK,EAAU1e,KAAKE,KAAK0d,EAAa,GAEvC,IAAIe,EACAC,EACoB,iBAAbrB,EACToB,EAAmBC,EAAmB,CAAC1R,EAAGC,IAAM,GAAGoQ,MAAarQ,OAAOC,MAC1C,mBAAboQ,EAChBoB,EAAmBC,EAAmBrB,GAEtCoB,EAAmBpB,EAASsB,OAC5BD,EAAmBrB,EAASuB,QAG9B,IAAIC,EAAgB,GACpB,MAAMC,GAAsB,IAAAC,qBAAoB,SAAUZ,GAC1D,GAAIC,EAAa,CACf,MAAMY,EAAkB/Y,IACtB,MAAMuI,EAAU,EAAA/E,UAAUsR,eAAe9U,GACnCgZ,EAAoB,GAC1B,IAAK,IAAI9Z,EAAIc,EAAKrG,OAAS,EAAGuF,GAAK,EAAGA,IAAK,CACzC,MAAM+Z,EAA4B,IAAtBf,EAAWve,OAAe,KACX,IAAtBue,EAAWve,OAAsB,mBACA,oBAAoBuF,EAAIgZ,EAAWve,OAASqG,EAAKrG,UACvFqf,EAAQnY,KAAK,GAAG0H,EAAQrJ,UAAU+Z,OAASjZ,EAAKd,O,CAElD,OAAO8Z,EAAQrf,OAAS,EAAIqf,EAAQrZ,KAAK,KAAO,IAAI,EAGtDiZ,EAAgB,OACpBC,EAAoBK,4DAEwBL,EAAoBM,gCACvDJ,EAAef,6DAGoBa,EAAoBM,gCACvDJ,EAAed,c,CAKtB,IAAImB,EACJ,GAAI1B,EAEA0B,EADEjB,EACW,WACfU,EAAoBQ,2BAA2B,2BAC/CR,EAAoBS,QAAQ,kBAAmB,wJAGtBb,EAAiB,sBAAuB,0BAElD,4BAA4BA,EAAiB,oBAAqB,4BAE5E,CACL,IAAKN,EACH,MAAM,IAAI9c,MAAM,wFAElB,MAAMke,EAAoB7Q,IACxB,MAAM8Q,EAAc,eAAe9Q,gBAAgBA,KAC7C+Q,EAAc,eAAe/Q,gBAAgBA,KACnD,MAAO,WACTmQ,EAAoBS,QAAQ,qBAAqB5Q,KAAM,sCAC5CA,sDACAA,qDACDA,cAAcA,4BACdA,cAAcA,gCACVA,cAAcA,gCACdA,cAAcA,yCACLA,QAAQ8P,EAAiBgB,EAAaC,KAAe,EAG5EL,EAAa,WACbP,EAAoBQ,2BAA2B,2BAC/CE,EAAiB,aACjBA,EAAiB,aACjBA,EAAiB,aACjBA,EAAiB,I,CAGnB,MAAO,mEACmDnB,uEACAC,kFACWC,aAEvEjB,QAAAA,EAA4B,SAC5BuB,UAEAb,EAAa2B,oBACX3B,EAAa4B,sCAAsCpB,WACnDa,QACF,EA6CuCQ,CAC/B7B,EAAchR,EAAE/G,KAAMgH,EAAEhH,KAAM6S,EAAa6E,EAAWH,EAAaH,EAAUC,GACjFjX,QAAS,CAAC,CAACJ,KAAM6S,EAAalS,SAAU2W,EAAgB7C,YAAa,EAAA/G,YAAYC,UACjF1M,cAAe,KACX,CAAEyH,EAAG7O,KAAKE,KAAK0d,EAAa,IAA2BC,EAAY,EAAI,OAAoB,EAWpFmC,CAA0BjH,EAAUhU,EAAO,GAAIA,EAAO,GAAIwY,EAAUC,IAAyB,EAInG,EAAA1I,IAAO7L,IAClBA,EAAQ4B,QAAQyS,EAAgCrU,EAAQlE,OAAQ,OAAO,CAACmI,EAAGC,IAAM,GAAGD,KAAKC,MAAK,EAGnF,EAAAyI,IAAO3M,IAClBA,EAAQ4B,QAAQyS,EAAgCrU,EAAQlE,OAAQ,OAAO,CAACmI,EAAGC,IAAM,GAAGD,KAAKC,MAAK,EAGnF,EAAAwJ,IAAO1N,IAClBA,EAAQ4B,QAAQyS,EAAgCrU,EAAQlE,OAAQ,OAAO,CAACmI,EAAGC,IAAM,GAAGD,KAAKC,MAAK,EAGnF,EAAA0J,IAAO5N,IAClBA,EAAQ4B,QAAQyS,EACZrU,EAAQlE,OAAQ,MAAO,CAAE8Z,OAAQ,CAAC3R,EAAGC,IAAM,WAAWD,KAAKC,KAAM2R,OAAQ,CAAC5R,EAAGC,IAAM,YAAYD,KAAKC,MAAQ,ueAazG,EAGI,EAAA4K,IAAO9O,IAClBA,EAAQ4B,QAAQyS,EAAgCrU,EAAQlE,OAAQ,OAAO,CAACmI,EAAGC,IAAM,GAAGD,KAAKC,MAAK,C,kJC3MhG,gBAYa,EAAA8S,eAAiB,GAkCjB,EAAAhB,oBAAsB,CAACjZ,EAAckI,KAChD,MAAMoR,EAAQpR,EAAMpO,OAAS,EAAI,MAAQ,cAAcoO,EAAMpO,UAEvD4O,EAAU,EAAA/E,UAAUsR,eAAe/M,GACzC,IAAIgS,EAAa,GACjB,IAAK,IAAI7a,EAAI,EAAGA,EAAI6I,EAAMpO,OAAS,EAAGuF,IACpC6a,GAAc,gBACL7a,iBAAiBqJ,EAAQrJ,qBACxBA,iBAAiBqJ,EAAQrJ,wBACtBA,WAAWA,yBACRA,WAGlB6a,GAAc,cAAchS,EAAMpO,OAAS,gBAE3C,MAAMuf,EAAUnR,EAAMpO,OAAS,EAAI,GAAK,iBAC5BkG,yCAA4CsZ,yCAEpDY,SAMEf,EAAoB,GAC1B,GAAqB,IAAjBjR,EAAMpO,OACRqf,EAAQnY,KAAK,WACR,GAAIkH,EAAMpO,OAAS,EACxBqf,EAAQnY,KAAK,mBAEb,IAAK,IAAI3B,EAAI6I,EAAMpO,OAAS,EAAGuF,GAAK,EAAGA,IACrC8Z,EAAQnY,KAAK,GAAG0H,EAAQrJ,qBAAqBA,OAejD,MAAO,CAACga,UAASI,QAzBD,CAACU,EAAmBC,IAChClS,EAAMpO,OAAS,EAAI,GAAGsgB,KAAcD,KAAe,UAAUna,KAAQma,OAAeC,MAwB9DC,QAXVnS,EAAMpO,OAAS,EAAI,GAAK,iBAC5BkG,4BAA+BsZ,4BAChCH,EAAQrZ,KAAK,aASWwa,cANb,CAACF,EAAoBG,IACvCrS,EAAMpO,OAAS,EAAI,IAAIygB,EAAQ,IAAM,KAAKH,KAAgB,UAAUpa,KAAQua,EAAQ,GAAK,MAAMH,KAKjDZ,2BAHf,CAACxQ,EAAWrD,IAC3C,OAAOqD,KAAKsQ,IAAQ3T,EAAO,IAAI2T,KAAS3T,EAAK7F,KAAK,QAAU,MAEcwZ,QAAM,EAWtF,MAAMkB,EACJhX,YAAoBtC,GAAA,KAAAA,wBAAAA,CAAoD,CACxE4Y,sCAAsC3X,GAGpC,MAAO,qBAD4B,iBAATA,EAAoB,GAAGA,KAAUA,gBAE7D,CACA0X,UAAUrD,EAAiD,EAAAyD,gBACzD,MAAMQ,EAA0C,iBAAlBjE,EAA6BA,EAAgBA,EAAc,GACnFkE,EAA0C,iBAAlBlE,EAA6B,EAAIA,EAAc,GACvEmE,EAA0C,iBAAlBnE,EAA6B,EAAIA,EAAc,GAEvEoE,EAA2D,IAApCrf,KAAK2F,wBAAwB,IAAgD,IAApC3F,KAAK2F,wBAAwB,GAUnG,MAAO,4BAA4BuZ,MAAmBC,MAAmBC,iBATvDC,EAAuB,uDACA,sHAEbA,EACxB,gCACA,sCAAsCrf,KAAK2F,wBAAwB,GAAK3F,KAAK2F,wBAAwB,qCAChF3F,KAAK2F,wBAAwB,2BAC9CuZ,EAAiBC,EAAiBC,yBAM5C,EAGW,EAAAE,mBAAsBzZ,GAC/B,IAAIoZ,EAAiBpZ,E,2HCpIzB,gBACA,UAEA,UACA,UACA,UAgHa,EAAA0Z,mCACT,CAAC/b,EAA+BqE,EAC/B2X,KACC,MAAMhI,GAjH8BF,EAiHc9T,EAAOjF,OAAS,EAjHZmG,EAiHemD,EAAWsI,SAjHa,CACjG1L,KAAM,cACNb,WAAY0T,EAAU,CAAC,EAAAhF,YAAYC,QAAS,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACvD,CAAC,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACxD7N,cAJuC,IAAC4S,EAAkB5S,EAkHtD,OAAO,OAAP,wBACK8S,GAAQ,CACXpX,IAAK,IA5GT,EAACoD,EAA+BgU,EAA2B3P,EAC1D2X,KACC,MAAMlI,EAAU9T,EAAOjF,OAAS,EAC1BkhB,EAAcnI,EAAU,8BAAgC,GACxDoI,EAASlc,EAAO,GAAGoB,KACnB+a,EAASnc,EAAO,GAAGoB,KACnBgb,EAAyBD,EAAO,GAAK9X,EAAWgY,MAEhDta,EAAW,OACX,mBAACua,EAAkB,gBAAEC,IAAmB,IAAAC,sBAAqBnY,GAC7DoY,EAAkC,CACtC,sDAAsD1a,MACtD,sDAAsDA,OAEpD+R,GACF2I,EAAgCxa,KAAK,sDAAsDF,OAG7F,MAAM+I,EAAsC,SAAtBzG,EAAWkQ,OAC3BN,GAAc,IAAAyI,sBAChBR,EAAQC,EAAQ9X,EAAWuG,UAAWvG,EAAWwG,KAAMxG,EAAWsF,QAASmB,GACzE+N,EAAa,EAAAjU,UAAUxB,KAAK6Q,GAC5BgG,GAAsB,IAAAC,qBAAoB,SAAUjG,GACpD0I,GAAiB,IAAAzC,qBAAoB,IAAKgC,GAC1CU,GAAiB,IAAA1C,qBAAoB,IAAKiC,GA8DhD,OAAO,OAAP,wBACKnI,GAAQ,CACXxS,QAAS,CAAC,CACRJ,KAAM4a,EAA6BA,EAA2B/H,GAAeA,EAC7ElS,SAAU/B,EAAO,GAAG+B,SACpB8T,YAAa,EAAA/G,YAAYC,UAE3BiH,gBAnEuBmD,GAA+B,uCAC1B9U,EAAWsF,QAAQ,QAAQtF,EAAWsF,QAAQ,yCACjDtF,EAAWwG,KAAK,QAAQxG,EAAWwG,KAAK,cAErE4R,EAAgC1b,KAAK,+BAClB0b,EAAgC1hB,mDAAmDgH,YAEtGua,QACArC,EAAoBK,cACpBqC,EAAerB,cACfsB,EAAetB,gBAEfnC,EAAa2B,oBACX3B,EAAa4B,sCAAsClC,aAEnDoB,EAAoBQ,2BAA2B,yBAC/CR,EAAoBS,QAAQ,aAAc,yGAEF5P,EAAgB,EAAI,+DACTA,EAAgB,EAAI,qBACnEA,EAAgB,EAAI,mEACasR,yBAE1Bra,OAAcA,0DACmBoa,EAAO,8DAClBA,EAAO,kEACAA,EAAO,oEACL9X,EAAWuG,UAAU,kDAE5BsR,EAAOpR,EAAgB,EAAI,yFAItBqR,EAAO,mEACL9X,EAAWuG,UAAU,gDAC5BsR,EAAOpR,EAAgB,EAAI,2DAK1D6R,EAAelC,2BACX,WACA3P,EAAgB,CAAC,QAAS,UAAW,SAAU,iBAC/B,CACE,QAAS,gBAAiB,UAAW,sCAE5C6R,EAAepB,cAAc,4BAE5CqB,EAAenC,2BAA2B,WAAY,CACpD,iBAAkB,aAAc,UAAW,sCAE9BmC,EAAerB,cAAc,gFAKhDU,UACAM,0CAWEla,cAAe,KAAM,CAAEyH,EAAG7O,KAAKE,KAAK0d,EAAa,OAA0B,EAchEgE,CAA6B7c,EAAQgU,EAAU3P,EAAY2X,IAA2B,C,0IC1HzG,gBACA,SAGA,UACA,UACA,UACA,UAEa,EAAAU,qBACT,CAACI,EAA+BnS,EAAgCC,EAC/DmS,EAA+BpT,EAA4BmB,KAC1D,MAAM2J,EAAYqI,EAAW,GACvBE,EAAoBF,EAAW5S,MAAMY,EAAgB,EAAI,EAAGA,EAAgB,EAAI,GAChFmS,EAAcD,EAAkBjiB,OAChC6Z,EAAcjK,EAAY,GAE1BuS,EADqBvS,EAAYT,MAAM,GACCrJ,KAAI,CAACoJ,EAAG3J,IAAM2J,GAAKA,EAAI,IAAMW,EAAUtK,GAAK,KAEpF2T,EAD2B+I,EAAkBnc,KAAI,CAACoJ,EAAG3J,IAAM2J,EAAI8S,EAAWzc,GAAKyc,EAAWzc,EAAI2c,KAEvEpc,KAAI,CAACoJ,EAAG3J,IAAMrF,KAAKyQ,OAAOzB,EAAIiT,EAAmB5c,GAAKqJ,EAAQrJ,IAAMqJ,EAAQrJ,MAGzG,OAFA2T,EAAYkJ,OAAO,EAAG,EAAG1I,GACzBR,EAAYkJ,OAAOrS,EAAgB,EAAI,EAAG,EAAG8J,GACtCX,CAAW,EAexB,MAAMmJ,GAAgD,IAAArQ,6BAA4B,CAAC/C,KAAM,CAAC,EAAG,EAAG,EAAG,KA8D7FqT,EAA4B,CAA2BhZ,EAAerE,KAC1E,MAAM2K,EAActG,EAAWsG,YAAYT,QAE3C,IAAK,IAAI5J,EAAI,EAAGA,EAAIN,EAAO,GAAGoB,KAAKrG,SAAUuF,EAChB,IAAvBqK,EAAYrK,EAAI,KAClBqK,EAAYrK,EAAI,GAAKN,EAAO,GAAGoB,KAAKd,IAGxC,MAAMuK,EAAOxG,EAAWwG,KAAKX,QAC7B,EAAAM,aAAa8S,yBACTtd,EAAO,GAAGoB,KAAMiD,EAAWsF,QAAStF,EAAWuG,UAAWD,EAAaE,EAA4B,SAAtBxG,EAAWkQ,OACxFlQ,EAAW0G,SAGf,MAAMwS,EAAmB9Q,OAAOC,OAAO,CAAC,EAAGrI,GAE3C,OADAoI,OAAOC,OAAO6Q,EAAe,CAAC5S,cAAaE,OAAM8B,SAAUtI,EAAWsI,WAC/D4Q,CAAa,EAGT,EAAA7M,oBAAuBrM,IAClC,MAAMmZ,GAAuB,IAAAC,mCAAkCpZ,GAEzDkQ,EAASlQ,EAAWkQ,OACpBxJ,EAAU,CAAC,SAAU,QAAS,aAAc,cAAc1G,EAAWqZ,UACrE9S,EAAYvG,EAAWuG,UACvByR,EAAQhY,EAAWgY,MACnB1R,EAActG,EAAWsZ,aACzB9S,EAAOxG,EAAWwG,KAClBlB,EAAUtF,EAAWsF,QACrBiU,EAAYvZ,EAAWwZ,aAE7B,OAAO,IAAA9Q,6BAA2B,eAC7BhC,UAASwJ,SAAQ3J,YAAWyR,QAAO1R,cAAaE,OAAMlB,UAASiU,YAAaJ,GAAsB,EA4G5F,EAAA/M,KAAO,CAACvM,EAAyBG,KAxMvB,EAACrE,EAA+BqE,KAGrD,IAAKrE,GAA6B,IAAlBA,EAAOjF,QAAkC,IAAlBiF,EAAOjF,OAC5C,MAAM,IAAI0B,MAAM,+BAIlB,GAA8B,IAA1BuD,EAAO,GAAGoB,KAAKrG,QAA0C,IAA1BiF,EAAO,GAAGoB,KAAKrG,OAChD,MAAM,IAAI0B,MAAM,yCAGlB,GAAIuD,EAAO,GAAGoB,KAAKrG,SAAWiF,EAAO,GAAGoB,KAAKrG,OAC3C,MAAM,IAAI0B,MAAM,gDAMlB,GAFoBuD,EAAO,GAAGoB,KAA2B,SAAtBiD,EAAWkQ,OAAoBvU,EAAO,GAAGoB,KAAKrG,OAAS,EAAI,KACtEiF,EAAO,GAAGoB,KAAK,GAAKiD,EAAWgY,MAErD,MAAM,IAAI5f,MAAM,qDAIlB,GAAsB,IAAlBuD,EAAOjF,SAA2C,IAA1BiF,EAAO,GAAGoB,KAAKrG,QAAgBiF,EAAO,GAAGoB,KAAK,KAAOpB,EAAO,GAAGoB,KAAK,IAC9F,MAAM,IAAI3E,MAAM,gBAGlB,MAAMwgB,EAAcjd,EAAO,GAAGoB,KAAKrG,OAAS,EAE5C,GAAIsJ,EAAWuG,UAAU7P,SAAWkiB,EAClC,MAAM,IAAIxgB,MAAM,uBAAuBwgB,MAIzC,GAAI5Y,EAAWsF,QAAQ5O,SAAWkiB,EAChC,MAAM,IAAIxgB,MAAM,qBAAqBwgB,MAIvC,GAAI5Y,EAAWwG,KAAK9P,SAAyB,EAAdkiB,EAC7B,MAAM,IAAIxgB,MAAM,kBAAgC,EAAdwgB,MAKpC,GAAsC,IAAlC5Y,EAAWsG,YAAY5P,QAAgBsJ,EAAWsG,YAAY5P,SAAWiF,EAAO,GAAGoB,KAAKrG,OAAS,EACnG,MAAM,IAAI0B,MAAM,wBAIlB,GAA2B,IAAvBuD,EAAO,GAAG+B,UAAsD,IAAvB/B,EAAO,GAAG+B,SACrD,MAAM,IAAItF,MAAM,0CAGlB,GAAsB,IAAlBuD,EAAOjF,QAAuC,IAAvBiF,EAAO,GAAG+B,SACnC,MAAM,IAAItF,MAAM,0C,EAiJlBqhB,CAAe5Z,EAAQlE,OAAQqE,GACO,IAAlCH,EAAQlE,OAAO,GAAGoB,KAAKrG,OA5Bd,EAACmJ,EAAyBG,KAEvC,MAAMyG,EAAsC,SAAtBzG,EAAWkQ,OAC3BvU,EAAS,CACbkE,EAAQlE,OAAO,GAAGkF,QACd4F,EAEI,CAAC5G,EAAQlE,OAAO,GAAGoB,KAAK,GAAI,EAAG8C,EAAQlE,OAAO,GAAGoB,KAAK,GAAI8C,EAAQlE,OAAO,GAAGoB,KAAK,IAEjF,CAAC8C,EAAQlE,OAAO,GAAGoB,KAAK,GAAI8C,EAAQlE,OAAO,GAAGoB,KAAK,GAAI,EAAG8C,EAAQlE,OAAO,GAAGoB,KAAK,KAEzF8C,EAAQlE,OAAO,GAAGkF,QAAQ,CAAChB,EAAQlE,OAAO,GAAGoB,KAAK,GAAI8C,EAAQlE,OAAO,GAAGoB,KAAK,GAAI,EAAG8C,EAAQlE,OAAO,GAAGoB,KAAK,MAE/E,IAA1B8C,EAAQlE,OAAOjF,QACjBiF,EAAOiC,KAAKiC,EAAQlE,OAAO,IAE7B,MAAM6K,EAAO,CAAC,EAAGxG,EAAWwG,KAAK,GAAI,EAAGxG,EAAWwG,KAAK,IAClDlB,EAAU,CAAC,GAAGoU,OAAO1Z,EAAWsF,SAChCiB,EAAY,CAAC,GAAGmT,OAAO1Z,EAAWuG,WAClCD,EAAc,CAAC,GAAGoT,OAAO1Z,EAAWsG,aACpCqT,EAAqBX,EAA0B,OAAD,wBAAKhZ,GAAU,CAAEwG,OAAMlB,UAASiB,YAAWD,gBAAc3K,GAC7GkE,EAAQ4B,SAAQ,IAAAiW,oCACZ/b,EAAQge,GACR/J,GAAenJ,EAAgB,CAACmJ,EAAY,GAAIA,EAAY,GAAIA,EAAY,IAAM,KAAI,EAMxFgK,CAAO/Z,EAASG,GA5GL,EAACH,EAAyBlE,EAA+BqE,K,MACtE,MAAM2Z,EAAqBX,EAA0BhZ,EAAYrE,GAI3D8T,EAA4B,IAAlB9T,EAAOjF,OAEjBuZ,EAAuC,SAAtBjQ,EAAWkQ,OAG5B2J,EAAcle,EAAO,GAAGoB,KAAKkT,EAAiB,EAAI,GAClD6J,EAAane,EAAO,GAAGoB,KAAKkT,EAAiB,EAAI,GACjD8J,EAAgBpe,EAAO,GAAGoB,KAAKkT,EAAiB,EAAI,GACpD+J,EAAere,EAAO,GAAGoB,KAAK,GAC9Bkd,EAActe,EAAO,GAAGoB,KAAK,GAE7B6S,GAAc,IAAAyI,sBAChB1c,EAAO,GAAGoB,KAAMpB,EAAO,GAAGoB,KAAMiD,EAAWuG,UAAWoT,EAAmBnT,KAAMxG,EAAWsF,QAC1F2K,GACEK,EAAYV,EAAYK,EAAiB,EAAI,GAC7CI,EAAWT,EAAYK,EAAiB,EAAI,GAC5CM,EAAcX,EAAYK,EAAiB,EAAI,GAIrD,GADIA,GAAkB+J,IAAiBH,GAAeI,IAAgBH,GAAqC,UAAvB9Z,EAAW0G,SAEzE,IAAjBsT,GAAsC,IAAhBC,GAAiD,IAA5Bja,EAAWuG,UAAU,IAAwC,IAA5BvG,EAAWuG,UAAU,IACvE,IAA1BvG,EAAWsF,QAAQ,IAAsC,IAA1BtF,EAAWsF,QAAQ,KAC1B,eAAvBtF,EAAW0G,SAAmD,eAAvB1G,EAAW0G,SAC3B,UAAvB1G,EAAW0G,SAGf,YADA7G,EAAQ4B,SAAQ,IAAAiW,oCAAmC/b,EAAQge,IAI7D,IAAK1J,GAAuC,IAArBjQ,EAAWgY,MAEhC,YADAnY,EAAQ4B,SAAQ,IAAAiW,oCAAmC/b,EAAQge,IAM7D,MAAM9J,EAAYI,EAAiBK,EAAYD,EAAWE,EACpDT,EAAYG,EAAiBM,EAAcD,EAAYD,EACvDN,EAAWiK,EAAeC,EAAcF,EAKxCG,EAAoE,QAAhD,EAAAra,EAAQmB,WAAWmZ,UAA6B,QACtEta,EAAQ4B,QAAQ,OAAD,wBAEN,EAAA2Y,0BAAwB,CAC3Bvd,UAAWkc,EAAyBzQ,SACpC/P,IAAK,KAAM,IAAA8hB,4BAA2B1e,EAAO,GAAIod,EAAyBpT,QAE5E,CAAChK,OAAQ,CAAC,GAAIwB,QAAS,CAAC6C,EAAWuZ,UAAY,GAAK,KAAK,GAC7DvZ,EAAWuZ,WAAa1Z,EAAQmB,WAAWmZ,KAC7Cta,EAAQmB,WAAWmZ,GAAKD,GAI1B,MAAMI,EAAa,CAAC3e,EAAO,GAAIue,GAC3BzK,IACGQ,GAA4C,IAA1BtU,EAAO,GAAGoB,KAAKrG,OAGpC4jB,EAAW1c,KAAKjC,EAAO,IAFvB2e,EAAW1c,KAAKjC,EAAO,GAAGkF,QAAQ,CAAClF,EAAO,GAAGoB,KAAK,GAAI,EAAG,MAO7D8C,EAAQ4B,SACJ,IAAA8Y,qCACID,EAAYX,EAAoB/J,EAAaC,EAAWC,EAAWC,EAAUN,GA5Bf,GA8BlE,CAAC9T,OAAQ2e,GAAY,EAkCvBE,CAAO3a,EAASA,EAAQlE,OAAQqE,E,6HCtPpC,gBAEA,UAWa,EAAAua,oCACT,CAAC5e,EAA+BqE,EAA4B4P,EAAgCC,EAC3FC,EAAmBC,EAAkBN,EAAkBO,KACtD,MAAML,EAV8B,EAACF,EAAkB5S,KAAuC,CAClGD,KAAM,eACNb,WAAY0T,EAAU,CAAC,EAAAhF,YAAYC,QAAS,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACvD,CAAC,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACxD7N,cAMqB4d,CAAkChL,EAASzP,EAAWsI,UACvE,OAAO,OAAP,wBACKqH,GAAQ,CACXpX,IAAK,KAAM,IAAAmX,+BACP/T,EAAQgU,EAAU3P,EAAY4P,EAAaC,EAAWC,EAAWC,EAAUN,EAC3EO,IAA0B,C,iJCtBtC,gBASa,EAAAmI,qBACRnY,IACC,OAAQA,EAAWoP,YACjB,IAAK,OACH,MAAO,CAAC6I,mBAAoB,GAAIC,gBAAiB,4BACnD,IAAK,UACH,MAAO,CAACD,mBAAoB,GAAIC,gBAAiB,wCACnD,IAAK,OACH,MAAO,CACLD,mBACI,uBAAuBjY,EAAW0a,gCAAiC1a,EAAW2a,YAClFzC,gBAAiB,+CAGrB,QACE,MAAO,CAACD,mBAAoB,GAAIC,gBAAiB,I,EAI9C,EAAAkB,kCACRpZ,IACC,MAAMoP,GAAapP,aAAU,EAAVA,EAAYoP,aAAwB,GAEvD,GAAmB,SAAfA,EAAuB,CACzB,MAAOsL,EAASC,IAAW3a,aAAU,EAAVA,EAAY4a,oBAAyC,CAAC,EAAA3S,SAAU,EAAAC,UAC3F,MAAO,CAACkH,aAAYuL,UAASD,UAASG,mBAAoB,GAAGzL,KAAcsL,KAAWC,I,CAExF,MAAO,CAACvL,aAAYyL,mBAAoBzL,EAAW,C,mHClCzD,gBACA,SACA,UAmIa,EAAAvC,KAAO,CAAChN,EAAyBG,KA/HvB,CAACrE,IACtB,IAAKA,EACH,MAAM,IAAIvD,MAAM,oBAElB,GAAIuD,EAAOjF,OAAS,GAAKiF,EAAOjF,OAAS,EACvC,MAAM,IAAI0B,MAAM,wBAIlB,GAAsB,IAAlBuD,EAAOjF,QAAgBiF,EAAO,GAAGoB,KAAKrG,OAAS,EACjD,MAAM,IAAI0B,MAAM,4BAGlB,GAA4B,IAAvBuD,EAAO,GAAG+B,UAAwD,IAAvB/B,EAAO,GAAG+B,UACnC,IAAlB/B,EAAOjF,QAAuC,IAAvBiF,EAAO,GAAG+B,SACpC,MAAM,IAAItF,MAAM,uBAGlB,GAAKuD,EAAO,GAAG+B,WAAa/B,EAAO,GAAG+B,UACf,IAAlB/B,EAAOjF,QAAgBiF,EAAO,GAAG+B,WAAa/B,EAAO,GAAG+B,SAC3D,MAAM,IAAItF,MAAM,6B,EA4GlBqhB,CAAe5Z,EAAQlE,QACvBkE,EAAQ4B,QAb0B,EAAC9F,EAA+BqE,KAClE,MAAM2P,EAAW,CACf/S,KAAM,OACNb,WAA8B,IAAlBJ,EAAOjF,OAAe,CAAC,EAAA+T,YAAYC,QAAS,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACvD,CAAC,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACpE7N,UAAWmD,EAAWsI,UAGxB,OAAO,OAAP,wBAAWqH,GAAQ,CAAEpX,IAAK,IAzExB,EAACoX,EAA2BhU,EAA+BqE,KACzD,MAAM8a,EAASnf,EAAO,GAAGoB,KAAK8I,QACxBkV,EAASpf,EAAO,GAAGoB,KAAK8I,SACvB+B,EAAGE,EAAGD,GAAK,EAAAmT,SAASC,qBACvBH,EAAQ9a,EAAWkb,OAAQH,EAAQ/a,EAAWmb,OAA0B,IAAlBxf,EAAOjF,OAAeiF,EAAO,GAAGoB,UAAOkD,GAC3F2P,EAAc,CAAChI,EAAGE,GACxB,IAAK8H,EACH,MAAM,IAAIxX,MAAM,uCAElB,MAAMoc,EAAa,EAAAjU,UAAUxB,KAAK6Q,GAClC,IAAIwL,EAAO,GACPpb,EAAWkb,QAAUlb,EAAWmb,OAClCC,EAAO,wCACEpb,EAAWkb,SAAWlb,EAAWmb,OAC1CC,EAAO,yCACGpb,EAAWkb,QAAUlb,EAAWmb,OAC1CC,EAAO,wCACGpb,EAAWkb,QAAWlb,EAAWmb,SAC3CC,EAAO,yCAGT,MAAM1d,EAAW,MACX2d,EAAsC,IAArBrb,EAAWsb,MAAc,GAAK,kBAC/CC,EAA+B,IAAlB5f,EAAOjF,OAAe,qBA3C/B,EAAC8kB,EAAWC,EAAW1e,KACrC,GAAoB,IAAhBA,EAAKrG,OACP,MAAO,KAGT,MAAMglB,EAA8B,IAAhB3e,EAAKrG,QAAsB,IAAN8kB,GAA6B,IAAhBze,EAAKrG,QAAgBqG,EAAK,KAAOye,EACjFG,EAAa5e,EAAKA,EAAKrG,OAAS,KAAO+kB,EAE7C,IAAIrZ,EAAS,KAQb,OAPKsZ,IACHtZ,GAAU,SAASrF,EAAKA,EAAKrG,OAAS,OAEnCilB,IACHvZ,GAAU,MAGLA,CAAM,EA2BqDwZ,CAAQhU,EAAGE,EAAGnM,EAAO,GAAGoB,UAAY,GAC5Fqb,EAAkC,CACtC,sDAAsD1a,MACtD,sDAAsDA,OA+BxD,OA7BsB,IAAlB/B,EAAOjF,QACT0hB,EAAgCxa,KAAK,sDAAsDF,OA4BtF,OAAP,wBACKiS,GAAQ,CACXxS,QAAS,CAAC,CAACJ,KAAM6S,EAAalS,SAAU/B,EAAO,GAAG+B,SAAU8T,YAAa,EAAA/G,YAAYC,UACrFiH,gBA7BuBmD,GAA+B,sBAC3ClN,yBACAE,yBACAD,wBACDnK,KAAYsC,EAAWsb,2BACxB5d,KAAYsC,EAAW6b,eAEpCzD,EAAgC1b,KAAK,+BAClBf,EAAOjF,mDAAmDgH,YAE7EoX,EAAa2B,oBACX3B,EAAa4B,sCAAsClC,uFAKvC9W,sCACYmK,qBACtBuT,mBAGFC,UACAE,6CAQEvd,cAAe,KAAM,CAAEyH,EAAG7O,KAAKE,KAAK0d,EAAa,OAA0B,EAYjDsH,CAAsBnM,EAAUhU,EAAQqE,IAAW,EAKnE+b,CAA4Blc,EAAQlE,OAAQqE,GAAY,EAG7D,EAAA8M,oBAAuB9M,IAChC,IAAA0I,6BAA4B1I,E,+HC3IhC,gBACA,UAGA,UAiEa,EAAAgc,8BACT,CAACrgB,EAA+Bwd,KAC9B,MAAMxJ,GAhEyBF,EAgEc9T,EAAOjF,OAAS,EAhEZmG,EAgEesc,EAAqB0B,mBAhEd,CAC3Eje,KAAM,SACNb,WAAY0T,EAAU,CAAC,EAAAhF,YAAYC,QAAS,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACvD,CAAC,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACxD7N,cAJkC,IAAC4S,EAAkB5S,EAiEjD,OAAO,OAAP,wBAAW8S,GAAQ,CAAEpX,IAAK,IAzD5B,EAACoX,EAA2BhU,EAA+Bwd,KAErD,MAAM2B,EAASnf,EAAO,GAAGoB,KACnBge,EAASpf,EAAO,GAAGoB,KACnB6S,EAAc,EAAA5L,cAAc2Q,UAAUmG,EAAQC,GAAQ,GAC5D,IAAKnL,EACH,MAAM,IAAIxX,MAAM,yCAElB,MAAMoc,EAAa,EAAAjU,UAAUxB,KAAK6Q,GAG5BlS,EAAW,OACX,mBAACua,EAAkB,gBAAEC,IAAmB,IAAAC,sBAAqBgB,GAE7DvR,EAAIgI,EAAYA,EAAYlZ,OAAS,GACrCmR,EAAIiT,EAAOA,EAAOpkB,OAAS,GAC3BoR,EAAI8H,EAAYA,EAAYlZ,OAAS,GA8B3C,OAAO,OAAP,wBACKiZ,GAAQ,CACXxS,QAAS,CAAC,CAACJ,KAAM6S,EAAalS,SAAU/B,EAAO,GAAG+B,SAAU8T,YAAa,EAAA/G,YAAYC,UACrFiH,gBAhCuBmD,GAA+B,sBAC/ClN,yBACAE,yBACAD,+DAEoCnK,6DACAA,wEACWA,YAE9Dua,UAEAnD,EAAa2B,oBACX3B,EAAa4B,sCAAsClC,kOAUvC9W,sCACYmK,2FAGxBqQ,0CAOMla,cAAe,KAAM,CAAEyH,EAAG7O,KAAKE,KAAK0d,EAAa,OAA0B,EAOjDyH,CAAwBtM,EAAUhU,EAAQwd,IAAqB,EAiBxF,EAAA/L,OAAUvN,IAdA,CAAClE,IACtB,IAAKA,GAA4B,IAAlBA,EAAOjF,OACpB,MAAM,IAAI0B,MAAM,6BAGlB,GAAIuD,EAAO,GAAGoB,KAAKpB,EAAO,GAAGoB,KAAKrG,OAAS,KAAOiF,EAAO,GAAGoB,KAAKpB,EAAO,GAAGoB,KAAKrG,OAAS,GACvF,MAAM,IAAI0B,MAAM,oCAGlB,GAA2B,IAAvBuD,EAAO,GAAG+B,UAAsD,IAAvB/B,EAAO,GAAG+B,SACrD,MAAM,IAAItF,MAAM,8B,EAKlBqhB,CAAe5Z,EAAQlE,QAEvBkE,EAAQ4B,SAAQ,IAAAua,+BAA8Bnc,EAAQlE,OAAQ,CAACyT,WAAY,GAAIyL,mBAAoB,KAAK,C,0QC5F1G,gBACA,SACA,UAEA,UAQMpB,EAAkB9d,IACtB,IAAKA,GAA4B,IAAlBA,EAAOjF,OACpB,MAAM,IAAI0B,MAAM,8BAElB,GAA8B,IAA1BuD,EAAO,GAAGoB,KAAKrG,OACjB,MAAM,IAAI0B,MAAM,8CAElB,GAA2B,IAAvBuD,EAAO,GAAG+B,SACZ,MAAM,IAAItF,MAAM,sB,EAId8jB,EAA0C,CAC5CvgB,EAA+BqE,EAA2BoG,KAC5D,MAAM6J,EAAuC,SAAtBjQ,EAAWkQ,OAC5BiM,EAA2BlM,EAC7B,CAACtU,EAAO,GAAGoB,KAAK,GAAIpB,EAAO,GAAGoB,KAAK,GAAIpB,EAAO,GAAGoB,KAAK,GAAIpB,EAAO,GAAGoB,KAAK,IACzEpB,EAAO,GAAGoB,KAAK8I,QACbuW,EAAehU,OAAOiU,eAAeC,KAAKtc,EAAY,aACtDsG,EAActG,EAAWsG,YAAYT,QACrCP,EAAUtF,EAAWsF,QAAQO,QAC7BU,EAAsB6V,EAAgBpc,EAAiCuG,UAAUV,QAAU,GAC3FW,EAAOxG,EAAWwG,KAAKX,QAC7B,EAAAM,aAAaoW,qBAAqBnW,EAAkB+V,EAA0B7V,EAAahB,EAASiB,EAAWC,GAE/G,MAAMgW,EAA4B,EAAArW,aAAasW,uBAC3CrW,EAAkB+V,EAA0B7W,EAASiB,EAAWD,EAAaE,EAAMxG,EAAW0G,SAE5FwS,EAAgB9Q,OAAOC,OAAO,CAAC,EAAGrI,GAMxC,OALIoc,EACFhU,OAAOC,OAAO6Q,EAAe,CAAC5S,cAAahB,UAASkB,OAAMD,YAAW+B,SAAUtI,EAAWsI,WAE1FF,OAAOC,OAAO6Q,EAAe,CAAC5S,cAAahB,UAASkB,OAAM8B,SAAUtI,EAAWsI,WAE1E,CACL4Q,EACAjJ,EACI,CACEuM,EAA0B,GAAIA,EAA0B,GAAIA,EAA0B,GACtFA,EAA0B,IAE5BA,EACL,EAGGE,EAAsB,CACxB5H,EAA4BzO,EAA8BuJ,EAAgC5P,EAC1F2c,EAAaC,EAAalf,EAAkB0H,KAC9C,MAAM6K,EAAuC,SAAtBjQ,EAAWkQ,OAC5B7K,EAAOgB,EAAU3P,OACjB8d,EAAa,EAAAjU,UAAUxB,KAAK6Q,GAC5BgG,GAAsB,IAAAC,qBAAoB,SAAUjG,GACpD0I,GAAiB,IAAAzC,qBAAoB,IAAKxP,GAEhD,GAAIrG,EAAWsG,YAAY5P,QAAU,EAAG,CACtC,MAAMmmB,EAAK7c,EAAWsG,YAAYtG,EAAWsG,YAAY5P,OAAS,GAC5DomB,EAAK9c,EAAWsF,QAAQtF,EAAWsF,QAAQ5O,OAAS,GACpDqmB,EAAU/c,EAAWwG,KAAKxG,EAAWwG,KAAK9P,OAAS,EAAI,GAEvDsmB,EAAU3X,GAAQ4K,EAAiB,EAAI,GAC7C,IAAIgN,EAAQ,GACRC,EAAQ,GACRC,EAAW,GAqBf,GAnBEF,EADEF,EALU/c,EAAWwG,KAAKxG,EAAWwG,KAAK9P,OAAS,KAK/B,EACd,6CAC4BmmB,wCACfG,gBAAsBA,QAAcF,OAAQC,wCACxCC,sBAA4BA,SAAe3W,EAAU2W,kHAIpD1E,EAAepB,cAAc,kCAC3CyF,qBAGJ,6CAC4BE,wCACfG,gBAAsBA,QAAcF,OAAQC,yCACvCzE,EAAepB,cAAc,kCAC3CyF,qBAIwB,IAAlC3c,EAAWsG,YAAY5P,OAAc,CACvC,MAAM0mB,EAAKpd,EAAWsG,YAAYtG,EAAWsG,YAAY5P,OAAS,GAC5D2mB,EAAKrd,EAAWsF,QAAQtF,EAAWsF,QAAQ5O,OAAS,GACpD4mB,EAAUtd,EAAWwG,KAAKxG,EAAWwG,KAAK9P,OAAS,EAAI,GACvD6mB,EAAQvd,EAAWwG,KAAKxG,EAAWwG,KAAK9P,OAAS,GACjD8mB,EAAUnY,GAAQ4K,EAAiB,EAAI,GACvCwN,EAAOpX,EAAUmX,GAErBN,EADEI,EAAUC,IAAU,EACd,+CAC4BH,0CACfI,gBAAsBA,QAAcH,OAAQC,0CACxCE,sBAA4BA,SAAeC,mCAChDZ,yEAKZ,+CAC4BO,0CACfI,gBAAsBA,QAAcH,OAAQC,2BAGnEH,EAAW,iC,CA6Bb,MAxBoB,oEACyCzf,kFACWA,sBAE9DkY,EAAoBK,wBACpBqC,EAAerB,0BAEfnC,EAAa2B,8BACX3B,EAAa4B,sCAAsClC,uBAEnDoB,EAAoBQ,2BAA2B,6BAC/CR,EAAoBS,QAAQ,aAAc,6BAC1CT,EAAoBQ,2BAA2B,8BAC/CR,EAAoBS,QAAQ,aAAc,2CAE/B3Y,OAAcA,KAAY0H,kDAErC8X,oBACAD,oBACAE,oBACAP,+D,CAKP,CACL,GAAI3M,EACF,MAAM,IAAI7X,MAAM,yEAElB,MAAMslB,EAAa,EAAAnd,UAAUxB,KAAKiB,EAAWsG,aACvCqX,EAAgB,EAAApd,UAAUsR,eAAe7R,EAAWsG,aACpDsX,EAAcD,EAAcjnB,OAC5BmnB,EAAW7d,EAAWwG,KAAK9P,OAEjC,IAAIonB,EAAU,GAgEd,OA9DEA,EAHc9d,EAAWwG,KAAKuX,QAAO,CAACC,EAAKC,IAAQD,EAAMC,IAG/C,6OAQgB3F,EAAepB,cAAc,kCAC3CyF,qBAGF,kDAEcrE,EAAepB,cAAc,gCAC3CyF,kBAGQ,oEACyCjf,kFACWA,sBAE9DkY,EAAoBK,wBACpBqC,EAAerB,kDAES4G,MAAa7d,EAAWwG,KAAKhK,KAAIP,GAAK,GAAGA,OAAMS,KAAK,oDAC/C2I,MAASgB,EAAU7J,KAAIP,GAAK,GAAGA,OAAMS,KAAK,wDACtCkhB,MAAgBD,EAAcnhB,KAAIP,GAAK,GAAGA,OAAMS,KAAK,kDAC3DkhB,MAAgB5d,EAAWsF,QAAQ9I,KAAIP,GAAK,GAAGA,OAAMS,KAAK,yBAErFoY,EAAa2B,8BACX3B,EAAa4B,sCAAsClC,uBAEnDoB,EAAoBQ,2BAA2B,6BAC/CR,EAAoBS,QAAQ,aAAc,6BAC1CT,EAAoBQ,2BAA2B,8BAC/CR,EAAoBS,QAAQ,aAAc,wDAElBuH,oCAEZlgB,KAAY0H,gHAIEsY,qFAEHE,EAAc,iLAI3BA,EAAc,gFAGTvY,EAAOuY,WAAqBvY,wEACAA,EAAOuY,0CAC9BvY,EAAOuY,0CACvBE,qCAEJlB,+D,GAoBVsB,EAA6Ble,IAA8D,CAC/FkQ,OAAQlQ,EAAWkQ,OACnBxJ,QAAS,CAAC,SAAU,QAAS,aAAc,cAAc1G,EAAWqZ,UACpE8E,SAAUne,EAAWoe,UACrB9X,YAAatG,EAAWsZ,aACxBhU,QAAStF,EAAWsF,QACpBkB,KAAMxG,EAAWwG,OAOb6X,EACF,CAAC1iB,EAA+BgU,EAA2BvJ,EAC1DpG,KACC,MAAO2Z,EAAoB/J,GACvBsM,EAAwCvgB,EAAQqE,EAAYoG,GAC1DsX,EAAa,EAAAnd,UAAUxB,KAAK4a,EAAmBrT,aAE/C5I,EAAW,MAGjB,IAAIkf,EAAM,GAMV,OALIjD,EAAmB2E,gBACrB1B,GAAO,YAAYlf,KAAYggB,MAE/Bd,GAAO,YAAYlf,KAAYggB,YAE1B,OAAP,wBACK/N,GAAQ,CACXxS,QAAS,CAAC,CAACJ,KAAM6S,EAAalS,SAAU/B,EAAO,GAAG+B,SAAU8T,YAAa,EAAA/G,YAAYC,UACrFiH,gBAAiBmD,GAAgB4H,EAC7B5H,EAAcnZ,EAAO,GAAGoB,KAAM6S,EAAa+J,EAXrC,kBAW8DiD,EAAKlf,EAAU,OACvFM,cAAe,KAAM,CAAEyH,EAAG7O,KAAKE,KAAK,EAAAyJ,UAAUxB,KAAK6Q,GAAe,OAA0B,EAIvF,EAAA3D,2BAA8BjM,IACzC,MAAMse,EAA+D,IAA5Cte,EAAWue,kBAE9BC,EAAON,EAA0Ble,GAEvC,GAAsB,IAAlBwe,EAAKL,SACP,MAAM,IAAI/lB,MAAM,0EAGlB,OAAO,IAAAsQ,6BAA2B,eAAE4V,mBAAoBE,GAAM,EAGnD,EAAAxS,YAAc,CAACnM,EAAyBG,KACnDyZ,EAAe5Z,EAAQlE,QACvB,MAAMgU,EAAW,CAAC/S,KAAM,cAAeb,WAAY,CAAC,EAAA0O,YAAYC,SAAU7N,UAAWmD,EAAWsI,UAChGzI,EAAQ4B,QAAQ,OAAD,wBAAKkO,GAAQ,CAAEpX,IAAK,IAAM8lB,EAA6Bxe,EAAQlE,OAAQgU,GAAU,EAAO3P,KAAa,EAGtH,MAAMye,EAAuB,CAC3B/X,QAAS,GACTyX,SAAU,EACVG,iBAAiB,EACjBhY,YAAa,GACbhB,QAAS,GACTkB,KAAM,GACNkY,aAAc,EACdnY,UAAW,GACX+B,SAAU,IAGC,EAAA0E,iCAAoChN,IAC/C,MAAMkQ,EAASlQ,EAAWkQ,OAC1B,OAAO,OAAP,sBAAQA,UAAWuO,GAAoB,CAAEnW,SAAU4H,GAAM,EAG9C,EAAAnD,kBAAoB,CAAClN,EAAyBG,KACzDyZ,EAAe5Z,EAAQlE,QACvB,MAAMgU,EAAW,CAAC/S,KAAM,oBAAqBb,WAAY,CAAC,EAAA0O,YAAYC,SAAU7N,UAAWmD,EAAWsI,UACtGzI,EAAQ4B,QAAQ,OAAD,wBAAKkO,GAAQ,CAAEpX,IAAK,IAAM8lB,EAA6Bxe,EAAQlE,OAAQgU,GAAU,EAAM3P,KAAa,EAQrH,MAAM2e,EACF,CAAChjB,EAA+BgU,EAA2BvJ,EAC1DpG,KACC,MAAO2Z,EAAoB/J,GACvBsM,EAAwCvgB,EAAQqE,EAAYoG,GAKhE,OAAO,OAAP,wBACKuJ,GAAQ,CACXxS,QAAS,CAAC,CAACJ,KAAM6S,EAAalS,SAAU/B,EAAO,GAAG+B,SAAU8T,YAAa,EAAA/G,YAAYC,UACrFiH,gBAAiBmD,GACb4H,EAAoB5H,EAAcnZ,EAAO,GAAGoB,KAAM6S,EAAa+J,EARzD,2CAGA,GAKuF,MAAO,QACxG3b,cAAe,KAAM,CAAEyH,EAAG7O,KAAKE,KAAK,EAAAyJ,UAAUxB,KAAK6Q,GAAe,OAA0B,EAIvF,EAAAvC,QAAU,CAACxN,EAAyBG,KAC/CyZ,EAAe5Z,EAAQlE,QACvB,MAAMgU,EAAW,CAAC/S,KAAM,UAAWb,WAAY,CAAC,EAAA0O,YAAYC,SAAU7N,UAAWmD,EAAWsI,UAC5FzI,EAAQ4B,QAAQ,OAAD,wBAAKkO,GAAQ,CAAEpX,IAAK,IAAMomB,EAAyB9e,EAAQlE,OAAQgU,GAAU,EAAO3P,KAAa,EAGrG,EAAAsN,uBAA0BtN,IACrC,MAAM0e,EAAe1e,EAAW4e,cAC1BrY,EAAYvG,EAAWuG,UAEvBiY,EAAON,EAA0Ble,GAEvC,GAAqB,IAAjB0e,EACF,MAAM,IAAItmB,MAAM,+DAElB,GAAsB,IAAlBomB,EAAKL,SACP,MAAM,IAAI/lB,MAAM,sEAGlB,OAAO,IAAAsQ,6BAA2B,eAAEgW,eAAcnY,aAAciY,GAAM,EAG3D,EAAAtR,6BAAgClN,IAC3C,MAAMkQ,EAASlQ,EAAWkQ,OAC1B,OAAO,OAAP,sBAAQA,UAAWuO,GAAoB,CAAEnW,SAAU4H,GAAM,EAG9C,EAAAjD,cAAgB,CAACpN,EAAyBG,KACrDyZ,EAAe5Z,EAAQlE,QACvB,MAAMgU,EAAW,CAAC/S,KAAM,gBAAiBb,WAAY,CAAC,EAAA0O,YAAYC,SAAU7N,UAAWmD,EAAWsI,UAClGzI,EAAQ4B,QAAQ,OAAD,wBAAKkO,GAAQ,CAAEpX,IAAK,IAAMomB,EAAyB9e,EAAQlE,OAAQgU,GAAU,EAAM3P,KAAa,C,qPChXjH,gBACA,SACA,UAEA,UAEMyZ,EAAkB9d,IACtB,IAAKA,GAA4B,IAAlBA,EAAOjF,QAAgBiF,EAAOjF,OAAS,EACpD,MAAM,IAAI0B,MAAM,qCAGlB,GAAsB,IAAlBuD,EAAOjF,QAA0C,IAA1BiF,EAAO,GAAGoB,KAAKrG,OACxC,MAAM,IAAI0B,MAAM,4BAGlB,GAA2B,IAAvBuD,EAAO,GAAG+B,SACZ,MAAM,IAAItF,MAAM,sB,EAWdymB,EAAiB,IAAgB,CAAC,GAAI,GAAI,wBAAyB,IAsFnEC,EACF,CAACnjB,EAA+BiB,EAAcoD,EAA8B+e,KAEtE,MAAMC,EACgB,IAAlBrjB,EAAOjF,OAAesJ,EAbhC,EAACrE,EAA+BqE,KAC9B,MAAMwF,EAAiB,GAIvB,OAHI7J,EAAO,GAAGoB,KAAK,GAAK,GACtBpB,EAAO,GAAGgF,mBAAmBse,SAAQrZ,GAAKJ,EAAK5H,KAAKvH,OAAOuP,OAEtD,IAAA8C,6BACH,CAAClD,OAAM0Z,SAAUlf,EAAWkf,SAAUC,kBAAmBnf,EAAWmf,mBAAmB,EAOhDC,CAAiCzjB,EAAQqE,GAC1E2P,EACgB,CAAC/S,OAAMb,WAAY,CAAC,EAAA0O,YAAYC,SAAU7N,UAAWmiB,EAAkB1W,UAC7F,OAAO,OAAP,wBACKqH,GAAQ,CACXpX,IAAK,IA7Fb,EAACoX,EAA2BhU,EAA+BqE,EAC1D+e,KACC,MAAMnP,EAAwB,GACxB6I,EAAa9c,EAAO,GAAGoB,KAEvBsiB,EAAoB,GAEpB7Z,EAAO,EAAAjF,UAAU+e,cAActf,EAAWwF,KAAM7J,EAAO,GAAGoB,KAAKrG,QAC/D6oB,EAAmB5jB,EAAO,GAAGoB,KAAKrG,QAAUsJ,EAAWkf,SAAW,EAAI1Z,EAAK9O,QAC3E8oB,EAAMT,EAASpjB,EAAQ6J,GACvBia,GAAqB,IAAA5J,qBAAoB,QAAS4C,GAClDiH,EAA2B,KAAXF,EAAI,GAAa,GAAK,kBAAkBC,EAAmBvI,cAAc,mBAC/F,IAAIyI,EAAY,8BACKF,EAAmBvI,cAAc,+BAChDsI,EAAI,MACV,MAAMI,GAAmB5f,EAAWmf,mBAAgD,IAA3Bnf,EAAWwF,KAAK9O,OACzE,IAAK,IAAImpB,EAAI,EAAGA,EAAIlkB,EAAO,GAAGoB,KAAKrG,OAAQmpB,IAErCD,GAAmBpa,EAAKsa,QAAQD,IAAM,GACpC7f,EAAWkf,UACbtP,EAAYhS,KAAK,GAInB+hB,EAAY,YAAYE,gBAAgBA,OAAOlkB,EAAO,GAAGoB,KAAK8iB,QAAQA,oDACrCA,SAASA,mCACtBF,mCAGhBJ,EAAmB,EACrBF,EAAQzhB,KAAK,gBAAgBiiB,sBAAsBjQ,EAAYlZ,YAE/D2oB,EAAQzhB,KAAK,gBAAgBiiB,uBAE/BjQ,EAAYhS,KAAKjC,EAAO,GAAGoB,KAAK8iB,KAIpC,MAAMjK,GAAsB,IAAAC,qBAAoB,SAAUjG,GACpD4E,EAAa,EAAAjU,UAAUxB,KAAK6Q,GAC5BlS,EAAW,MA0BjB,OAAO,OAAP,wBACKiS,GAAQ,CACXgC,gBA1BuBmD,GAA+B,mEACEpX,gFACUA,oBAE9DkY,EAAoBK,sBACpBwJ,EAAmBxI,wBAEnBnC,EAAa2B,0BACb3B,EAAa4B,sCAAsClC,iBACnDiL,EAAmBrJ,2BAA2B,8BAC9CR,EAAoBQ,2BAA2B,+BAC/CR,EAAoBS,QAAQ,aAAc,6CAE9B3Y,sBAEZ2hB,EAAQ3iB,KAAK,oBACb8iB,EAAI,sDACJE,gBACAF,EAAI,iBACJG,gBACAH,EAAI,kGAORriB,QAAS,CAAC,CAACJ,KAAM6S,EAAalS,SAAU/B,EAAO,GAAG+B,SAAU8T,YAAa,EAAA/G,YAAYC,UACrF1M,cAAe,KAAM,CAAEyH,EAAG7O,KAAKE,KAAK0d,EAAa,OAA0B,EAuB5DuL,CACPpQ,EAAU,CAAChU,EAAO,IAAKqjB,EACvBA,EAAkBG,mBAAuD,IAAlCH,EAAkBxZ,KAAK9O,OAAemoB,EAAOE,IAAS,EAIhG,EAAA5Q,aAAe,CAACtO,EAAyBG,KACpDyZ,EAAe5Z,EAAQlE,QAEvBkE,EAAQ4B,QAAQqd,EAA8Bjf,EAAQlE,OAAQ,eAAgBqE,GADnD,IAAgB,CAAC,eAAgB,GAAI,yBAA0B,yBACW,CAACrE,OAAQ,CAAC,IAAI,EAGxG,EAAAsS,SAAW,CAACpO,EAAyBG,KAChDyZ,EAAe5Z,EAAQlE,QAEvBkE,EAAQ4B,QAAQqd,EAA8Bjf,EAAQlE,OAAQ,WAAYqE,GAD/C,IAAgB,CAAC,eAAgB,GAAI,8BAA+B,MACE,CAACrE,OAAQ,CAAC,IAAI,EAGpG,EAAAuS,SAAW,CAACrO,EAAyBG,KAChDyZ,EAAe5Z,EAAQlE,QAGvBkE,EAAQ4B,QAAQqd,EAA8Bjf,EAAQlE,OAAQ,WAAYqE,GAF/C,IACX,CAAC,+BAAgC,GAAI,sCAAuC,0BACK,CAACrE,OAAQ,CAAC,IAAI,EAGpG,EAAAyS,gBAAkB,CAACvO,EAAyBG,KACvDyZ,EAAe5Z,EAAQlE,QAEvBkE,EAAQ4B,QACJqd,EAA8Bjf,EAAQlE,OAAQ,kBAAmBqE,GAF1C,IAAgB,CAAC,eAAgB,GAAI,8BAA+B,yBAEH,CAACrE,OAAQ,CAAC,IAAI,EAG/F,EAAAmS,UAAY,CAACjO,EAAyBG,KACjDyZ,EAAe5Z,EAAQlE,QAWvBkE,EAAQ4B,QAAQqd,EAA8Bjf,EAAQlE,OAAQ,YAAaqE,GAVhD,CAACrE,EAAsB6J,KAChD,MAAMwa,EAAU,GAChB,IAAK,IAAIH,EAAI,EAAGA,EAAIlkB,EAAO,GAAGoB,KAAKrG,OAAQmpB,KACrCra,EAAKsa,QAAQD,IAAM,GAAqB,IAAhBra,EAAK9O,SAC/BspB,EAAQpiB,KAAK,gBAAgBiiB,WAIjC,MAAO,CAAC,GAAGG,EAAQtjB,KAAK,QAAS,wBAAyB,oCAAqC,GAAG,IAEF,CAACf,OAAQ,CAAC,IAAI,EAGrG,EAAAkS,WAAa,CAAChO,EAAyBG,KAClDyZ,EAAe5Z,EAAQlE,QAWvBkE,EAAQ4B,QAAQqd,EAA8Bjf,EAAQlE,OAAQ,aAAcqE,GAVjD,CAACrE,EAAsB6J,KAChD,IAAIzG,EAAO,EACX,IAAK,IAAI8gB,EAAI,EAAGA,EAAIlkB,EAAO,GAAGoB,KAAKrG,OAAQmpB,KACrCra,EAAKsa,QAAQD,IAAM,GAAqB,IAAhBra,EAAK9O,UAC/BqI,GAAQpD,EAAO,GAAGoB,KAAK8iB,IAI3B,MAAO,CAAC,eAAgB,GAAI,yBAA0B,mBAAmB9gB,MAAS,IAEe,CAACpD,OAAQ,CAAC,IAAI,EAGtG,EAAAgS,UAAY,CAAC9N,EAAyBG,KACjDyZ,EAAe5Z,EAAQlE,QAWvBkE,EAAQ4B,QAAQqd,EAA8Bjf,EAAQlE,OAAQ,YAAaqE,GAVhD,CAACrE,EAAsB6J,KAChD,MAAMwa,EAAU,GAChB,IAAK,IAAIH,EAAI,EAAGA,EAAIlkB,EAAO,GAAGoB,KAAKrG,OAAQmpB,KACrCra,EAAKsa,QAAQD,IAAM,GAAqB,IAAhBra,EAAK9O,SAC/BspB,EAAQpiB,KAAK,gBAAgBiiB,WAIjC,MAAO,CAAC,GAAGG,EAAQtjB,KAAK,QAAS,wBAAyB,oCAAqC,GAAG,IAEF,CAACf,OAAQ,CAAC,IAAI,EAGrG,EAAAqS,WAAa,CAACnO,EAAyBG,KAClDyZ,EAAe5Z,EAAQlE,QAEvBkE,EAAQ4B,QAAQqd,EAA8Bjf,EAAQlE,OAAQ,aAAcqE,GADjD,IAAgB,CAAC,eAAgB,GAAI,yBAA0B,MACS,CAACrE,OAAQ,CAAC,IAAI,EAGtG,EAAAoS,UAAY,CAAClO,EAAyBG,KACjDyZ,EAAe5Z,EAAQlE,QAEvBkE,EAAQ4B,QAAQqd,EAA8Bjf,EAAQlE,OAAQ,YAAaqE,GADhD,IAAgB,CAAC,eAAgB,GAAI,yBAA0B,MACQ,CAACrE,OAAQ,CAAC,IAAI,EAGrG,EAAA0S,gBAAkB,CAACxO,EAAyBG,KACvDyZ,EAAe5Z,EAAQlE,QAGvBkE,EAAQ4B,QACJqd,EAA8Bjf,EAAQlE,OAAQ,kBAAmBqE,GAFjE,IAAgB,CAAC,+BAAgC,GAAI,oCAAqC,MAEF,CAACrE,OAAQ,CAAC,IAAI,EAG/F,EAAAiS,sBAAyB5N,IAClC,IAAA0I,6BAA4B1I,E,qLC5NhC,gBACA,SACA,UAEA,UAMa,EAAAoa,yBAA2B,CACtCxd,KAAM,YACNb,WAAY,CAAC,EAAA0O,YAAYC,UAG3B,MAUMuV,EAAkB,CAACxH,EAA+B9S,IACnDA,GAAQA,EAAKjP,SAAW+hB,EAAW/hB,OAAU,IAAK+hB,EAAWyH,QAASpa,UAAYH,EAe1E,EAAA0U,2BAA6B,CAAC8F,EAAmBC,KAC5D,MACM3H,EAAa0H,EAAMpjB,KACnB4I,EAAOsa,EAAgBxH,EAAY2H,GACnCxQ,EAjBe,EAAC6I,EAA+B9S,IACnD,EAAApF,UAAU8f,gBAAgB5H,EAAYwH,EAAgBxH,EAAY9S,IAgBhD2a,CAAe7H,EAAY9S,GACzCN,EAAOoT,EAAW/hB,OAClB8d,EAAa,EAAAjU,UAAUxB,KAAK6Q,GAK5BgG,GAAsB,IAAAC,qBAAoB,SAAUjG,GACpD6P,GAAqB,IAAA5J,qBAAoB,IAAK4C,GAoBpD,OAAO,OAAP,wBACK,EAAA2B,0BAAwB,CAC3Bjd,QAAS,CAAC,CAACJ,KAAM6S,EAAalS,SAAUyiB,EAAMziB,SAAU8T,YAAa,EAAA/G,YAAYC,UACjFiH,gBArBuBmD,GAA+B,4IAxBjC,EAACnP,EAAgBN,KACxC,MAAMkb,EAAc,GACpBA,EAAY3iB,KAAK,uCAAuCyH,oCAAuCA,UAC/F,IAAK,IAAIpJ,EAAI,EAAGA,EAAIoJ,IAAQpJ,EAC1BskB,EAAY3iB,KAAK,UAAU+H,EAAK1J,YAAYA,OAG9C,OADAskB,EAAY3iB,KAAK,OACV2iB,EAAY7jB,KAAK,KAAK,EAqB3B8jB,CAAiB7a,EAAMN,SACvBuQ,EAAoBK,cACpBwJ,EAAmBxI,gBAEnBnC,EAAa2B,oBACX3B,EAAa4B,sCAAsClC,aAEnDoB,EAAoBQ,2BAA2B,mBAC/CR,EAAoBS,QAAQ,aAAc,mBAC1CoJ,EAAmBrJ,2BAA2B,6EAGvBqJ,EAAmBvI,cAAc,qBAM1DlZ,cAAe,KAAM,CAAEyH,EAAG7O,KAAKE,KAAK0d,EAAa,OAA0B,EAIlE,EAAAzF,UAAY,CAAClP,EAAyBG,KAlE5B,CAACrE,IACtB,IAAKA,GAA4B,IAAlBA,EAAOjF,OACpB,MAAM,IAAI0B,MAAM,+BAGlB,GAA2B,IAAvBuD,EAAO,GAAG+B,SACZ,MAAM,IAAItF,MAAM,+B,EA6DlBqhB,CAAe5Z,EAAQlE,QACvBkE,EAAQ4B,QAAQ,OAAD,wBACV,EAAA2Y,0BAAwB,CAC3Bvd,UAAWmD,EAAWsI,SACtB/P,IAAK,KAAM,IAAA8hB,4BAA2Bxa,EAAQlE,OAAO,GAAIqE,EAAW2F,QACpE,EAGS,EAAAqJ,yBAA4BhP,IACrC,IAAA0I,6BAA4B,CAAC/C,KAAM3F,EAAW2F,M,kUC5FlD,gBACA,SACA,UA4CM8a,EACF,CAACN,EAAmBvjB,EAAcuX,EAAmCC,EACpE9L,KACC,MAAMqH,EAA4B,CAAC/S,OAAMb,WAAY,CAAC,EAAA0O,YAAYC,SAAU7N,UAAWyL,GACvF,OAAO,OAAP,wBACKqH,GAAQ,CACXpX,IAAK,IAhBT,EAACoX,EAA2BwQ,EAAmBhM,EAC9CC,IAAoD,OAAD,wBAC/CzE,GAAQ,CACXgC,gBAAiBmD,GA5BnB,EAACA,EAA4B4L,EAAkBvM,EAC9CC,KACC,MAAMkB,EAAU1e,KAAKE,KAAK4pB,EAAW,GAErC,IAAIC,EAAa,GAMjB,OAJEA,EADsB,iBAAbxM,EACI,GAAGA,OAEHA,EAAS,KAEjB,oKAITC,QAAAA,EAA4B,WAE5BU,EAAa2B,oBACX3B,EAAa4B,sCAAsCpB,0EAG1BqL,SAC3B,EAQMC,CAA+B9L,EAAc,EAAAvU,UAAUxB,KAAKohB,EAAMpjB,MAAOoX,EAAUC,GACvFjX,QAAS,CAAC,CAACJ,KAAMojB,EAAMpjB,KAAMW,SAAUyiB,EAAMziB,SAAU8T,YAAa,EAAA/G,YAAYC,UAChF1M,cAAgB6iB,IACZ,CAAEpb,EAAG7O,KAAKE,KAAK,EAAAyJ,UAAUxB,KAAK8hB,EAAa,GAAG9jB,MAAQ,GAA0B,OASvE+jB,CAA6BnR,EAAUwQ,EAAOhM,EAAUC,IAAyB,EAIvF,EAAA9I,IAAOzL,IAClBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,MAAO,OAAO,EAGzE,EAAA4P,KAAQ1L,IACnBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,OAAQ,QAAQ,EAG3E,EAAA6P,MAAS3L,IACpBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,QAAS,SAAS,EAG7E,EAAAgQ,KAAQ9L,IACnBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,OAAQ,QAAQ,EAG3E,EAAAiQ,MAAS/L,IACpBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,QAAS,SAAS,EAG7E,EAAAkQ,KAAQhM,IACnBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,OAAQ,QAAQ,EAE3E,EAAAmQ,MAASjM,IACpBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,QAAS,SAAS,EAQ7E,EAAAuQ,QAAU,CAACrM,EAAyBG,KAC/CH,EAAQ4B,QACJgf,EACI5gB,EAAQlE,OAAO,GAAI,QAAQmI,GAAK,SAASA,4BAA4B,+CACnC9D,EAAWnJ,qDACXmJ,EAAWuE,WAE7CvE,EAAWsI,UACf,CAAC3M,OAAQ,CAAC,IAAI,EAQP,EAAAwQ,KAAQtM,IACnB,MAAMG,EAPiC,CAACrE,IACxC,MAAM9E,EAAO8E,EAAOjF,QAAU,EAAKiF,EAAO,GAAG0E,kBAAkB,GAAK,EAAA4H,SAC9D1D,EAAO5I,EAAOjF,QAAU,EAAKiF,EAAO,GAAG0E,kBAAkB,GAAK,EAAA6H,SACpE,OAAO,IAAAQ,6BAA4B,CAAC7R,MAAK0N,OAAK,EAI3Bwc,CAAiClhB,EAAQlE,SAC5D,IAAAuQ,SAAQrM,EAASG,EAAW,EAGjB,EAAAlJ,KAAQ+I,IACnBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,OAAQ,QAAQ,EAG3E,EAAA2Q,IAAOzM,IAClBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,MAAO,OAAO,EAGzE,EAAA4Q,KAAQ1M,IACnBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,OAAQ,QAAQ,EAO3E,EAAA+Q,qBAAwB1M,IACjC,IAAA0I,6BAA4B1I,GAEnB,EAAAyM,IAAM,CAAC5M,EAAyBG,KAC3CH,EAAQ4B,QAAQgf,EACZ5gB,EAAQlE,OAAO,GAAI,OAAOmI,GAAK,YAAYA,MAAM,mCACvB9D,EAAWsb,uOASrCtb,EAAWsI,UAAU,EAGd,EAAAqE,IAAO9M,IAClBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,OAAOmI,GAAK,YAAYA,MAAM,2ZAYhG,EAGO,EAAA8I,IAAO/M,IAClBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,MAAO,OAAO,EAGzE,EAAA0L,MAASxH,IACpBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,QAAS,SAAS,EAG7E,EAAAwR,UAAY,CAACtN,EAAyBG,KACjDH,EAAQ4B,QAAQgf,EACZ5gB,EAAQlE,OAAO,GAAI,aAAamI,GAAK,8BAA8BA,MAAMA,MAAMA,wBAC/E,sCAAsC9D,EAAWsb,UAAWtb,EAAWsI,UAAU,EAG1E,EAAAkF,IAAO3N,IAClBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,OAAOmI,GAAK,IAAIA,MAAK,EAGhF,EAAA4J,WAAc7N,IACzBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,cAAcmI,GAAK,OAAOA,MAAK,EAG1F,EAAAwK,KAAQzO,IACnBA,EAAQ4B,QAAQgf,EACZ5gB,EAAQlE,OAAO,GAAI,QAAQmI,GAAK,0BAA0BA,MAAMA,wBAAuB,EAGhF,EAAAyK,QAAW1O,IACtBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,WAAWmI,GAAK,sBAAsBA,SAAQ,EAGzG,EAAA0K,IAAO3O,IAClBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,MAAO,OAAO,EAGzE,EAAA8S,KAAQ5O,IACnBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,OAAQ,QAAQ,EAG3E,EAAA+S,KAAQ7O,IACnBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,OAAQ,QAAQ,EAG3E,EAAAiT,IAAO/O,IAClBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,MAAO,OAAO,EAGzE,EAAAkT,KAAQhP,IACnBA,EAAQ4B,QAAQgf,EAAmC5gB,EAAQlE,OAAO,GAAI,OAAQ,QAAQ,EAG3E,EAAAmT,gBAAkB,CAACjP,EAAyBG,KACvDH,EAAQ4B,QAAQgf,EACZ5gB,EAAQlE,OAAO,GAAI,mBAAmBmI,GAAK,0BAA0BA,MAAMA,gCAC3E,wDAAwD9D,EAAWsb,UAAWtb,EAAWsI,WACtF,E,uGCtNT,gBAEA,UAYA,uBAIElI,YAAoBa,GAAA,KAAAA,QAAAA,EAClB9I,KAAK6oB,KAAO,IAAIlnB,IAChB3B,KAAK8oB,iBAAkB,CACzB,CACAhkB,YAAYd,GACV,OAAOhE,KAAK6oB,KAAKzoB,IAAI4D,EACvB,CACA+B,YAAY/B,EAAca,GACxB7E,KAAK6oB,KAAKxoB,IAAI2D,EAAKa,EACrB,CACAvB,IAAIylB,EAAyBvlB,EAAmBwB,EAAoBa,GAClE,MAAMzE,EAASpB,KAAK8I,QAAQ1H,OACtBxB,EAAqBI,KAAK8I,QAAQjG,wBAEpC7C,KAAK8I,QAAQhJ,kBAIdF,EAA2BopB,eAAehpB,KAAK8I,QAAQxG,kBAAmB,GAG7E1C,EAAmBqpB,YAAYF,EAAcG,iBAC7C,MAAMC,EAAU,GAChB,IAAK,MAAMnB,KAASxkB,EAClB2lB,EAAQ1jB,KAAK,CAAC2jB,QAASD,EAAQ5qB,OAAQ8qB,SAAU,CAAC9gB,OAAQyf,EAAMzf,UAElE,IAAK,MAAMmB,KAAU1E,EACnBmkB,EAAQ1jB,KAAK,CAAC2jB,QAASD,EAAQ5qB,OAAQ8qB,SAAU,CAAC9gB,OAAQmB,EAAOnB,UAEnE,MAAM+gB,EAAYloB,EAAOmoB,gBAAgB,CAACC,OAAQT,EAAcG,gBAAgBO,mBAAmB,GAAIN,YAOvG,GANAvpB,EAAmB8pB,aAAa,EAAGJ,GAEnC1pB,EAAmB+pB,sBAAsB9jB,GAEzC7F,KAAK8I,QAAQjJ,wBAETG,KAAK8I,QAAQhJ,iBAAkB,CAIhCF,EAA2BopB,eAAehpB,KAAK8I,QAAQxG,kBAAmB,GAE3E,MAAMsnB,EAAY5pB,KAAK8I,QAAQxH,eAAeuF,OAAO,GAAI4K,eAAeE,SAAWF,eAAeoY,eAE5FC,EAAW9pB,KAAK8I,QAAQxH,eAAeuF,OAAO,GAAI4K,eAAekB,SAAWlB,eAAeW,UAEjGpS,KAAK8I,QAAQ/F,iBACb/C,KAAK8I,QAAQnG,oBAAoBonB,gBAAgB/pB,KAAK8I,QAAQxG,kBAAmB,EAAG,EAAGsnB,EAAUrhB,OAAQ,GACzGvI,KAAK8I,QAAQnG,oBAAoBmP,mBAAmB8X,EAAUrhB,OAAQ,EAAGuhB,EAASvhB,OAAQ,EAAG,IAC7FvI,KAAK8I,QAAQ7F,QAEb,MAAMkE,EAAWnH,KAAK8I,QAAQpJ,gBACxBsqB,EAAahqB,KAAK8I,QAAQpH,QAAQtB,IAAI+G,GAAW,GAEvD2iB,EAASvhB,OAAOsK,SAASC,WAAWC,MAAMC,MAAK,KAC7C,MAAMiX,EAAa,IAAIC,eAAeJ,EAASvhB,OAAOqJ,kBAChDuY,EAAeF,EAAW,GAC1BG,EAAaH,EAAW,GAE9BH,EAASvhB,OAAOsJ,aAE8B,IAAnC7R,KAAK8I,QAAQuhB,oBACtBrqB,KAAK8I,QAAQuhB,kBAAoBF,GAGnC,MAAMG,EAAYpsB,OAAOisB,EAAenqB,KAAK8I,QAAQuhB,mBAC/CE,EAAUrsB,OAAOksB,EAAapqB,KAAK8I,QAAQuhB,mBAEjD,IAAKnsB,OAAOssB,cAAcF,KAAepsB,OAAOssB,cAAcD,GAC5D,MAAM,IAAIE,WAAW,6BAGvBzqB,KAAK8I,QAAQxH,eAAe2F,QAAQ2iB,EAAU9iB,IAC9C9G,KAAK8I,QAAQxH,eAAe2F,QAAQ6iB,EAAShjB,IAG7C1E,QAAQiJ,IAAI,uBAAuBlE,KAAY6iB,sBAA+BO,EAAUD,OAAe,G,CAIvGtqB,KAAK8I,QAAQjJ,uBAAyB,IACxCG,KAAK8I,QAAQ7F,OAEjB,CACAP,UAEA,CACAoD,MAAM7B,EAA0BymB,GAC9B,MAAMtpB,EAASpB,KAAK8I,QAAQ1H,OAEtBupB,EAAO1mB,EAAYuV,iBAAgB,IAAA8F,oBAAmBoL,IACtDE,EAAexpB,EAAOypB,mBAAmB,CAACF,SAMhD,OALA,IAAA3kB,WAAU,WAAW,IAAM,yBAAyB2kB,MAK7C,CAAC1mB,cAAailB,gBAFjB9nB,EAAO0pB,sBAAsB,CAACxhB,QAAS,CAAC9L,OAAQotB,EAAcG,WAAY,QAASvB,OAAQ,SAGjG,CAEA5jB,2BAA2BC,GACzB,MAAMyH,EAA6B,iBAAlBzH,EAA6BA,EAAgBA,EAAcyH,EACtEgM,EAA6B,iBAAlBzT,EAA6B,EAAKA,EAAcyT,GAAK,EAChEC,EAA6B,iBAAlB1T,EAA6B,EAAKA,EAAc0T,GAAK,EAChEyR,EAAoBhrB,KAAK8I,QAAQ1H,OAAOR,OAAOC,iCACrD,GAAIyM,GAAK0d,GAAqB1R,GAAK0R,GAAqBzR,GAAKyR,EAC3D,MAAO,CAAC1d,EAAGgM,EAAGC,GAEhB,MAAM3S,EAAO0G,EAAIgM,EAAIC,EACrB,IAAI0R,EAAkBxsB,KAAKE,KAAKF,KAAK8X,KAAK3P,IAC1C,GAAIqkB,EAAkBD,EAAmB,CAEvC,GADAC,EAAkBxsB,KAAKE,KAAKF,KAAKysB,KAAKtkB,IAClCqkB,EAAkBD,EACpB,MAAM,IAAI/qB,MAAM,+CAElB,MAAO,CAACgrB,EAAiBA,EAAiBA,E,CAE1C,MAAO,CAACA,EAAiBA,EAAiB,EAE9C,E,4BCtIF,IAAY3Y,E,uEAAAA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KACrB,uBACA,uBACA,wB,g4BCPF,gBAGA,aACA,SA2FsC,oBAAb6Y,WAAyE,QAA7C,EAAQ,OAARA,eAAQ,IAARA,cAAQ,EAARA,SAAUC,qBAAmC,SAAEhlB,KAEvF,EAAAvH,8BAAgCD,UAgClC,IAAAysB,uBAAsB,EAAAztB,IAAIC,MAIxB,EAAAytB,kBAAoB1sB,MAAMhB,UAS7B2tB,EAAKC,YAAY5tB,E,EAId,EAAA6tB,sBAAwB7sB,MAAM8sB,GAShCH,EAAKE,sBAAsBC,GAIzB,EAAAC,sBAAwB/sB,MAAMgtB,EAAkC7sB,IAU9DwsB,EAAKI,sBAAsBC,EAAW7sB,GAIxC,EAAA8sB,cACTjtB,MAAM8sB,EAAmB3sB,IASlBwsB,EAAKM,cAAcH,EAAO3sB,GAIxB,EAAA+sB,eAAiBltB,MAAMmtB,IAShCR,EAAKO,eAAeC,E,EAIX,EAAAzoB,IAAM1E,MACfmtB,EAAmBC,EAAwBxoB,EAA8BC,EACzE1E,IASOwsB,EAAKjoB,IAAIyoB,EAAWC,EAAcxoB,EAAQC,EAAe1E,GAIvD,EAAAktB,aAAertB,MAAMmtB,IAS9BR,EAAKU,aAAaF,E,uGC9NtB,eACA,UAEa,EAAAG,cAAiBntB,IAC5B,MAAMlB,GAAO,IAAAsuB,eACb,IAAIC,EAAmB,EACvB,MAAMC,EAAmB,GAEnBC,EAA0CvtB,GAAW,CAAC,EAE5D,IACE,QAAkC+I,KAA9B/I,aAAO,EAAPA,EAASwtB,kBACXD,EAAWC,iBAAmB,OACzB,GACiC,iBAA7BxtB,EAAQwtB,mBAAkCruB,OAAOC,UAAUY,EAAQwtB,mBAC1ExtB,EAAQwtB,iBAAmB,GAAKxtB,EAAQwtB,iBAAmB,EAC7D,MAAM,IAAItsB,MAAM,qCAAqClB,EAAQwtB,oBAG/D,QAAmCzkB,KAA/B/I,aAAO,EAAPA,EAASytB,mBACXF,EAAWE,kBAAoB,OAC1B,GAAyC,iBAA9BztB,EAAQytB,oBAAmCtuB,OAAOC,UAAUY,EAAQytB,mBACpF,MAAM,IAAIvsB,MAAM,qCAAqClB,EAAQytB,0BAGpC1kB,KAAvB/I,aAAO,EAAPA,EAAS0tB,aACXH,EAAWG,WAAY,GAGzB,IAAIC,EAAgB,EAsBpB,YArBqB5kB,KAAjB/I,aAAO,EAAPA,EAAS4tB,OACXD,GAAgB,IAAAE,iBAAgB7tB,EAAQ4tB,IAAKN,IAG/CD,EAAmBvuB,EAAKgvB,qBACpBP,EAAWC,iBAAmBD,EAAWE,oBAAsBF,EAAWG,UAAYC,GACjE,IAArBN,IACF,IAAAU,gBAAe,kCAGMhlB,KAAnB/I,aAAO,EAAPA,EAASguB,SACX,IAAAC,qBAAoBjuB,EAAQguB,MAAO,GAAI,IAAIE,SAAoC,CAACjpB,EAAKkpB,KACnF,MAAMC,GAAgB,IAAAP,iBAAgB5oB,EAAKqoB,GACrCe,GAAkB,IAAAR,iBAAgBM,EAAOb,GAEsC,IAAjFxuB,EAAKwvB,sBAAsBjB,EAAkBe,EAAeC,KAC9D,IAAAN,gBAAe,iCAAiC9oB,OAASkpB,K,IAKxD,CAACd,EAAkBC,E,CAC1B,MAAOtkB,GAKP,MAJyB,IAArBqkB,GACFvuB,EAAKyvB,sBAAsBlB,GAE7BC,EAAOvF,SAAQngB,GAAS9I,EAAK0vB,MAAM5mB,KAC7BoB,C,+HC3DV,gBACA,UACA,UAGA,UAEA,IAAIylB,EAEJ,6CAME5uB,4BAA4B6uB,GAG1B,MAAMC,QAAiBC,MAAMF,GACvBlnB,QAAoBmnB,EAASnnB,cACnC,OAAO,IAAAklB,uBAAsB,IAAIhlB,WAAWF,GAC9C,CAEA3H,gBAAgBE,EAAiCC,GAM/C,GALKyuB,UACG,IAAAlC,mBAAkB,EAAA1tB,KACxB4vB,GAAqB,GAGK,iBAAjB1uB,EACT,GAAuB,oBAAZ8uB,SAA2BA,QAAQruB,UAAYquB,QAAQruB,SAASsuB,KAAM,CAE/E,MAAMnC,QAAc,IAAAoC,WAAU,EAAAC,SAAV,CAAoBjvB,IACvCkB,KAAK+rB,UAAW/rB,KAAKguB,WAAYhuB,KAAKiuB,mBAAqB,IAAApC,eAAcH,EAAO3sB,E,KAC5E,CAGL,MAAMmvB,QAAyCluB,KAAKyrB,sBAAsB3sB,IAEzEkB,KAAK+rB,UAAW/rB,KAAKguB,WAAYhuB,KAAKiuB,mBAAqB,IAAAtC,uBAAsBuC,EAAWnvB,E,MAG9FiB,KAAK+rB,UAAW/rB,KAAKguB,WAAYhuB,KAAKiuB,mBAAqB,IAAApC,eAAc/sB,EAAcC,EAE5F,CAEAH,gBACE,OAAO,IAAAktB,gBAAe9rB,KAAK+rB,UAC7B,CAEAntB,UAAUuvB,EAAiCC,EAAqCrvB,GAE9E,MAAMsvB,EAAuB,GACvBrC,EAAyB,GAC/B/b,OAAOkZ,QAAQgF,GAAOrH,SAAQwH,IAC5B,MAAM7pB,EAAO6pB,EAAI,GACXC,EAASD,EAAI,GACb7kB,EAAQzJ,KAAKguB,WAAWrG,QAAQljB,GACtC,IAAe,IAAXgF,EACF,MAAM,IAAIxJ,MAAM,kBAAkBwE,MAEpC4pB,EAAW5oB,KAAK8oB,GAChBvC,EAAavmB,KAAKgE,EAAM,IAG1B,MAAMhG,EAA0B,GAChCwM,OAAOkZ,QAAQiF,GAAStH,SAAQwH,IAC9B,MAAM7pB,EAAO6pB,EAAI,GAEX7kB,EAAQzJ,KAAKiuB,YAAYtG,QAAQljB,GACvC,IAAe,IAAXgF,EACF,MAAM,IAAIxJ,MAAM,mBAAmBwE,MAErChB,EAAcgC,KAAKgE,EAAM,IAG3B,MAAMzE,QACI,IAAA1B,KAAItD,KAAK+rB,UAAWC,EAAcqC,EAAWhqB,KAAImqB,GAAK,CAACA,EAAEhsB,KAAMgsB,EAAE5pB,KAAM4pB,EAAEtuB,QAAQuD,EAAe1E,GAEpG0vB,EAAoC,CAAC,EAC3C,IAAK,IAAI3qB,EAAI,EAAGA,EAAIkB,EAAQzG,OAAQuF,IAClC2qB,EAAOzuB,KAAKiuB,YAAYxqB,EAAcK,KAAO,IAAI,EAAA4qB,OAAO1pB,EAAQlB,GAAG,GAAIkB,EAAQlB,GAAG,GAAIkB,EAAQlB,GAAG,IAEnG,OAAO2qB,CACT,CAEAE,iBAEA,CAEA1C,gBACO,IAAAA,cAAajsB,KAAK+rB,UACzB,E,0GC1FF,eACA,UAmGa,EAAA6C,kBAAqB7vB,I,YAChC,MAAMlB,GAAO,IAAAsuB,eACb,IAAI0C,EAAuB,EAC3B,MAAMxC,EAAmB,GAEnByC,EAAkD/vB,GAAW,CAAC,EA5EzC,CAACA,IACvBA,EAAQguB,QACXhuB,EAAQguB,MAAQ,CAAC,GAEdhuB,EAAQguB,MAAMgC,UACjBhwB,EAAQguB,MAAMgC,QAAU,CAAC,GAE3B,MAAMA,EAAUhwB,EAAQguB,MAAMgC,QACzBA,EAAQC,+BAEXD,EAAQC,6BAA+B,KAIrCjwB,EAAQkwB,oBACRlwB,EAAQkwB,mBAAmBC,MAAKC,GAAkD,YAA7B,iBAAPA,EAAkBA,EAAKA,EAAG1qB,UAC1E1F,EAAQqwB,kBAAmB,E,EA6D7BC,CAAqBP,GAErB,IACE,MAAMQ,EA1GuB,CAACA,IAChC,OAAQA,GACN,IAAK,WACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,WACH,OAAO,EACT,IAAK,MACH,OAAO,GACT,QACE,MAAM,IAAIrvB,MAAM,yCAAyCqvB,K,EA+F5BC,CAA8D,QAArC,EAAAT,EAAeQ,8BAAsB,QAAI,OAC3FE,EA5Fe,CAACA,IACxB,OAAQA,GACN,IAAK,aACH,OAAO,EACT,IAAK,WACH,OAAO,EACT,QACE,MAAM,IAAIvvB,MAAM,+BAA+BuvB,K,EAqF3BC,CAA6C,QAA5B,EAAAX,EAAeU,qBAAa,QAAI,cACjEE,EAC8B,iBAAzBZ,EAAea,OAAqB,IAAA/C,iBAAgBkC,EAAea,MAAOtD,GAAU,EAEzFE,EAAkD,QAA/B,EAAAuC,EAAevC,wBAAgB,QAAI,EAC5D,IAAKruB,OAAOC,UAAUouB,IAAqBA,EAAmB,GAAKA,EAAmB,EACpF,MAAM,IAAItsB,MAAM,qCAAqCssB,KAGvD,MAAMC,EAAoD,QAAhC,EAAAsC,EAAetC,yBAAiB,QAAI,EAC9D,IAAKtuB,OAAOC,UAAUquB,IAAsBA,EAAoB,GAAKA,EAAoB,EACvF,MAAM,IAAIvsB,MAAM,qCAAqCusB,KAGvD,MAAMoD,EAAgF,iBAA1Cd,EAAee,wBACvD,IAAAjD,iBAAgBkC,EAAee,uBAAwBxD,GACvD,EAyBJ,OAvBAwC,EAAuBhxB,EAAKiyB,yBACxBR,IAA0BR,EAAeiB,oBAAqBjB,EAAeM,iBAAkBI,IAC7FV,EAAekB,gBAAiB,EAAGN,EAAiBnD,EAAkBC,EACxEoD,GACyB,IAAzBf,IACF,IAAA/B,gBAAe,iCAGbgC,EAAeG,oBAtFnB,EAACJ,EAA8BI,EAC9B5C,KACC,IAAK,MAAM8C,KAAMF,EAAoB,CACnC,IAAIgB,EAAuB,iBAAPd,EAAkBA,EAAKA,EAAG1qB,KAG9C,OAAQwrB,GACN,IAAK,UACHA,EAAS,UACT,MACF,IAAK,QAEH,GADAA,EAAS,QACS,iBAAPd,EAAiB,CAC1B,MAAMe,EAAef,EACrB,GAAIe,aAAY,EAAZA,EAAcC,WAAY,CAC5B,MAAMhD,GAAgB,IAAAP,iBAAgB,aAAcP,GAC9Ce,GAAkB,IAAAR,iBAAgBsD,EAAaC,WAAY9D,GAE7D,KADA,IAAAF,eAAciE,0BAA0BvB,EAAsB1B,EAAeC,KAE/E,IAAAN,gBAAe,oDAAoDoD,EAAaC,c,CAGpF,GAAID,aAAY,EAAZA,EAAcG,gBAAiB,CACjC,MAAMlD,GAAgB,IAAAP,iBAAgB,kBAAmBP,GACnDe,GAAkB,IAAAR,iBAAgBsD,EAAaG,gBAAiBhE,GAElE,KADA,IAAAF,eAAciE,0BAA0BvB,EAAsB1B,EAAeC,KAE/E,IAAAN,gBACI,yDAAyDoD,EAAaG,mB,EAIhF,MACF,IAAK,SACHJ,EAAS,KACT,MACF,IAAK,OACL,IAAK,MACH,SACF,QACE,MAAM,IAAIhwB,MAAM,qCAAqCgwB,KAGzD,MAAMK,GAAmB,IAAA1D,iBAAgBqD,EAAQ5D,GACyC,KAAtF,IAAAF,eAAcoE,4BAA4B1B,EAAsByB,KAClE,IAAAxD,gBAAe,oCAAoCmD,K,GA0CvDO,CAAsB3B,EAAsBC,EAAeG,mBAAoB5C,QAGpDvkB,IAAzBgnB,EAAe/B,QACjB,IAAAC,qBAAoB8B,EAAe/B,MAAO,GAAI,IAAIE,SAAoC,CAACjpB,EAAKkpB,KAC1F,MAAMC,GAAgB,IAAAP,iBAAgB5oB,EAAKqoB,GACrCe,GAAkB,IAAAR,iBAAgBM,EAAOb,GAE8C,IAAzFxuB,EAAKuyB,0BAA0BvB,EAAsB1B,EAAeC,KACtE,IAAAN,gBAAe,qCAAqC9oB,OAASkpB,K,IAK5D,CAAC2B,EAAsBxC,E,CAC9B,MAAOtkB,GAKP,MAJ6B,IAAzB8mB,GACFhxB,EAAK4yB,0BAA0B5B,GAEjCxC,EAAOvF,SAAQngB,GAAS9I,EAAK0vB,MAAM5mB,KAC7BoB,C,kOCjIG,EAAA2oB,2BAA8BluB,IACzC,OAAQA,GACN,IAAK,OACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,OACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,GACT,IAAK,UACH,OAAO,GACT,IAAK,UACH,OAAO,EACT,IAAK,UACH,OAAO,GACT,IAAK,SACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,GAET,QACE,MAAM,IAAIvC,MAAM,0BAA0BuC,K,EAOnC,EAAAmuB,2BAA8BC,IACzC,OAAQA,GACN,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,QACT,KAAK,GACH,MAAO,SACT,KAAK,GACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,GACH,MAAO,UACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,QACT,KAAK,GACH,MAAO,SAET,QACE,MAAM,IAAI3wB,MAAM,0BAA0B2wB,K,EAQnC,EAAAhnB,qBAAwBinB,GACpB,MAAC/oB,EAAW,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,OAAGA,EAAW,EAAG,EAAG,EAAG,EAAG,OAAGA,OAAWA,OAAWA,GAAW+oB,GAKhG,EAAAC,kCAAqCtuB,IAG5C,OAAQA,GACN,IAAK,UAQL,IAAK,SACH,OAAOuuB,YAPT,IAAK,UACH,OAAO1oB,aACT,IAAK,QAUL,IAAK,OACH,OAAO5B,WATT,IAAK,OACH,OAAOuqB,UAGT,IAAK,QACH,OAAOC,WACT,IAAK,QACH,OAAOC,WAGT,IAAK,UACH,OAAOC,aACT,IAAK,SACH,OAAOC,YACT,IAAK,QACH,OAAO3oB,cACT,IAAK,SACH,OAAOyhB,eACT,QACE,MAAM,IAAIjqB,MAAM,qBAAqBuC,K,EAOlC,EAAA2I,qBAAwBrJ,IACnC,OAAQA,GACN,IAAK,UACH,OAAO,EACT,IAAK,OACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,QACE,MAAM,IAAI7B,MAAM,8BAA8B6B,K,wOC9JpD,gBAEA,UACA,UACA,UACA,SACA,UAsCa,EAAA0pB,YAAc5sB,MAAMhB,IAXjB,IAACK,EAAoBozB,EAApBpzB,EAaPL,EAAIC,KAAKI,WAbkBozB,GAaL,IAAAlmB,sBAAqBvN,EAAIkE,UAXrC,KADA,IAAAqqB,eAAcmF,SAASrzB,EAAYozB,KAEnD,IAAAvE,gBAAe,uCAaX,IAAA1iB,OAAS,IAAA+hB,eAAevuB,EAAI,EAQpC,MAAM2zB,EAAiB,IAAI5vB,IAMd,EAAA8pB,sBAAyBC,IACpC,MAAM7tB,GAAO,IAAAsuB,eACPqF,EAAkB3zB,EAAK4zB,QAAQ/F,EAAMhlB,YAC3C,GAAwB,IAApB8qB,EACF,MAAM,IAAIvxB,MAAM,+DAA+DyrB,EAAMhlB,eAGvF,OADA7I,EAAK4M,OAAOpK,IAAIqrB,EAAO8F,GAChB,CAACA,EAAiB9F,EAAMhlB,WAAW,EAS/B,EAAAilB,sBACT,CAACuC,EAAkCnvB,KACjC,MAAMlB,GAAO,IAAAsuB,eAEb,IAAIuF,EAAgB,EAChB7C,EAAuB,EACvBxC,EAAmB,GACvB,MAAMsF,EAAwB,GACxBC,EAAyB,GAE/B,KACG/C,EAAsBxC,IAAU,IAAAuC,mBAAkB7vB,GAEnD2yB,EAAgB7zB,EAAKg0B,kBAAkB3D,EAAU,GAAIA,EAAU,GAAIW,GAC7C,IAAlB6C,IACF,IAAA5E,gBAAe,2BAGjB,MAAO1jB,EAAY0oB,GApFQ,CAACJ,IAClC,MAAM7zB,GAAO,IAAAsuB,eACPriB,EAAQjM,EAAKkM,YACnB,IACE,MAAMY,EAAa9M,EAAKmM,WAAW,GAKnC,OAHkB,IADAnM,EAAKk0B,wBAAwBL,EAAe/mB,EAAYA,EAAa,KAErF,IAAAmiB,gBAAe,yCAEV,CAACjvB,EAAKm0B,OAAOrnB,EAAa,GAAI9M,EAAKm0B,OAAOrnB,EAAa,EAAI,G,SAElE9M,EAAKsM,aAAaL,E,GAyEoBmoB,CAA2BP,GAEvD1D,EAAa,GACbC,EAAc,GACpB,IAAK,IAAInqB,EAAI,EAAGA,EAAIsF,EAAYtF,IAAK,CACnC,MAAMW,EAAO5G,EAAKq0B,iBAAiBR,EAAe5tB,GACrC,IAATW,IACF,IAAAqoB,gBAAe,4BAEjB6E,EAAsBlsB,KAAKhB,GAC3BupB,EAAWvoB,KAAK5H,EAAKs0B,aAAa1tB,G,CAEpC,IAAK,IAAIX,EAAI,EAAGA,EAAIguB,EAAahuB,IAAK,CACpC,MAAMW,EAAO5G,EAAKu0B,kBAAkBV,EAAe5tB,GACtC,IAATW,IACF,IAAAqoB,gBAAe,6BAEjB8E,EAAuBnsB,KAAKhB,GAC5BwpB,EAAYxoB,KAAK5H,EAAKs0B,aAAa1tB,G,CAIrC,OADA8sB,EAAelxB,IAAIqxB,EAAe,CAACA,EAAeC,EAAuBC,IAClE,CAACF,EAAe1D,EAAYC,E,CACnC,MAAOlmB,GAOP,MANA4pB,EAAsB7K,SAAQuL,GAAOx0B,EAAKy0B,SAASD,KACnDT,EAAuB9K,SAAQuL,GAAOx0B,EAAKy0B,SAASD,KAE9B,IAAlBX,GACF7zB,EAAK00B,mBAAmBb,GAEpB3pB,C,SAENlK,EAAK0vB,MAAMW,EAAU,IACQ,IAAzBW,GACFhxB,EAAK4yB,0BAA0B5B,GAEjCxC,EAAOvF,SAAQngB,GAAS9I,EAAK0vB,MAAM5mB,I,GAS9B,EAAAklB,cACT,CAACH,EAAmB3sB,KAClB,MAAMmvB,GAAmC,IAAAzC,uBAAsBC,GAC/D,OAAO,IAAAC,uBAAsBuC,EAAWnvB,EAAQ,EAGzC,EAAA+sB,eAAkBC,IAC7B,MAAMluB,GAAO,IAAAsuB,eACP4C,EAAUwC,EAAenxB,IAAI2rB,GACnC,IAAKgD,EACH,MAAM,IAAI9uB,MAAM,+CAA+C8rB,KAEjE,MAAO2F,EAAeC,EAAuBC,GAA0B7C,EAEvE4C,EAAsB7K,SAAQuL,GAAOx0B,EAAKy0B,SAASD,KACnDT,EAAuB9K,SAAQuL,GAAOx0B,EAAKy0B,SAASD,KACpDx0B,EAAK00B,mBAAmBb,GACxBH,EAAe/pB,OAAOukB,EAAU,EAMrB,EAAAzoB,IAAM1E,MACfmtB,EAAmBC,EAAwBxoB,EAA8BC,EACzE1E,KACF,MAAMlB,GAAO,IAAAsuB,eACP4C,EAAUwC,EAAenxB,IAAI2rB,GACnC,IAAKgD,EACH,MAAM,IAAI9uB,MAAM,6CAA6C8rB,KAE/D,MAAO2F,EAAeC,EAAuBC,GAA0B7C,EAEjE3lB,EAAa4iB,EAAaztB,OAC1BuzB,EAAcruB,EAAclF,OAElC,IAAI6tB,EAAmB,EACnBoG,EAA6B,GAEjC,MAAMC,EAAwB,GACxBC,EAAwB,GAE9B,KACGtG,EAAkBoG,IAAoB,IAAAtG,eAAcntB,GAGrD,IAAK,IAAI+E,EAAI,EAAGA,EAAIsF,EAAYtF,IAAK,CACnC,MAAMyB,EAAW/B,EAAOM,GAAG,GACrBc,EAAOpB,EAAOM,GAAG,GACjB5D,EAAOsD,EAAOM,GAAG,GAEvB,IAAI6G,EACAgoB,EAEJ,GAAIrmB,MAAMsmB,QAAQ1yB,GAAO,CAEvByyB,EAAiB,EAAIzyB,EAAK3B,OAC1BoM,EAAa9M,EAAK4zB,QAAQkB,GAC1BD,EAAYjtB,KAAKkF,GACjB,IAAIzB,EAAYyB,EAAa,EAC7B,IAAK,IAAI7G,EAAI,EAAGA,EAAI5D,EAAK3B,OAAQuF,IAAK,CACpC,GAAuB,iBAAZ5D,EAAK4D,GACd,MAAM,IAAI+uB,UAAU,wBAAwB/uB,qBAE9CjG,EAAKoL,QAAQC,MAAe,IAAA0jB,iBAAgB1sB,EAAK4D,GAAI4uB,E,OAGvDC,EAAiBzyB,EAAKwG,WACtBiE,EAAa9M,EAAK4zB,QAAQkB,GAC1BD,EAAYjtB,KAAKkF,GACjB9M,EAAK4M,OAAOpK,IAAI,IAAIoG,WAAWvG,EAAKqI,OAAQrI,EAAK+Q,WAAY0hB,GAAiBhoB,GAGhF,MAAMb,EAAQjM,EAAKkM,YACb+oB,EAAaj1B,EAAKmM,WAAW,EAAIpF,EAAKrG,QAC5C,IACE,IAAIw0B,EAAWD,EAAa,EAC5BluB,EAAKkiB,SAAQxiB,GAAKzG,EAAKm0B,OAAOe,KAAczuB,IAC5C,MAAMiqB,EAAS1wB,EAAKm1B,kBAChB,IAAAtC,4BAA2BnrB,GAAWoF,EAAYgoB,EAAgBG,EAAYluB,EAAKrG,QACxE,IAAXgwB,IACF,IAAAzB,gBAAe,iCAAiChpB,OAElD2uB,EAAYhtB,KAAK8oB,E,SAEjB1wB,EAAKsM,aAAaL,E,EAItB,MAAMmpB,EAAiBp1B,EAAKkM,YACtBmpB,EAAoBr1B,EAAKmM,WAAwB,EAAbZ,GACpC+pB,EAAmBt1B,EAAKmM,WAAwB,EAAbZ,GACnCgqB,EAAqBv1B,EAAKmM,WAAyB,EAAd8nB,GACrCuB,EAAoBx1B,EAAKmM,WAAyB,EAAd8nB,GAE1C,IACE,IAAIwB,EAAmBJ,EAAoB,EACvCK,EAAkBJ,EAAmB,EACrCK,EAAoBJ,EAAqB,EACzCK,EAAmBJ,EAAoB,EAC3C,IAAK,IAAIvvB,EAAI,EAAGA,EAAIsF,EAAYtF,IAC9BjG,EAAKoL,QAAQqqB,KAAsBb,EAAY3uB,GAC/CjG,EAAKoL,QAAQsqB,KAAqB5B,EAAsB3F,EAAaloB,IAEvE,IAAK,IAAIA,EAAI,EAAGA,EAAIguB,EAAahuB,IAC/BjG,EAAKoL,QAAQuqB,KAAuB,EACpC31B,EAAKoL,QAAQwqB,KAAsB7B,EAAuBnuB,EAAcK,IAI1E,IAAI4vB,EAAY71B,EAAK81B,QACjBjC,EAAeyB,EAAkBD,EAAmB9pB,EAAYiqB,EAAmBvB,EACnFsB,EAAoBhH,GAGxB,MAAMwH,EAAa/1B,EAAKg2B,eACpBD,QAAyC,IAApBA,EAAW5gB,OAClC0gB,QAAkBE,GAGpB,MAAMlqB,EAA+B,GAEnB,IAAdgqB,IACF,IAAA5G,gBAAe,4BAGjB,IAAK,IAAIhpB,EAAI,EAAGA,EAAIguB,EAAahuB,IAAK,CACpC,MAAMyqB,EAAS1wB,EAAKoL,QAAQmqB,EAAqB,EAAItvB,GAE/CgwB,EAA2Bj2B,EAAKkM,YAEhCgqB,EAAmBl2B,EAAKmM,WAAW,IAEzC,IAAIxH,EAA6BmI,EAAa,EAC9C,IACE+oB,EAAY71B,EAAKm2B,kBACbzF,EAAQwF,EAAkBA,EAAmB,EAAGA,EAAmB,EAAGA,EAAmB,IAC3E,IAAdL,IACF,IAAA5G,gBAAe,4CAA4ChpB,MAE7D,IAAImwB,EAAkBF,EAAmB,EACzC,MAAMxuB,EAAW1H,EAAKoL,QAAQgrB,KAC9BtpB,EAAa9M,EAAKoL,QAAQgrB,KAC1B,MAAMnB,EAAaj1B,EAAKoL,QAAQgrB,KAC1BC,EAAar2B,EAAKoL,QAAQgrB,KAC1BrvB,EAAO,GACb,IAAK,IAAId,EAAI,EAAGA,EAAIowB,EAAYpwB,IAC9Bc,EAAKa,KAAK5H,EAAKoL,QAAQ6pB,EAAa,EAAIhvB,IAE1CjG,EAAKy0B,SAASQ,GAEd,MAAMlsB,EAAuB,IAAhBhC,EAAKrG,OAAe,EAAIqG,EAAKghB,QAAO,CAACja,EAAGC,IAAMD,EAAIC,IAE/D,GADApJ,GAAO,IAAAmuB,4BAA2BprB,GACrB,WAAT/C,EAAmB,CACrB,MAAM2xB,EAAuB,GAC7B,IAAIjrB,EAAYyB,EAAa,EAC7B,IAAK,IAAI7G,EAAI,EAAGA,EAAI8C,EAAM9C,IAAK,CAC7B,MAAMmG,EAASpM,EAAKoL,QAAQC,KACtBkrB,EAAiBtwB,IAAM8C,EAAO,OAAIkB,EAAYjK,EAAKoL,QAAQC,GAAae,EAC9EkqB,EAAW1uB,KAAK5H,EAAKs0B,aAAaloB,EAAQmqB,G,CAE5C1qB,EAAOjE,KAAK,CAACjD,EAAMoC,EAAMuvB,G,KACpB,CACL,MACMj0B,EAAO,KADiB,IAAA4wB,mCAAkCtuB,GACnD,CAA0BoE,GACvC,IAAIH,WAAWvG,EAAKqI,OAAQrI,EAAK+Q,WAAY/Q,EAAKwG,YAC7CrG,IAAIxC,EAAK4M,OAAOC,SAASC,EAAYA,EAAazK,EAAKwG,aAC5DgD,EAAOjE,KAAK,CAACjD,EAAMoC,EAAM1E,G,UAG3BrC,EAAKsM,aAAa2pB,GACL,WAATtxB,GAAqBmI,GACvB9M,EAAK0vB,MAAM5iB,GAEb9M,EAAKw2B,kBAAkB9F,E,EAI3B,OAAO7kB,C,SAEP7L,EAAKsM,aAAa8oB,E,UAGpBR,EAAY3L,SAAQrZ,GAAK5P,EAAKw2B,kBAAkB5mB,KAChDilB,EAAY5L,SAAQwN,GAAKz2B,EAAK0vB,MAAM+G,KAEX,IAArBlI,GACFvuB,EAAKyvB,sBAAsBlB,GAE7BoG,EAAiB1L,SAAQwN,GAAKz2B,EAAK0vB,MAAM+G,I,GAOhC,EAAArI,aAAgBF,IAC3B,MAAMluB,GAAO,IAAAsuB,eACP4C,EAAUwC,EAAenxB,IAAI2rB,GACnC,IAAKgD,EACH,MAAM,IAAI9uB,MAAM,sBAElB,MAAMyxB,EAAgB3C,EAAQ,GAGxBwF,EAAkB12B,EAAK22B,iBAAiB9C,GACtB,IAApB6C,IACF,IAAAzH,gBAAe,mCAEjBjvB,EAAKy0B,SAASiC,EAAgB,EAGnB,EAAAE,2BAA8BC,IACzC,MAAMC,EAA6B,GACnC,IAAK,MAAMpG,KAAUmG,EAAS,CAC5B,MAAMx0B,EAAOquB,EAAO,IACfjiB,MAAMsmB,QAAQ1yB,IAASA,EAAKqI,QAC/BosB,EAAQlvB,KAAKvF,EAAKqI,O,CAGtB,OAAOosB,CAAO,C,mxBC3WhB,iBAMMC,EAC0B,EAAQ,KAElCC,EAGFD,EAGJ,IAAI/2B,EACAi3B,GAAc,EACdC,GAAe,EACfC,GAAU,EA2DD,EAAA3J,sBAAwBzsB,MAAMq2B,IACzC,GAAIH,EACF,OAAO31B,QAAQC,UAEjB,GAAI21B,EACF,MAAM,IAAI90B,MAAM,yDAElB,GAAI+0B,EACF,MAAM,IAAI/0B,MAAM,sDAGlB80B,GAAe,EAGf,MAAMG,EAAUD,EAAMn3B,YAChBG,EAAag3B,EAAMh3B,WACnBF,EAAOk3B,EAAMl3B,KAEbo3B,EAAal3B,EAAa,GA3EH,MAC7B,IAEE,MAAiC,oBAAtBm3B,oBAMmB,oBAAnBC,iBACT,IAAIA,gBAAiBC,MAAMC,YAAY,IAAIH,kBAAkB,IAKxDI,YAAYC,SAAS,IAAIhvB,WAAW,CACzC,EAAG,GAAI,IAAK,IAAK,EAAG,EAAI,EAAI,EAAG,EAAG,EAAG,EAAI,GAAI,EAAK,EAAI,EAAG,EAAG,EAAI,EAAG,EACnE,EAAG,EAAI,EAAK,EAAK,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,EAAI,IAAK,GAAI,EAAG,EAAG,GAAI,M,CAElE,MAAOsB,GACP,OAAO,C,GAuD4B2tB,GAC/BC,EAAU53B,GApDM,MACtB,IAeE,OAAOy3B,YAAYC,SAAS,IAAIhvB,WAAW,CACzC,EAAK,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAK,GAAK,EAAG,GAAI,EACvF,IAAK,GAAI,IAAK,GAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAI,EAAI,IAAK,IAAK,EAAG,GAAI,K,CAEzF,MAAOsB,GACP,OAAO,C,GA+Be6tB,GAElBC,EAAYZ,EAAMY,UAClBC,EAA0C,iBAAdD,EAAyBA,OAAY/tB,EACjEiuB,EA/BgB,EAACJ,EAAkBR,IACrCA,EACKQ,EAAU,8BAAgC,yBAE1CA,EAAU,qBAAuB,gBA2BrBK,CAAgBL,EAASR,GACxCc,EAAwC,iBAAdJ,EAAyBA,EAAUE,QAAgBjuB,EAEnF,IAAIouB,GAAY,EAEhB,MAAMC,EAA8B,GA6EpC,GA1EIjB,EAAU,GACZiB,EAAM1wB,KAAK,IAAItG,SAASC,IACtBg3B,YAAW,KACTF,GAAY,EACZ92B,GAAS,GACR81B,EAAQ,KAKfiB,EAAM1wB,KAAK,IAAItG,SAAQ,CAACC,EAASi3B,MACflB,EAAaN,EAAyBD,GACf,CACrC0B,WAAY,CAACC,EAAkBC,IAYzBD,EAASE,SAAS,SAChBR,IAIWH,QAAAA,EAAsBU,GAUrBT,EAGXS,EAAkBD,IAabvjB,MAEZxV,IACEu3B,GAAe,EACfD,GAAc,EACdj3B,EAAOL,EACP4B,GAAS,IAGVs3B,IACC3B,GAAe,EACfC,GAAU,EACVqB,EAAOK,EAAK,GACZ,WAGFv3B,QAAQw3B,KAAKR,GAEfD,EACF,MAAM,IAAIj2B,MAAM,2DAA2Di1B,M,EAIlE,EAAA/I,YAAc,KACzB,GAAI2I,GAAej3B,EACjB,OAAOA,EAGT,MAAM,IAAIoC,MAAM,sCAAsC,EAG3C,EAAAyC,QAAU,K,OACjBoyB,GAAgBC,GAAiBC,IACnCD,GAAe,EAEwB,QAAtC,EAAAl3B,EAA+B+4B,eAAO,SAAEC,sBACzCh5B,OAAOiK,EAEPitB,GAAe,EACfD,GAAc,EACdE,GAAU,E,gJC7Md,eAEa,EAAApI,gBAAkB,CAAC1sB,EAAcmsB,KAC5C,MAAMxuB,GAAO,IAAAsuB,eAEP2K,EAAaj5B,EAAKk5B,gBAAgB72B,GAAQ,EAC1CyK,EAAa9M,EAAK4zB,QAAQqF,GAIhC,OAHAj5B,EAAKm5B,aAAa92B,EAAMyK,EAAYmsB,GACpCzK,EAAO5mB,KAAKkF,GAELA,CAAU,EAON,EAAAqiB,oBACT,CAACjuB,EAAkCk4B,EAAgBC,EAClDl4B,KACC,GAAsB,iBAAXD,GAAmC,OAAZA,EAAkB,CAClD,GAAIm4B,EAAKl2B,IAAIjC,GACX,MAAM,IAAIkB,MAAM,iCAEhBi3B,EAAK3jB,IAAIxU,E,CAIbkR,OAAOkZ,QAAQpqB,GAAS+nB,SAAQ,EAAE9iB,EAAKkpB,MACrC,MAAMzoB,EAAO,EAAWwyB,EAASjzB,EAAMA,EACvC,GAAqB,iBAAVkpB,GACT,IAAAF,qBAAoBE,EAAkCzoB,EAAO,IAAKyyB,EAAMl4B,QACnE,GAAqB,iBAAVkuB,GAAuC,iBAAVA,EAC7CluB,EAAQyF,EAAMyoB,EAAMiK,gBACf,IAAqB,kBAAVjK,EAGhB,MAAM,IAAIjtB,MAAM,0CAA0CitB,GAF1DluB,EAAQyF,EAAM,EAAU,IAAM,I,IAIhC,EAOK,EAAAqoB,eAAkBzqB,IAC7B,MAAMxE,GAAO,IAAAsuB,eAEPriB,EAAQjM,EAAKkM,YACnB,IACE,MAAMqtB,EAAev5B,EAAKmM,WAAW,GACrCnM,EAAKw5B,iBAAiBD,EAAcA,EAAe,GACnD,MAAM1D,EAAY71B,EAAKm0B,OAAOoF,EAAe,GACvCE,EAAsBz5B,EAAKoL,QAAQmuB,EAAe,EAAI,GACtDG,EAAeD,EAAsBz5B,EAAKs0B,aAAamF,GAAuB,GACpF,MAAM,IAAIr3B,MAAM,GAAGoC,iBAAuBqxB,qBAA6B6D,I,SAEvE15B,EAAKsM,aAAaL,E,kBC5DtB,IACM0tB,WADFC,GACED,WAAiC,oBAAbrM,UAA4BA,SAASC,cAAgBD,SAASC,cAAchlB,SAAM0B,EAChF,oBAAf4vB,aAA4BF,WAAaA,YAAcE,YAC3D,SACAD,EAAU,CAAC,GAEpB,IAAIE,EAA2DC,EAAEtD,EAA3DqD,IAAIA,OAAqB,IAAZF,EAA0BA,EAAU,CAAC,GAAWE,EAAEE,MAAM,IAAI14B,SAAQ,CAACwM,EAAEC,KAAKgsB,EAAEjsB,EAAE2oB,EAAE1oB,KAAI,IAA0OksB,EAAEC,EAAEC,EAA1OxJ,EAAEve,OAAOC,OAAO,CAAC,EAAEynB,GAAGM,EAAE,iBAAiB3qB,EAAE,CAAC3B,EAAEC,KAAK,MAAMA,CAAC,EAAGssB,EAAG,iBAAiBC,OAAO7e,EAAE,mBAAmB8e,cAAcC,EAAE,iBAAiBzK,SAAS,iBAAiBA,QAAQruB,UAAU,iBAAiBquB,QAAQruB,SAASsuB,KAAKyK,EAAE,GAChV,GAAGD,EAAE,CAAC,IAAIE,EAAG,EAAQ,MAAMC,EAAE,EAAQ,KAAQF,EAAEhf,EAAEkf,EAAEC,QAAQH,GAAG,IAAII,UAAU,IAAIZ,EAAE,CAACnsB,EAAEC,KAAKD,EAAEA,EAAEgtB,WAAW,WAAW,IAAIC,IAAIjtB,GAAG6sB,EAAEK,UAAUltB,GAAU4sB,EAAGO,aAAantB,EAAEC,OAAE,EAAO,SAASosB,EAAErsB,KAAIA,EAAEmsB,EAAEnsB,GAAE,IAAMpD,SAASoD,EAAE,IAAIlF,WAAWkF,IAAWA,GAAGosB,EAAE,CAACpsB,EAAEC,EAAE7D,EAAEgxB,GAAE,KAAMptB,EAAEA,EAAEgtB,WAAW,WAAW,IAAIC,IAAIjtB,GAAG6sB,EAAEK,UAAUltB,GAAG4sB,EAAGxK,SAASpiB,EAAEotB,OAAE,EAAO,QAAO,CAACC,EAAEtR,KAAKsR,EAAEjxB,EAAEixB,GAAGptB,EAAEmtB,EAAErR,EAAEnf,OAAOmf,EAAC,GAAE,GAAIiQ,EAAEsB,aAAa,EAAErL,QAAQsL,KAAK36B,SAAS05B,EAAErK,QAAQsL,KAAK,GAAGC,QAAQ,MAAM,MAAMvL,QAAQsL,KAAKxrB,MAAM,GAAGJ,EAAE,CAAC3B,EAAEC,KAC/d,MADoegiB,QAAQwL,SAC9eztB,EAAQC,CAAC,EAAG+rB,EAAE0B,QAAQ,IAAI,4BAA4B,MAASnB,GAAI5e,KAAEA,EAAEgf,EAAE36B,KAAK27B,SAASC,KAAK,oBAAoBpO,UAAUA,SAASC,gBAAgBkN,EAAEnN,SAASC,cAAchlB,KAAKoxB,aAAac,EAAEd,YAAmCc,EAAvB,IAAIA,EAAE3Q,QAAQ,SAAW2Q,EAAEkB,OAAO,EAAElB,EAAEa,QAAQ,SAAS,IAAIM,YAAY,KAAK,GAAK,GAAG3B,EAAEnsB,IAAI,IAAIC,EAAE,IAAI8tB,eAA+C,OAAhC9tB,EAAE+tB,KAAK,MAAMhuB,GAAE,GAAIC,EAAEguB,KAAK,MAAahuB,EAAEiuB,cAAcvgB,IAAI0e,EAAErsB,IAAI,IAAIC,EAAE,IAAI8tB,eAA4E,OAA7D9tB,EAAE+tB,KAAK,MAAMhuB,GAAE,GAAIC,EAAEkuB,aAAa,cAAcluB,EAAEguB,KAAK,MAAa,IAAInzB,WAAWmF,EAAE8hB,SAAQ,GACtfqK,EAAE,CAACpsB,EAAEC,EAAE7D,KAAK,IAAIgxB,EAAE,IAAIW,eAAeX,EAAEY,KAAK,MAAMhuB,GAAE,GAAIotB,EAAEe,aAAa,cAAcf,EAAEgB,OAAO,KAAK,KAAKhB,EAAEiB,QAAQ,GAAGjB,EAAEiB,QAAQjB,EAAErL,SAAS9hB,EAAEmtB,EAAErL,UAAU3lB,GAAE,EAAGgxB,EAAEkB,QAAQlyB,EAAEgxB,EAAEa,KAAK,KAAI,GAAG,IAAqKM,EAAjKC,EAAGxC,EAAEyC,OAAOh4B,QAAQiJ,IAAIgvB,KAAKj4B,SAASk4B,EAAE3C,EAAE4C,UAAUn4B,QAAQo4B,KAAKH,KAAKj4B,SAAS6N,OAAOC,OAAOynB,EAAEnJ,GAAGA,EAAE,KAAKmJ,EAAEsB,cAAchB,EAAEN,EAAEsB,aAAatB,EAAE8C,OAAOntB,EAAEqqB,EAAE8C,MAAY9C,EAAE+C,aAAaR,EAAEvC,EAAE+C,YAAY,IAAIC,EAAchD,EAAEgD,gBAAe,EAAG,iBAAiBnF,aAAaoF,EAAE,mCACnc,IAAIC,EAAOC,EAAErrB,EAAEE,EAAEorB,EAAXrrB,GAAE,EAAW,SAASsrB,IAAK,IAAIrvB,EAAEkvB,EAAEtyB,OAAOovB,EAAErvB,MAAMwyB,EAAE,IAAI9J,UAAUrlB,GAAGgsB,EAAEsD,OAAO,IAAIhK,WAAWtlB,GAAGgsB,EAAE3F,OAAOriB,EAAE,IAAIuhB,WAAWvlB,GAAGgsB,EAAEltB,OAAOgF,EAAE,IAAIhJ,WAAWkF,GAAGgsB,EAAEuD,QAAQ,IAAInK,YAAYplB,GAAGgsB,EAAE1uB,QAAQ8xB,EAAE,IAAI3J,YAAYzlB,GAAGgsB,EAAEwD,QAAQ,IAAI9yB,aAAasD,GAAGgsB,EAAEyD,QAAQ,IAAIjK,aAAaxlB,EAAE,CAAC,IAAI0vB,EAAG,GAAGC,EAAG,GAAGC,EAAG,GAAG,SAASC,IAAK,IAAI7vB,EAAEgsB,EAAE8D,OAAOC,QAAQL,EAAGM,QAAQhwB,EAAE,CAAC,IACjHiwB,EADqHC,EAAE,EAAEC,EAAE,KAAKC,EAAE,KAClX,SAASnB,EAAEjvB,GAA4I,MAAtIgsB,EAAEqE,SAAQrE,EAAEqE,QAAQrwB,GAAsB2uB,EAAnB3uB,EAAE,WAAWA,EAAE,KAAS+D,GAAE,EAAG/D,EAAE,IAAI6pB,YAAYyG,aAAatwB,EAAE,4CAA4C2oB,EAAE3oB,GAASA,CAAE,CAAC,SAASuwB,EAAGvwB,GAAG,OAAOA,EAAEgtB,WAAW,wCAAwC,CAAyB,IAAIuD,EAAtBN,EAAE,iBAA0B,CAAC,IAAIO,EAAGP,EAAEA,EAAEjE,EAAErB,WAAWqB,EAAErB,WAAW6F,EAAG7D,GAAGA,EAAE6D,CAAE,CAAC,SAASC,EAAGzwB,GAAG,IAAI,GAAGA,GAAGiwB,GAAG1B,EAAE,OAAO,IAAIzzB,WAAWyzB,GAAG,GAAGlC,EAAE,OAAOA,EAAErsB,GAAG,KAAK,iDAAkD,CAAC,MAAMC,GAAGgvB,EAAEhvB,EAAE,CAAC,CACpH,SAASywB,EAAG1wB,EAAEC,EAAE7D,GAAG,OAA5W,SAAY4D,GAAG,IAAIuuB,IAAIhC,GAAI5e,GAAG,CAAC,GAAG,mBAAmBqU,QAAQhiB,EAAEgtB,WAAW,WAAW,OAAOhL,MAAMhiB,EAAE,CAAC2wB,YAAY,gBAAgBtpB,MAAKpH,IAAI,IAAIA,EAAE2wB,GAAG,KAAK,uCAAuC5wB,EAAE,IAAI,OAAOC,EAAErF,aAAY,IAAIi2B,OAAM,IAAIJ,EAAGzwB,KAAI,GAAGosB,EAAE,OAAO,IAAI54B,SAAQ,CAACyM,EAAE7D,KAAKgwB,EAAEpsB,GAAEotB,GAAGntB,EAAE,IAAInF,WAAWsyB,KAAIhxB,EAAC,GAAG,CAAC,OAAO5I,QAAQC,UAAU4T,MAAK,IAAIopB,EAAGzwB,IAAG,CAA2B8wB,CAAG9wB,GAAGqH,MAAK+lB,GAAGvD,YAAYkH,YAAY3D,EAAEntB,KAAIoH,MAAK+lB,GAAGA,IAAG/lB,KAAKjL,GAAEgxB,IAAIuB,EAAE,0CAA0CvB,GAAG6B,EAAE7B,EAAC,GAAG,CAC5H,SAAS4D,EAAGhxB,GAAG3L,KAAKyE,KAAK,aAAazE,KAAKqC,QAAQ,gCAAgCsJ,EAAE,IAAI3L,KAAKg6B,OAAOruB,CAAC,CACpd,SAASixB,EAAEjxB,GAAG,KAAK,EAAEA,EAAEpN,QAAQoN,EAAE+vB,OAAF/vB,CAAUgsB,EAAE,CAAC,SAASkF,EAAGlxB,GAAG3L,KAAK88B,GAAGnxB,EAAE,GAAG3L,KAAK+8B,GAAG,SAASnxB,GAAGmvB,EAAE/6B,KAAK88B,GAAG,GAAG,IAAI,GAAGlxB,CAAC,EAAE5L,KAAKg9B,GAAG,SAASpxB,GAAGmvB,EAAE/6B,KAAK88B,GAAG,GAAG,IAAI,GAAGlxB,CAAC,EAAE5L,KAAKi9B,GAAG,SAASrxB,EAAE7D,GAAG/H,KAAKk9B,KAAKl9B,KAAK+8B,GAAGnxB,GAAG5L,KAAKg9B,GAAGj1B,EAAE,EAAE/H,KAAKk9B,GAAG,WAAWnC,EAAE/6B,KAAK88B,GAAG,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,IAAcK,EAAG,oBAAoBC,YAAY,IAAIA,YAAY,aAAQ,EACzU,SAASH,EAAGtxB,EAAEC,EAAE7D,GAAU,IAAIgxB,GAAXntB,KAAK,GAAU7D,EAAE,IAAIA,EAAE6D,EAAED,EAAE5D,MAAMA,GAAGgxB,MAAMhxB,EAAE,GAAG,GAAGA,EAAE6D,GAAGD,EAAEpD,QAAQ40B,EAAG,OAAOA,EAAGE,OAAO1xB,EAAEjB,SAASkB,EAAE7D,IAAI,IAAIgxB,EAAE,GAAGntB,EAAE7D,GAAG,CAAC,IAAIixB,EAAErtB,EAAEC,KAAK,GAAK,IAAFotB,EAAM,CAAC,IAAItR,EAAS,GAAP/b,EAAEC,KAAQ,GAAG,MAAQ,IAAFotB,GAAOD,GAAGuE,OAAOC,cAAgB,GAAFvE,IAAO,EAAEtR,OAAO,CAAC,IAAI8V,EAAS,GAAP7xB,EAAEC,KAAwE,OAAhEotB,EAAE,MAAQ,IAAFA,IAAU,GAAFA,IAAO,GAAGtR,GAAG,EAAE8V,GAAK,EAAFxE,IAAM,GAAGtR,GAAG,GAAG8V,GAAG,EAAS,GAAP7xB,EAAEC,MAAgBmtB,GAAGuE,OAAOC,aAAavE,IAAIA,GAAG,MAAMD,GAAGuE,OAAOC,aAAa,MAAMvE,GAAG,GAAG,MAAQ,KAAFA,GAAQ,CAAC,MAAMD,GAAGuE,OAAOC,aAAavE,EAAE,CAAC,OAAOD,CAAC,CAAC,SAAS0E,EAAE9xB,EAAEC,GAAG,OAAOD,KAAK,GAAGsxB,EAAGxtB,EAAE9D,EAAEC,GAAG,EAAE,CAC1e,SAAS8xB,EAAE/xB,GAAG,IAAI,IAAIC,EAAE,EAAE7D,EAAE,EAAEA,EAAE4D,EAAEpN,SAASwJ,EAAE,CAAC,IAAIgxB,EAAEptB,EAAEgyB,WAAW51B,GAAG,KAAKgxB,EAAEntB,IAAI,MAAMmtB,EAAEntB,GAAG,EAAE,OAAOmtB,GAAG,OAAOA,GAAGntB,GAAG,IAAI7D,GAAG6D,GAAG,CAAC,CAAC,OAAOA,CAAC,CACvI,SAASsxB,EAAGvxB,EAAEC,EAAE7D,EAAEgxB,GAAU,KAAK,EAAEA,GAAG,OAAO,EAAE,IAAIC,EAA9BjxB,KAAK,EAA6BgxB,EAAEhxB,EAAEgxB,EAAE,EAAE,IAAI,IAAIrR,EAAE,EAAEA,EAAE/b,EAAEpN,SAASmpB,EAAE,CAAC,IAAI8V,EAAE7xB,EAAEgyB,WAAWjW,GAAgF,GAA1E,OAAO8V,GAAG,OAAOA,IAA2BA,EAAE,QAAU,KAAFA,IAAS,IAAM,KAA3C7xB,EAAEgyB,aAAajW,IAAoC,KAAK8V,EAAE,CAAC,GAAGz1B,GAAGgxB,EAAE,MAAMntB,EAAE7D,MAAM,GAAGy1B,CAAC,KAAK,CAAC,GAAG,MAAMA,EAAE,CAAC,GAAGz1B,EAAE,GAAGgxB,EAAE,MAAMntB,EAAE7D,MAAM,GAAG,IAAIy1B,GAAG,CAAC,KAAK,CAAC,GAAG,OAAOA,EAAE,CAAC,GAAGz1B,EAAE,GAAGgxB,EAAE,MAAMntB,EAAE7D,MAAM,GAAG,IAAIy1B,GAAG,EAAE,KAAK,CAAC,GAAGz1B,EAAE,GAAGgxB,EAAE,MAAMntB,EAAE7D,MAAM,GAAG,IAAIy1B,GAAG,GAAG5xB,EAAE7D,MAAM,GAAG,IAAIy1B,GAAG,GAAG,EAAE,CAAC5xB,EAAE7D,MAAM,GAAG,IAAIy1B,GAAG,EAAE,EAAE,CAAC5xB,EAAE7D,MAAM,GAAG,IAAM,GAAFy1B,CAAI,CAAC,CAAY,OAAX5xB,EAAE7D,IAAI,GAAG,EAASA,EAAEixB,CAAC,CACnd,SAASgE,EAAGrxB,EAAEC,EAAE7D,GAAG,OAAOm1B,EAAGvxB,EAAE8D,EAAE7D,EAAE7D,EAAE,CAAC,SAAS61B,EAAEjyB,GAAG,OAAO,GAAIA,EAAE,IAAI,GAAIA,EAAE,KAAK,GAAIA,EAAE,IAAI,CAAC,IAAIoxB,EAAG,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAKc,EAAG,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,SAASC,EAAGnyB,GAAG,OAAOiyB,EAAEjyB,EAAEoyB,eAAehB,EAAGc,GAAIlyB,EAAEqyB,YAAYryB,EAAEsyB,UAAU,CAAC,CAAC,SAASC,GAAGvyB,GAAG,IAAIC,EAAE8xB,EAAE/xB,GAAG,EAAE5D,EAAEo2B,GAAGvyB,GAAgB,OAAb7D,GAAGi1B,EAAGrxB,EAAE5D,EAAE6D,GAAU7D,CAAC,CAAC,IAAIq2B,GAAE,CAAC,EAC5U,SAASC,KAAK,IAAIC,GAAE,CAAC,IAAsN1yB,EAAlND,EAAE,CAAC4yB,KAAK,WAAWC,QAAQ,WAAWC,KAAK,IAAIC,IAAI,IAAIC,KAAK,iBAAiBC,MAAM,iBAAiBvgC,WAAWA,UAAUwgC,WAAWxgC,UAAUwgC,UAAU,IAAI,KAAK1F,QAAQ,IAAI,KAAK,SAASl0B,EAAEgzB,GAAG,kBAAoB,IAAIrsB,KAAKwyB,QAAE,IAASA,GAAExyB,UAAUD,EAAEC,GAAGD,EAAEC,GAAGwyB,GAAExyB,GAAG,IAAI7D,EAAE,GAAG,IAAI6D,KAAKD,EAAE5D,EAAEtC,KAAKmG,EAAE,IAAID,EAAEC,IAAI0yB,GAAEv2B,CAAC,CAAC,OAAOu2B,EAAC,CAAC,IAAIA,GAAEQ,GAAG,CAAC,KAAK,GAAG,IAC9D,SAASC,GAAGpzB,GAAG,OAAOozB,GAA1T,WAAc,GAAG,iBAAiBC,QAAQ,mBAAmBA,OAAOC,gBAAgB,OAAOl3B,GAAGi3B,OAAOC,gBAAgBl3B,GAAG,GAAGswB,EAAE,IAAI,IAAI1sB,EAAE,EAAQ,KAAU,GAAGA,EAAEuzB,eAAe,OAAOn3B,GAAG4D,EAAEuzB,eAAen3B,GAAG,IAAI6D,EAAED,EAAEwzB,YAAY,OAAOp3B,IAAIA,EAAE1H,IAAIuL,EAAE7D,EAAErB,aAAaqB,EAAE,CAAC,MAAMA,GAAG,CAAC6yB,EAAE,mBAAmB,CAA0BwE,IAAMzzB,EAAE,CAAC,IAAI0zB,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IACxZ,SAASC,GAAG5zB,EAAEC,EAAE7D,EAAEgxB,GAAG,SAASC,EAAE10B,EAAE+e,EAAEC,GAAG,IAAIhf,EAAE,iBAAiBA,EAAEA,EAAE6yB,WAAW7yB,GAAG,GAAGA,EAAE/F,OAAO8kB,GAAG/e,EAAEgf,EAAE,GAAGhf,EAAE,OAAOA,CAAC,CAAC,SAASojB,EAAEpjB,EAAE+e,GAAG,OAAO2V,EAAE10B,EAAE+e,EAAE,IAAI,CAAC,SAASma,EAAEl5B,EAAE+e,GAAG,SAASC,EAAEkc,GAAI,OAAO,EAAEA,GAAI,EAAE,EAAEA,EAAG,EAAE,CAAC,CAAC,IAAIjmB,EAAmH,OAAjH,KAAKA,EAAE+J,EAAEhf,EAAEy5B,cAAc1a,EAAE0a,iBAAiB,KAAKxkB,EAAE+J,EAAEhf,EAAE05B,WAAW3a,EAAE2a,eAAezkB,EAAE+J,EAAEhf,EAAE25B,UAAU5a,EAAE4a,YAAmB1kB,CAAC,CAAC,SAASkmB,EAAEn7B,GAAG,OAAOA,EAAEo7B,UAAU,KAAK,EAAE,OAAO,IAAIp0B,KAAKhH,EAAEy5B,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAOz5B,EAAE,KAAK,EAAE,OAAO,IAAIgH,KAAKhH,EAAEy5B,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAIzyB,KAAKhH,EAAEy5B,cAChf,EAAE,GAAG,KAAK,EAAE,OAAO,IAAIzyB,KAAKhH,EAAEy5B,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAIzyB,KAAKhH,EAAEy5B,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAO,IAAIzyB,KAAKhH,EAAEy5B,cAAc,EAAE,GAAG,IAAI,CAAC,SAAStwB,EAAEnJ,GAAG,IAAI+e,EAAE/e,EAAEq7B,GAAG,IAAIr7B,EAAE,IAAIgH,KAAK,IAAKA,KAAKhH,EAAEq4B,GAAG,KAAK,EAAE,GAAIiD,WAAW,EAAEvc,GAAG,CAAC,IAAIC,EAAEhf,EAAE05B,WAAWzkB,GAAGqkB,EAAEt5B,EAAEy5B,eAAesB,GAAGC,IAAIhc,GAAG,KAAGD,EAAE9J,EAAEjV,EAAE25B,WAAoH,CAAC35B,EAAEu7B,QAAQv7B,EAAE25B,UAAU5a,GAAG,KAAK,CAAzIA,GAAG9J,EAAEjV,EAAE25B,UAAU,EAAE35B,EAAEu7B,QAAQ,GAAG,GAAGvc,EAAEhf,EAAEw7B,SAASxc,EAAE,IAAIhf,EAAEw7B,SAAS,GAAGx7B,EAAEy7B,YAAYz7B,EAAEy5B,cAAc,GAAwC,CACxa,OADyaza,EAAE,IAAIhY,KAAKhH,EAAEy5B,cAAc,EAAE,EAAE,GAAG1a,EAAEoc,EAAE,IAAIn0B,KAAKhH,EAAEy5B,cACve,EAAE,IAAIza,EAAEmc,EAAEnc,GAAU,GAAGka,EAAEna,EAAE/e,GAAG,GAAGk5B,EAAEla,EAAEhf,GAAGA,EAAEy5B,cAAc,EAAEz5B,EAAEy5B,cAAcz5B,EAAEy5B,cAAc,CAAC,CAAC,IAAIiC,EAAErwB,EAAEopB,EAAE,IAAI,IAAI,GACyE,IAAI,IAAIkH,KAD9ElH,EAAE,CAACmH,GAAGvwB,EAAEopB,GAAG,IAAI,GAAGoH,GAAGxwB,EAAEopB,EAAE,GAAG,IAAI,GAAG8D,GAAGltB,EAAEopB,EAAE,GAAG,IAAI,GAAGoE,GAAGxtB,EAAEopB,EAAE,IAAI,IAAI,GAAGqH,GAAGzwB,EAAEopB,EAAE,IAAI,IAAI,GAAG4D,GAAGhtB,EAAEopB,EAAE,IAAI,IAAI,GAAGoD,GAAGxsB,EAAEopB,EAAE,IAAI,IAAI,GAAG4G,GAAGhwB,EAAEopB,EAAE,IAAI,IAAI,GAAG+E,GAAGnuB,EAAEopB,EAAE,IAAI,IAAI,GAAGyG,GAAG7vB,EAAEopB,EAAE,IAAI,IAAI,GAAG8E,GAAGmC,EAAEvC,EAAEuC,GAAG,IAAIj4B,EAAE01B,EAAE11B,GAAGi4B,EAAE,CAAC,KAAK,uBAAuB,KAAK,WAAW,KAAK,WAAW,KAAK,KAAK,KAAK,cAAc,KAAK,QAAQ,KAAK,WAAW,KAAK,WAAW,KAAK,WAAW,MAAM,KAAK,MAAM,KAAK,MAAM,WAC7e,MAAM,WAAW,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,MAAqBj4B,EAAEA,EAAEoxB,QAAQ,IAAIkH,OAAOJ,EAAE,KAAKD,EAAEC,IAAI,IAAIE,EAAG,2DAA2DG,MAAM,KAAKJ,EAAG,wFAAwFI,MAAM,KAG5F,IAAIL,KAH6FD,EAAE,CAAC,KAAK,SAAS17B,GAAG,OAAO67B,EAAG77B,EAAE63B,IAAIoE,UAAU,EAAE,EAAE,EAAE,KAAK,SAASj8B,GAAG,OAAO67B,EAAG77B,EAAE63B,GAAG,EAAE,KAAK,SAAS73B,GAAG,OAAO47B,EAAG57B,EAAE87B,IAAIG,UAAU,EAC9hB,EAAE,EAAE,KAAK,SAASj8B,GAAG,OAAO47B,EAAG57B,EAAE87B,GAAG,EAAE,KAAK,SAAS97B,GAAG,OAAOojB,GAAGpjB,EAAEq4B,GAAG,MAAM,IAAI,EAAE,EAAE,EAAE,KAAK,SAASr4B,GAAG,OAAOojB,EAAEpjB,EAAE64B,GAAG,EAAE,EAAE,KAAK,SAAS74B,GAAG,OAAO00B,EAAE10B,EAAE64B,GAAG,EAAE,IAAI,EAAE,KAAK,SAAS74B,GAAG,OAAOmJ,EAAEnJ,GAAG6yB,WAAWoJ,UAAU,EAAE,EAAE,KAAK,SAASj8B,GAAG,OAAOmJ,EAAEnJ,EAAE,EAAE,KAAK,SAASA,GAAG,OAAOojB,EAAEpjB,EAAEu4B,GAAG,EAAE,EAAE,KAAK,SAASv4B,GAAkC,OAAxB,IAAPA,EAAEA,EAAEu4B,IAAQv4B,EAAE,GAAG,GAAGA,IAAIA,GAAG,IAAWojB,EAAEpjB,EAAE,EAAE,EAAE,KAAK,SAASA,GAAG,IAAI,IAAI+e,EAAE,EAAEC,EAAE,EAAEA,GAAGhf,EAAE87B,GAAG,EAAE/c,IAAIua,EAAEt5B,EAAEq4B,GAAG,MAAM0C,GAAGC,IAAIhc,MAAM,OAAOoE,EAAEpjB,EAAE64B,GAAG9Z,EAAE,EAAE,EAAE,KAAK,SAAS/e,GAAG,OAAOojB,EAAEpjB,EAAE87B,GAAG,EAAE,EAAE,EAAE,KAAK,SAAS97B,GAAG,OAAOojB,EAAEpjB,EAAE67B,GACpf,EAAE,EAAE,KAAK,WAAW,MAAM,IAAI,EAAE,KAAK,SAAS77B,GAAG,OAAO,GAAGA,EAAEu4B,IAAI,GAAGv4B,EAAEu4B,GAAG,KAAK,IAAI,EAAE,KAAK,SAASv4B,GAAG,OAAOojB,EAAEpjB,EAAE47B,GAAG,EAAE,EAAE,KAAK,WAAW,MAAM,IAAI,EAAE,KAAK,SAAS57B,GAAG,OAAOA,EAAE63B,IAAI,CAAC,EAAE,KAAK,SAAS73B,GAAG,OAAOojB,EAAEjpB,KAAKyQ,OAAO5K,EAAEq7B,GAAG,EAAEr7B,EAAE63B,IAAI,GAAG,EAAE,EAAE,KAAK,SAAS73B,GAAG,IAAI+e,EAAE5kB,KAAKyQ,OAAO5K,EAAEq7B,GAAG,GAAGr7B,EAAE63B,GAAG,GAAG,GAAG,GAA+B,GAA5B,IAAI73B,EAAE63B,GAAG,IAAI73B,EAAEq7B,GAAG,GAAG,GAAGtc,IAAOA,EAAE,IAAIA,IAAwB,IAApBC,GAAGhf,EAAE63B,GAAG,IAAI73B,EAAEq7B,IAAI,IAAQ,GAAGrc,GAAGsa,EAAEt5B,EAAEq4B,MAAMtZ,EAAE,QAAQ,CAACA,EAAE,GAAG,IAAIC,GAAGhf,EAAE63B,GAAG,EAAE73B,EAAEq7B,GAAG,GAAG,GAAG,GAAGrc,GAAG,GAAGA,GAAGsa,EAAEt5B,EAAEq4B,GAAG,IAAI,KAAKtZ,GAAG,CAAC,OAAOqE,EAAErE,EAAE,EAAE,EAAE,KAAK,SAAS/e,GAAG,OAAOA,EAAE63B,EAAE,EAAE,KAAK,SAAS73B,GAAG,OAAOojB,EAAEjpB,KAAKyQ,OAAO5K,EAAEq7B,GACxhB,GAAGr7B,EAAE63B,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,KAAK,SAAS73B,GAAG,OAAOA,EAAEq4B,GAAG,MAAMxF,WAAWoJ,UAAU,EAAE,EAAE,KAAK,SAASj8B,GAAG,OAAOA,EAAEq4B,GAAG,IAAI,EAAE,KAAK,SAASr4B,GAAU,IAAI+e,EAAE,IAAb/e,EAAEA,EAAEk7B,IAA+B,OAAjBl7B,EAAE7F,KAAK0U,IAAI7O,GAAG,IAAU+e,EAAE,IAAI,KAAKia,OAAO,QAAQh5B,EAAE,GAAG,IAAIA,EAAE,KAAKoJ,OAAO,EAAE,EAAE,KAAK,SAASpJ,GAAG,OAAOA,EAAEu5B,EAAE,EAAE,KAAK,WAAW,MAAM,GAAG,GAAG91B,EAAEA,EAAEoxB,QAAQ,MAAM,QAAqB6G,EAAEj4B,EAAEy4B,SAASP,KAAKl4B,EAAEA,EAAEoxB,QAAQ,IAAIkH,OAAOJ,EAAE,KAAKD,EAAEC,GAAGlH,KAAsC,OAARkH,EAPI,SAAYt0B,GAAG,IAAIC,EAAEU,MAAMoxB,EAAE/xB,GAAG,GAAsB,OAAnBuxB,EAAGvxB,EAAEC,EAAE,EAAEA,EAAErN,QAAeqN,CAAC,CAOhE60B,CAA3B14B,EAAEA,EAAEoxB,QAAQ,QAAQ,MAAgB8G,EAAE1hC,OAAOqN,EAAS,GAAEkvB,EAAEz6B,IAAI4/B,EAAEt0B,IAAI,GAAUs0B,EAAE1hC,OAAO,EAAC,CACvd,IAAImiC,GAAG,CAAC/0B,EAAE,SAASA,EAAEC,EAAE7D,GAAiC,MAA9B,IAAK80B,EAAGlxB,GAAIsxB,GAAGrxB,EAAE7D,GAAM4D,CAAgB,EAAE6xB,EAAE,WAAW5C,EAAE,iHAAiH,EAAE7B,EAAE,WAAW,OAAO,CAAC,EAAErpB,EAAE,WAAW,EAAEswB,EAAE,WAAW,EAAE1yB,EAAE,WAAW,EAAEmC,EAAE,WAAW,OAAO,CAAC,EAAEmrB,EAAE,WAAW,EAAE7C,EAAE,WAAW,EAAEmC,EAAE,WAAW,EAAEyG,EAAE,WAAW,EAAE1I,EAAE,WAAW,EAAE2I,EAAE,WAAW,EAAE/F,EAAE,WAAW,EAAErM,EAAE,WAAW,EAAE9G,EAAE,WAAW,OAAM,CAAE,EAAE2Q,EAAE,SAAS1sB,EAAEC,GAAGD,EAAE,IAAIL,KAAK,KAAKyvB,EAAEpvB,IAAI,GAAG,WAAWgE,EAAEhE,EAAE,IAAI,KAAKgE,EAAE/D,GAClf,IAAI,GAAGD,EAAEk1B,gBAAgBlxB,EAAE/D,EAAE,GAAG,IAAI,GAAGD,EAAEm1B,gBAAgBnxB,EAAE/D,EAAE,GAAG,IAAI,GAAGD,EAAEo1B,cAAcpxB,EAAE/D,EAAE,IAAI,IAAI,GAAGD,EAAEq1B,aAAarxB,EAAE/D,EAAE,IAAI,IAAI,GAAGD,EAAEs1B,cAActxB,EAAE/D,EAAE,IAAI,IAAI,GAAGD,EAAEu1B,iBAAiB,KAAKvxB,EAAE/D,EAAE,IAAI,IAAI,GAAGD,EAAEw1B,YAAYxxB,EAAE/D,EAAE,IAAI,IAAI,IAAID,EAAEi0B,UAAUt0B,KAAK81B,IAAIz1B,EAAEu1B,iBAAiB,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,MAAM,CAAC,EAAE5I,EAAE,SAAS3sB,EAAEC,GAAGD,EAAE,IAAIL,KAAK,KAAKyvB,EAAEpvB,IAAI,GAAG,WAAWgE,EAAEhE,EAAE,IAAI,KAAKgE,EAAE/D,GAAG,IAAI,GAAGD,EAAE01B,aAAa1xB,EAAE/D,EAAE,GAAG,IAAI,GAAGD,EAAE21B,aAAa3xB,EAAE/D,EAAE,GAAG,IAAI,GAAGD,EAAE41B,WAAW5xB,EAAE/D,EAAE,IAAI,IAAI,GAAGD,EAAEsyB,UAAUtuB,EAAE/D,EAAE,IAAI,IAAI,GAAGD,EAAEqyB,WAAWruB,EAAE/D,EACpf,IAAI,IAAI,GAAGD,EAAEoyB,cAAc,KAAKpuB,EAAE/D,EAAE,IAAI,IAAI,GAAGD,EAAE+zB,SAAS/vB,EAAE/D,EAAE,IAAI,IAAI,GAAS,EAANkyB,EAAGnyB,GAAKgE,EAAE/D,EAAE,IAAI,IAAI,IAAK,GAAGD,EAAE61B,oBAAqB,IAAIz5B,EAAE,IAAKuD,KAAKK,EAAEoyB,cAAc,EAAE,GAAIyD,oBAAoBzI,EAAE,IAAKztB,KAAKK,EAAEoyB,cAAc,EAAE,GAAIyD,oBAAoB7xB,EAAE/D,EAAE,IAAI,IAAI,GAAgD,GAA5C7D,GAAGgxB,GAAGptB,EAAE61B,qBAAqB/iC,KAAKC,IAAIq6B,EAAEhxB,GAAK,EAAE+vB,EAAE,SAASnsB,GAAG,IAAIC,EAAE,IAAIN,KAAKqE,EAAEhE,EAAE,IAAI,IAAI,GAAG,KAAKgE,EAAEhE,EAAE,IAAI,IAAI,GAAGgE,EAAEhE,EAAE,IAAI,IAAI,GAAGgE,EAAEhE,EAAE,GAAG,IAAI,GAAGgE,EAAEhE,EAAE,GAAG,IAAI,GAAGgE,EAAEhE,GAAG,IAAI,GAAG,GAAG5D,EAAE4H,EAAEhE,EAAE,IAAI,IAAI,GAAGotB,EAAEntB,EAAE41B,oBAAoBxI,EAAE,IAAK1tB,KAAKM,EAAEmyB,cAAc,EAAE,GAAIyD,oBAChf9Z,EAAE,IAAKpc,KAAKM,EAAEmyB,cAAc,EAAE,GAAIyD,oBAAoBhE,EAAE/+B,KAAKC,IAAIgpB,EAAEsR,GAAuU,OAApU,EAAEjxB,EAAE4H,EAAEhE,EAAE,IAAI,IAAI,GAAGzN,OAAO86B,GAAGtR,GAAG8V,GAAGzE,GAAG,EAAEhxB,IAAIy1B,GAAGzE,KAAKC,EAAEv6B,KAAK2N,IAAIsb,EAAEsR,GAAGptB,EAAE61B,QAAQ71B,EAAEg0B,UAAU,MAAM,EAAE73B,EAAEy1B,EAAExE,GAAGD,KAAKppB,EAAEhE,EAAE,IAAI,IAAI,GAAGC,EAAE8zB,SAAS/vB,EAAEhE,EAAE,IAAI,IAAI,GAAS,EAANmyB,EAAGlyB,GAAK+D,EAAEhE,GAAG,IAAI,GAAGC,EAAEy1B,aAAa1xB,EAAEhE,EAAE,GAAG,IAAI,GAAGC,EAAE01B,aAAa3xB,EAAEhE,EAAE,GAAG,IAAI,GAAGC,EAAE21B,WAAW5xB,EAAEhE,EAAE,IAAI,IAAI,GAAGC,EAAEqyB,UAAUtuB,EAAEhE,EAAE,IAAI,IAAI,GAAGC,EAAEoyB,WAAWruB,EAAEhE,EAAE,IAAI,IAAI,GAAGC,EAAE81B,UAAiB91B,EAAEg0B,UAAU,IAAI,CAAC,EAAEtmB,EAAE,WAAW,OAAO,EAAE,EAAEC,EAAE,WAAW,EAAEkmB,EAAE,SAAS9zB,EAAEC,EAAE7D,GAAG,SAASgxB,EAAEtrB,GAAG,OAAOA,EAAEA,EAAEk0B,eAAeC,MAAM,sBAC3gBn0B,EAAE,GAAG,KAAK,CAAC,IAAIurB,GAAE,IAAK1tB,MAAMyyB,cAAcrW,EAAE,IAAIpc,KAAK0tB,EAAE,EAAE,GAAGwE,EAAE,IAAIlyB,KAAK0tB,EAAE,EAAE,GAAGA,EAAEtR,EAAE8Z,oBAAoB,IAAI/B,EAAEjC,EAAEgE,oBAAoBzG,EAAEpvB,GAAG,IAAI,GAAG,GAAGlN,KAAK2N,IAAI4sB,EAAEyG,GAAG9vB,EAAE/D,GAAG,IAAI,GAAG1N,OAAO86B,GAAGyG,GAAG9zB,EAAEotB,EAAErR,GAAG9b,EAAEmtB,EAAEyE,GAAG7xB,EAAEuyB,GAAGvyB,GAAGC,EAAEsyB,GAAGtyB,GAAG6zB,EAAEzG,GAAG+B,EAAEhzB,GAAG,IAAI,GAAG4D,EAAEovB,EAAEhzB,EAAE,GAAG,IAAI,GAAG6D,IAAImvB,EAAEhzB,GAAG,IAAI,GAAG6D,EAAEmvB,EAAEhzB,EAAE,GAAG,IAAI,GAAG4D,EAAE,EAAErH,EAAE,WAAWs2B,EAAE,GAAG,EAAEN,EAAE,WAAWM,EAAE,iHAAiH,EAAE5B,EAAE,WAAW,OAAO1tB,KAAKu2B,KAAK,EAAE5B,EAAE,WAAW,OAAO,UAAU,EAAEr0B,EAAEysB,EACnf,KAAK,IAAI1sB,EAAEiiB,QAAQkU,SAAS,OAAO,IAAIn2B,EAAE,GAAGA,EAAE,GAAG,KAAK,IAAIo2B,YAAYF,MAAM/G,EAAE,SAASnvB,EAAEC,EAAE7D,GAAG0H,EAAEuyB,WAAWr2B,IAAI,EAAEC,IAAI,EAAEA,EAAE7D,IAAI,EAAE,EAAEusB,EAAE,SAAS3oB,GAAG,IAAIC,EAAE6D,EAAElR,OAAc,GAAG,YAAVoN,KAAK,GAAkB,OAAM,EAAG,IAAI,IAAI5D,EAAE,EAAE,GAAGA,EAAEA,GAAG,EAAE,CAAC,IAAIgxB,EAAEntB,GAAG,EAAE,GAAG7D,GAAGgxB,EAAEt6B,KAAKC,IAAIq6B,EAAEptB,EAAE,WAAW,IAAIqtB,EAAEv6B,KAAKipB,EAAEsR,EAAEt6B,IAAIq6B,EAAEt6B,KAAK2N,IAAIT,EAAEotB,GAAGA,IAAI,MAAMA,EAAE,OAAO,MAAMptB,EAAE,CAAC,IAAI6xB,EAAE3C,EAAEtyB,OAAO,IAAIsyB,EAAEoH,KAAKva,EAAEvD,KAAK6U,EAAE,WAAWD,GAAGyE,EAAE92B,WAAW,QAAQ,IAAIs0B,IAAK,IAAIyE,EAAE,EAAE,MAAM9zB,CAAC,CAAC,MAAM8B,GAAG,CAACgyB,OAAE,CAAM,CAAC,GAAGA,EAAE,OAAM,CAAE,CAAC,OAAM,CAAE,EAAEzH,EAAE,SAASrsB,EAAEC,GAAG,IAAI7D,EAAE,EAC3W,OAD6Ws2B,KAAKvX,SAAQ,SAASiS,EACvfC,GAAG,IAAItR,EAAE9b,EAAE7D,EAAsB,IAApBixB,EAAE+B,EAAEpvB,EAAE,EAAEqtB,GAAG,IAAI,GAAGtR,EAAMA,EAAE,EAAEA,EAAEqR,EAAEx6B,SAASmpB,EAAEoT,EAAE9B,KAAK,IAAI,GAAGD,EAAE4E,WAAWjW,GAAGoT,EAAE9B,GAAG,IAAI,GAAG,EAAEjxB,GAAGgxB,EAAEx6B,OAAO,CAAC,IAAU,CAAC,EAAEi6B,EAAE,SAAS7sB,EAAEC,GAAG,IAAI7D,EAAEs2B,KAAKtD,EAAEpvB,GAAG,IAAI,GAAG5D,EAAExJ,OAAO,IAAIw6B,EAAE,EAAsD,OAApDhxB,EAAE+e,SAAQ,SAASkS,GAAGD,GAAGC,EAAEz6B,OAAO,CAAC,IAAGw8B,EAAEnvB,GAAG,IAAI,GAAGmtB,EAAS,CAAC,EAAE1V,EAAE,SAAS1X,GAAOgvB,IAAkBhD,EAAEuK,QAAOvK,EAAEuK,OAAOv2B,GAAG+D,GAAE,GAAGpC,EAAE3B,EAAE,IAAIgxB,EAAGhxB,GAAG,EAAE5D,EAAE,WAAW,OAAO,EAAE,EAAEjE,EAAE,WAAW,OAAO,EAAE,EAAEwf,EAAE,WAAW,OAAO,EAAE,EAAEsU,EAAE,SAASjsB,EAAEC,EAAE7D,EAAEgxB,GAAG,IAAI,IAAIC,EAAE,EAAEtR,EAAE,EAAEA,EAAE3f,EAAE2f,IAAI,CAAC,IAAI8V,EAAEzC,EAAEnvB,GAAG,IAAI,GAAG6zB,EAAE1E,EAAEnvB,EAAE,GAAG,IAAI,GAAGA,GAAG,EAAE,IAAI,IAAI6B,EAAE,EAAEA,EAAEgyB,EAAEhyB,IAAI,CAAC,IAAIuyB,EACvfvwB,EAAE+tB,EAAE/vB,IAAI,GAAGwyB,EAAEnB,GAAGnzB,GAAG,IAAIq0B,GAAG,KAAKA,IAAI,IAAIr0B,EAAEwuB,EAAGG,GAAG2C,EAAGgD,EAAE,IAAIA,EAAE1hC,OAAO,GAAG0hC,EAAEx6B,KAAKu6B,EAAE,CAAChH,GAAGyG,CAAC,CAAe,OAAd1E,EAAEhC,GAAG,IAAI,GAAGC,EAAS,CAAC,EAAEmJ,EAAE,SAASx2B,EAAEC,GAAiC,OAA9BmzB,GAAGtvB,EAAE/E,SAASiB,IAAI,EAAEA,EAAEC,IAAI,IAAW,CAAC,EAAE6B,EAAE8xB,GAAG5H,EAAE,SAAShsB,EAAEC,EAAE7D,EAAEgxB,GAAG,OAAOwG,GAAG5zB,EAAEC,EAAE7D,EAAEgxB,EAAE,IAC9M,WAAY,SAASptB,EAAE5D,GAAoH,GAAjHA,EAAEA,EAAExK,QAAQo6B,EAAEyK,IAAIr6B,EAAE8yB,EAAElD,EAAEyK,IAAIzyB,EAAEqrB,IAAKM,EAAGK,QAAQhE,EAAEyK,IAAIrH,GAAGc,IAAIlE,EAAE0K,wBAAwB1K,EAAE0K,uBAAuBxG,GAAM,GAAGA,IAAI,OAAOC,IAAIwG,cAAcxG,GAAGA,EAAE,MAAMC,GAAG,CAAC,IAAIhD,EAAEgD,EAAEA,EAAE,KAAKhD,GAAG,CAAC,OAAOhxB,CAAC,CAAC,IAAI6D,EAAE,CAACD,EAAE+0B,IAA8D,GAA1D7E,IAAIlE,EAAE0K,wBAAwB1K,EAAE0K,uBAAuBxG,GAAMlE,EAAE4K,gBAAgB,IAAI,OAAO5K,EAAE4K,gBAAgB32B,EAAED,EAAE,CAAC,MAAM5D,GAAGuyB,EAAE,sDAAsDvyB,GAAGusB,EAAEvsB,EAAE,EAvB/Z,SAAY4D,EAAEC,GAAG,IAAI7D,EAAE6zB,EAAE,OAAO1B,GAAG,mBAAmB1E,YAAYgN,sBAAsBtG,EAAGn0B,IAAIA,EAAE4wB,WAAW,YAAYN,GAAG,mBAAmB1K,MAAM0O,EAAGt0B,EAAE4D,EAAEC,GAAG+hB,MAAM5lB,EAAE,CAACu0B,YAAY,gBAAgBtpB,MAAK+lB,GAAGvD,YAAYgN,qBAAqBzJ,EAAEptB,GAAGqH,KAAKpH,GAAE,SAASotB,GAAyF,OAAtFsB,EAAE,kCAAkCtB,GAAGsB,EAAE,6CAAoD+B,EAAGt0B,EAAE4D,EAAEC,EAAE,KAAG,EAuBmD+zB,CAAG/zB,GAAE,SAAS7D,GAAG4D,EAAE5D,EAAE06B,SAAS,IAAGjG,MAAMlI,EAAY,CAAnd,GACAqD,EAAErG,SAAS,WAAW,OAAOqG,EAAErG,SAASqG,EAAEyK,IAAIvG,GAAG6G,MAAM,KAAKC,UAAU,EAAEhL,EAAEN,iBAAiB,WAAW,OAAOM,EAAEN,iBAAiBM,EAAEyK,IAAItG,GAAG4G,MAAM,KAAKC,UAAU,EAAEhL,EAAE7H,yBAAyB,WAAW,OAAO6H,EAAE7H,yBAAyB6H,EAAEyK,IAAIrG,GAAG2G,MAAM,KAAKC,UAAU,EAAEhL,EAAEpH,4BAA4B,WAAW,OAAOoH,EAAEpH,4BAA4BoH,EAAEyK,IAAIxG,GAAG8G,MAAM,KAAKC,UAAU,EAAEhL,EAAEvH,0BAA0B,WAAW,OAAOuH,EAAEvH,0BAA0BuH,EAAEyK,IAAIxF,GAAG8F,MAAM,KAAKC,UAAU,EAC9dhL,EAAElH,0BAA0B,WAAW,OAAOkH,EAAElH,0BAA0BkH,EAAEyK,IAAI3E,GAAGiF,MAAM,KAAKC,UAAU,EAAEhL,EAAE9F,kBAAkB,WAAW,OAAO8F,EAAE9F,kBAAkB8F,EAAEyK,IAAI1E,GAAGgF,MAAM,KAAKC,UAAU,EAAEhL,EAAEpF,mBAAmB,WAAW,OAAOoF,EAAEpF,mBAAmBoF,EAAEyK,IAAIxE,GAAG8E,MAAM,KAAKC,UAAU,EAAEhL,EAAE5F,wBAAwB,WAAW,OAAO4F,EAAE5F,wBAAwB4F,EAAEyK,IAAIhE,GAAGsE,MAAM,KAAKC,UAAU,EAAEhL,EAAEzF,iBAAiB,WAAW,OAAOyF,EAAEzF,iBAAiByF,EAAEyK,IAAI9D,GAAGoE,MAAM,KAAKC,UAAU,EAC5dhL,EAAEvF,kBAAkB,WAAW,OAAOuF,EAAEvF,kBAAkBuF,EAAEyK,IAAIQ,GAAGF,MAAM,KAAKC,UAAU,EAAEhL,EAAErF,SAAS,WAAW,OAAOqF,EAAErF,SAASqF,EAAEyK,IAAIn9B,GAAGy9B,MAAM,KAAKC,UAAU,EAAEhL,EAAE3E,iBAAiB,WAAW,OAAO2E,EAAE3E,iBAAiB2E,EAAEyK,IAAIS,GAAGH,MAAM,KAAKC,UAAU,EAAEhL,EAAE3D,kBAAkB,WAAW,OAAO2D,EAAE3D,kBAAkB2D,EAAEyK,IAAIlK,IAAIwK,MAAM,KAAKC,UAAU,EAAEhL,EAAEtD,kBAAkB,WAAW,OAAOsD,EAAEtD,kBAAkBsD,EAAEyK,IAAIjI,IAAIuI,MAAM,KAAKC,UAAU,EAC9ahL,EAAE9K,qBAAqB,WAAW,OAAO8K,EAAE9K,qBAAqB8K,EAAEyK,IAAIpH,IAAI0H,MAAM,KAAKC,UAAU,EAAEhL,EAAEtK,sBAAsB,WAAW,OAAOsK,EAAEtK,sBAAsBsK,EAAEyK,IAAI/G,IAAIqH,MAAM,KAAKC,UAAU,EAAEhL,EAAErK,sBAAsB,WAAW,OAAOqK,EAAErK,sBAAsBqK,EAAEyK,IAAI9G,IAAIoH,MAAM,KAAKC,UAAU,EAAEhL,EAAEhE,QAAQ,WAAW,OAAOgE,EAAEhE,QAAQgE,EAAEyK,IAAI7G,IAAImH,MAAM,KAAKC,UAAU,EAAEhL,EAAEnD,iBAAiB,WAAW,OAAOmD,EAAEnD,iBAAiBmD,EAAEyK,IAAIU,IAAIJ,MAAM,KAAKC,UAAU,EACrc,IAAwaC,GAApazE,GAAGxG,EAAElG,QAAQ,WAAW,OAAO0M,GAAGxG,EAAElG,QAAQkG,EAAEyK,IAAI5G,IAAIkH,MAAM,KAAKC,UAAU,EAAqE,SAASI,KAAK,OAAOA,GAAGpL,EAAEyK,IAAIhG,IAAIsG,MAAM,KAAKC,UAAU,CAAC,SAASK,KAAK,OAAOA,GAAGrL,EAAEyK,IAAI3F,IAAIiG,MAAM,KAAKC,UAAU,CAAC,SAASM,KAAK,OAAOA,GAAGtL,EAAEyK,IAAI/F,IAAIqG,MAAM,KAAKC,UAAU,CAC3T,SAASO,KAAK,SAASv3B,IAAI,IAAIi3B,KAAIA,IAAE,EAAGjL,EAAEwL,WAAU,GAAIzzB,GAAG,CAA+D,GAA9DktB,EAAEtB,GAAI1D,EAAED,GAAMA,EAAEyL,sBAAqBzL,EAAEyL,uBAA0BzL,EAAE0L,QAAQ,IAAI,mBAAmB1L,EAAE0L,UAAU1L,EAAE0L,QAAQ,CAAC1L,EAAE0L,UAAU1L,EAAE0L,QAAQ9kC,QAAQ,CAAC,IAAIqN,EAAE+rB,EAAE0L,QAAQ3H,QAAQH,EAAGI,QAAQ/vB,EAAE,CAACgxB,EAAErB,EAAG,CAAC,CAAC,KAAK,EAAEM,GAAG,CAAC,GAAGlE,EAAE8D,OAAO,IAAI,mBAAmB9D,EAAE8D,SAAS9D,EAAE8D,OAAO,CAAC9D,EAAE8D,SAAS9D,EAAE8D,OAAOl9B,QAAQi9B,IAAKoB,EAAEvB,GAAI,EAAEQ,IAAIlE,EAAE2L,WAAW3L,EAAE2L,UAAU,cAAclN,YAAW,WAAWA,YAAW,WAAWuB,EAAE2L,UAAU,GAAG,GAAE,GAAG33B,GAAG,GAAE,IAAIA,IAAI,CAAC,CACte,GAFiFgsB,EAAEpK,MAAM,WAAW,OAAOoK,EAAEpK,MAAMoK,EAAEyK,IAAIlG,IAAIwG,MAAM,KAAKC,UAAU,EAA0KhL,EAAE3tB,WAAWi5B,GAAGtL,EAAE5tB,UAAUg5B,GAAGpL,EAAExtB,aAAa64B,GAAGrL,EAAExF,aAAasL,EAAE9F,EAAEX,aAAagG,EAAGrF,EAAEZ,gBAAgB2G,EAAQ3B,EAAE,SAASwH,IAAKX,IAAGM,KAAKN,KAAI7G,EAAEwH,EAAG,EAExc5L,EAAE6L,QAAQ,IAAI,mBAAmB7L,EAAE6L,UAAU7L,EAAE6L,QAAQ,CAAC7L,EAAE6L,UAAU,EAAE7L,EAAE6L,QAAQjlC,QAAQo5B,EAAE6L,QAAQC,KAAV9L,GAGzF,OAH2GuL,KAGpGzL,EAAQI,KAGjB,GAGEr6B,EAAOD,QAAUk6B,C,6GClDnBxnB,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,IACtD3vB,EAAQomC,eAAiBpmC,EAAQ+B,qBAAkB,EACnD,MAAMskC,EAAW,CAAC,EACZC,EAA2B,GA2CjCtmC,EAAQ+B,gBAhCgB,CAACmF,EAAMqE,EAASg7B,KACpC,IAAIh7B,GAAmC,mBAAjBA,EAAQsB,MAA+D,mBAAjCtB,EAAQi7B,qBA6BpE,MAAM,IAAIlR,UAAU,uBA7BpB,CACI,MAAMmR,EAAiBJ,EAASn/B,GAChC,QAAuBqD,IAAnBk8B,EACAJ,EAASn/B,GAAQ,CAAEqE,UAASg7B,gBAE3B,IAAIE,EAAeF,SAAWA,EAE/B,OAEC,GAAIE,EAAeF,WAAaA,GAC7BE,EAAel7B,UAAYA,EAC3B,MAAM,IAAI7I,MAAM,4BAA4BwE,qBAAwBq/B,IAE5E,CACA,GAAIA,GAAY,EAAG,CACf,MAAMhgC,EAAI+/B,EAAyBlc,QAAQljB,IAChC,IAAPX,GACA+/B,EAAyBljB,OAAO7c,EAAG,GAEvC,IAAK,IAAIA,EAAI,EAAGA,EAAI+/B,EAAyBtlC,OAAQuF,IACjD,GAAI8/B,EAASC,EAAyB//B,IAAIggC,UAAYA,EAElD,YADAD,EAAyBljB,OAAO7c,EAAG,EAAGW,GAI9Co/B,EAAyBp+B,KAAKhB,EAClC,CAEJ,CAC0C,EA6C9ClH,EAAQomC,eAlCe/kC,MAAOqlC,IAC1B,MAAMC,EAAuC,IAAxBD,EAAa1lC,OAAeslC,EAA2BI,EACtEE,EAAS,GACf,IAAK,MAAMC,KAAeF,EAAc,CACpC,MAAMG,EAAcT,EAASQ,GAC7B,GAAIC,EAAa,CACb,GAAIA,EAAYvP,YACZ,OAAOuP,EAAYv7B,QAElB,GAAIu7B,EAAYrP,QACjB,SAEJ,MAAMsP,IAAmBD,EAAYE,YACrC,IAMI,OALKD,IACDD,EAAYE,YAAcF,EAAYv7B,QAAQsB,cAE5Ci6B,EAAYE,YAClBF,EAAYvP,aAAc,EACnBuP,EAAYv7B,OACvB,CACA,MAAOf,GACEu8B,GACDH,EAAO1+B,KAAK,CAAEhB,KAAM2/B,EAAaI,IAAKz8B,IAE1Cs8B,EAAYrP,SAAU,CAC1B,CACA,eACWqP,EAAYE,WACvB,CACJ,CACJ,CACA,MAAM,IAAItkC,MAAM,oCAAoCkkC,EAAO9/B,KAAI0D,GAAK,IAAIA,EAAEtD,SAASsD,EAAEy8B,QAAOjgC,KAAK,QAAQ,C,8BCvF7G0L,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,IACtD3vB,EAAQ+B,qBAAkB,EAC1B,IAAImlC,EAAoB,EAAQ,KAChCx0B,OAAOyzB,eAAenmC,EAAS,kBAAmB,CAAEmnC,YAAY,EAAMtkC,IAAK,WAAc,OAAOqkC,EAAkBnlC,eAAiB,G,8BCHnI2Q,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,IACtD3vB,EAAQK,SAAM,EACd,MAAM+mC,EAAe,EAAQ,MAC7B,IAAIC,EAAgB,UACpBrnC,EAAQK,IAAM,CACVC,KAAM,CAAC,EACPgnC,MAAO,CAAC,EACR5jC,OAAQ,CAAC,EACT1B,SAAU,CAAEulC,OAAQH,EAAallC,SAC7BqC,aAASorB,GACT,QAAcplB,IAAVolB,EAAJ,CAGA,GAAqB,iBAAVA,IAA2F,IAArE,CAAC,UAAW,OAAQ,UAAW,QAAS,SAASvF,QAAQuF,GACtF,MAAM,IAAIjtB,MAAM,8BAA8BitB,KAElD0X,EAAgB1X,CAJhB,CAKJ,EACIprB,eACA,OAAO8iC,CACX,GAGJ30B,OAAOyzB,eAAenmC,EAAQK,IAAK,WAAY,CAAE8mC,YAAY,G,8BCvB7Dz0B,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,IACtD3vB,EAAQK,SAAM,EACd,MAAMmnC,EAAgB,EAAQ,MAI9BxnC,EAAQK,IAAMmnC,EAAcnnC,G,oCCN5B,IAAIonC,EAAmBhlC,MAAQA,KAAKglC,kBAAqB/0B,OAAOpJ,OAAS,SAAUs7B,EAAG9e,EAAGqE,EAAGud,QAC7En9B,IAAPm9B,IAAkBA,EAAKvd,GAC3B,IAAIwd,EAAOj1B,OAAOk1B,yBAAyB9hB,EAAGqE,GACzCwd,KAAS,QAASA,GAAQ7hB,EAAE+hB,WAAaF,EAAKG,UAAYH,EAAKI,gBAClEJ,EAAO,CAAER,YAAY,EAAMtkC,IAAK,WAAa,OAAOijB,EAAEqE,EAAI,IAE5DzX,OAAOyzB,eAAevB,EAAG8C,EAAIC,EAChC,EAAI,SAAU/C,EAAG9e,EAAGqE,EAAGud,QACTn9B,IAAPm9B,IAAkBA,EAAKvd,GAC3Bya,EAAE8C,GAAM5hB,EAAEqE,EACb,GACG6d,EAAgBvlC,MAAQA,KAAKulC,cAAiB,SAASliB,EAAG9lB,GAC1D,IAAK,IAAI+2B,KAAKjR,EAAa,YAANiR,GAAoBrkB,OAAOu1B,UAAUthB,eAAeC,KAAK5mB,EAAS+2B,IAAI0Q,EAAgBznC,EAAS8lB,EAAGiR,EAC3H,EACArkB,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,IAgBtDqY,EAAa,EAAQ,MAAiBhoC,GACtCgoC,EAAa,EAAQ,MAAahoC,GAClCgoC,EAAa,EAAQ,MAA2BhoC,GAChDgoC,EAAa,EAAQ,KAAgBhoC,GACrCgoC,EAAa,EAAQ,MAAoBhoC,E,8BClCzC0S,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,IACtD3vB,EAAQkoC,sBAAmB,EAC3B,MAAMhB,EAAoB,EAAQ,KAC5BiB,EAAc,EAAQ,KAC5B,MAAMD,EACFx9B,YAAYjJ,GACRgB,KAAKhB,QAAUA,CACnB,CACAJ,UAAUuvB,EAAOwX,EAAMC,GACnB,MAAMxX,EAAU,CAAC,EACjB,IAAIrvB,EAAU,CAAC,EAEf,GAAqB,iBAAVovB,GAAgC,OAAVA,GAAkBA,aAAiBuX,EAAYhX,QAAUpiB,MAAMsmB,QAAQzE,GACpG,MAAM,IAAI0E,UAAU,iGAExB,IAAIgT,GAAiB,EAErB,GAAoB,iBAATF,EAAmB,CAC1B,GAAa,OAATA,EACA,MAAM,IAAI9S,UAAU,2CAExB,GAAI8S,aAAgBD,EAAYhX,OAC5B,MAAM,IAAImE,UAAU,gCAExB,GAAIvmB,MAAMsmB,QAAQ+S,GAAO,CACrB,GAAoB,IAAhBA,EAAKpnC,OACL,MAAM,IAAIs0B,UAAU,uCAExBgT,GAAiB,EAEjB,IAAK,MAAMphC,KAAQkhC,EAAM,CACrB,GAAoB,iBAATlhC,EACP,MAAM,IAAIouB,UAAU,kDAExB,IAAwC,IAApC7yB,KAAKiuB,YAAYtG,QAAQljB,GACzB,MAAM,IAAIgmB,WAAW,2CAA2ChmB,MAEpE2pB,EAAQ3pB,GAAQ,IACpB,CACA,GAAoB,iBAATmhC,GAA8B,OAATA,EAC5B7mC,EAAU6mC,OAET,QAAoB,IAATA,EACZ,MAAM,IAAI/S,UAAU,+BAE5B,KACK,CAGD,IAAIiT,GAAY,EAChB,MAAMC,EAAW91B,OAAOI,oBAAoBs1B,GAC5C,IAAK,MAAMlhC,KAAQzE,KAAKiuB,YACpB,IAAgC,IAA5B8X,EAASpe,QAAQljB,GAAc,CAC/B,MAAMgJ,EAAIk4B,EAAKlhC,IACL,OAANgJ,GAAcA,aAAai4B,EAAYhX,UACvCoX,GAAY,EACZD,GAAiB,EACjBzX,EAAQ3pB,GAAQgJ,EAExB,CAEJ,GAAIq4B,GACA,GAAoB,iBAATF,GAA8B,OAATA,EAC5B7mC,EAAU6mC,OAET,QAAoB,IAATA,EACZ,MAAM,IAAI/S,UAAU,qCAIxB9zB,EAAU4mC,CAElB,CACJ,MACK,QAAoB,IAATA,EACZ,MAAM,IAAI9S,UAAU,2DAGxB,IAAK,MAAMpuB,KAAQzE,KAAKguB,WACpB,QAA2B,IAAhBG,EAAM1pB,GACb,MAAM,IAAIxE,MAAM,UAAUwE,6BAIlC,GAAIohC,EACA,IAAK,MAAMphC,KAAQzE,KAAKiuB,YACpBG,EAAQ3pB,GAAQ,KAIxB,MAAMuhC,QAAgBhmC,KAAKhB,QAAQsE,IAAI6qB,EAAOC,EAASrvB,GACjDknC,EAAc,CAAC,EACrB,IAAK,MAAMjiC,KAAOgiC,EACV/1B,OAAOiU,eAAeC,KAAK6hB,EAAShiC,KACpCiiC,EAAYjiC,GAAO,IAAI0hC,EAAYhX,OAAOsX,EAAQhiC,GAAKxB,KAAMwjC,EAAQhiC,GAAK9D,KAAM8lC,EAAQhiC,GAAKY,OAGrG,OAAOqhC,CACX,CACArnC,gBACI,OAAOoB,KAAKhB,QAAQ0D,SACxB,CACAgJ,oBAAoBw6B,EAAMP,EAAMC,EAAMO,GAElC,IAAIC,EACArnC,EAAU,CAAC,EACf,GAAoB,iBAATmnC,GAEP,GADAE,EAAuBF,EACH,iBAATP,GAA8B,OAATA,EAC5B5mC,EAAU4mC,OAET,QAAoB,IAATA,EACZ,MAAM,IAAI9S,UAAU,qCAGvB,GAAIqT,aAAgBz/B,YAErB,GADA2/B,EAAuBF,EACH,iBAATP,GAA8B,OAATA,EAC5B5mC,EAAU4mC,OAET,QAAoB,IAATA,EACZ,MAAM,IAAI9S,UAAU,oCAGvB,MAAIqT,aAAgBG,aACS,oBAAtBjR,mBAAqC8Q,aAAgB9Q,mBAyC7D,MAAM,IAAIvC,UAAU,uDAzC6D,CACjF,MAAMtqB,EAAS29B,EACf,IAAIj1B,EAAa,EACbvK,EAAaw/B,EAAKx/B,WACtB,GAAoB,iBAATi/B,GAA8B,OAATA,EAC5B5mC,EAAU4mC,OAET,GAAoB,iBAATA,EAAmB,CAE/B,GADA10B,EAAa00B,GACRznC,OAAOssB,cAAcvZ,GACtB,MAAM,IAAIwZ,WAAW,oCAEzB,GAAIxZ,EAAa,GAAKA,GAAc1I,EAAO7B,WACvC,MAAM,IAAI+jB,WAAW,oCAAoCliB,EAAO7B,gBAGpE,GADAA,EAAaw/B,EAAKx/B,WAAauK,EACX,iBAAT20B,EAAmB,CAE1B,GADAl/B,EAAak/B,GACR1nC,OAAOssB,cAAc9jB,GACtB,MAAM,IAAI+jB,WAAW,oCAEzB,GAAI/jB,GAAc,GAAKuK,EAAavK,EAAa6B,EAAO7B,WACpD,MAAM,IAAI+jB,WAAW,oCAAoCliB,EAAO7B,WAAauK,OAEjF,GAAoB,iBAATk1B,GAA8B,OAATA,EAC5BpnC,EAAUonC,OAET,QAAoB,IAATA,EACZ,MAAM,IAAItT,UAAU,+BAE5B,MACK,QAAoB,IAAT+S,EACZ,MAAM,IAAI/S,UAAU,iCAE5B,MACK,QAAoB,IAAT8S,EACZ,MAAM,IAAI9S,UAAU,gCAExBuT,EAAuB,IAAI3/B,WAAW8B,EAAQ0I,EAAYvK,EAC9D,CAGA,CAEA,MACMu9B,GADMllC,EAAQkwB,oBAAsB,IACjB5qB,KAAIP,GAAkB,iBAANA,EAAiBA,EAAIA,EAAEW,OAC1DqE,QAAgB,EAAI27B,EAAkBd,gBAAgBM,GACtDjlC,QAAgB8J,EAAQi7B,qBAAqBqC,EAAsBrnC,GACzE,OAAO,IAAI0mC,EAAiBzmC,EAChC,CACA2vB,iBACI3uB,KAAKhB,QAAQ2vB,gBACjB,CACA1C,eACIjsB,KAAKhB,QAAQitB,cACjB,CACI+B,iBACA,OAAOhuB,KAAKhB,QAAQgvB,UACxB,CACIC,kBACA,OAAOjuB,KAAKhB,QAAQivB,WACxB,EAEJ1wB,EAAQkoC,iBAAmBA,C,8BC5L3Bx1B,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,IACtD3vB,EAAQkoC,sBAAmB,EAC3B,MAAMa,EAA8B,EAAQ,MAE5C/oC,EAAQkoC,iBAAmBa,EAA4Bb,gB,4BCJvDx1B,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,G,4BCAtDjd,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,IACtD3vB,EAAQgpC,kBAAoBhpC,EAAQipC,qBAAkB,EA4FtDjpC,EAAQipC,gBAxFgB,CAACjY,EAAQxvB,KAC7B,MAAM0nC,EAAStb,SAASub,cAAc,UACtCD,EAAOE,MAAQpY,EAAO3pB,KAAK,GAC3B6hC,EAAOG,OAASrY,EAAO3pB,KAAK,GAC5B,MAAMiiC,EAAkBJ,EAAOK,WAAW,MAC1C,GAAuB,MAAnBD,EAAyB,CAEzB,IAAIF,EACAC,OAC0B9+B,IAA1B/I,GAASgoC,cAAuD,SAAzBhoC,EAAQgoC,cAC/CJ,EAAQpY,EAAO3pB,KAAK,GACpBgiC,EAASrY,EAAO3pB,KAAK,KAGrB+hC,EAAQpY,EAAO3pB,KAAK,GACpBgiC,EAASrY,EAAO3pB,KAAK,IAEzB,MAAMoiC,OAAkCl/B,IAApB/I,GAASgZ,OAAuBhZ,EAAQgZ,OAAS,MAC/DkvB,EAAOloC,GAASkoC,KACtB,IAAIC,EACAC,OACSr/B,IAATm/B,QAAoCn/B,IAAdm/B,EAAKG,KAC3BF,EAAW,CAAC,IAAK,IAAK,IAAK,KAGA,iBAAfD,EAAS,KACjBC,EAAW,CAACD,EAAKG,KAAMH,EAAKG,KAAMH,EAAKG,KAAMH,EAAKG,OAGlDF,EAAW,CAACD,EAAKG,KAAK,GAAIH,EAAKG,KAAK,GAAIH,EAAKG,KAAK,GAAI,QACjCt/B,IAAjBm/B,EAAKG,KAAK,KACVF,EAAS,GAAKD,EAAKG,KAAK,UAIvBt/B,IAATm/B,QAAoCn/B,IAAdm/B,EAAKI,KAC3BF,EAAW,CAAC,EAAG,EAAG,EAAG,GAGM,iBAAfF,EAAS,KACjBE,EAAW,CAACF,EAAKI,KAAMJ,EAAKI,KAAMJ,EAAKI,KAAMJ,EAAKI,OAGlDF,EAAW,CAACF,EAAKI,KAAK,GAAIJ,EAAKI,KAAK,GAAIJ,EAAKI,KAAK,GAAI,QACjCv/B,IAAjBm/B,EAAKI,KAAK,KACVF,EAAS,GAAKF,EAAKI,KAAK,KAIpC,MAAMx4B,EAAS+3B,EAASD,EAExB,IAAIW,EAAiB,EAAGC,EAAiB14B,EAAQ24B,EAA0B,EAAT34B,EAAY44B,GAAkB,EAE5E,SAAhBT,GACAM,EAAiB,EACjBC,EAAiB14B,EACjB24B,EAA0B,EAAT34B,EACjB44B,EAA0B,EAAT54B,GAEI,QAAhBm4B,GACLM,EAAiB,EACjBC,EAAiB14B,EACjB24B,EAA0B,EAAT34B,GAEI,QAAhBm4B,IACLM,EAAiB,EACjBE,EAAiB34B,EACjB04B,EAA0B,EAAT14B,GAErB,IAAK,IAAI/K,EAAI,EAAGA,EAAI8iC,EAAQ9iC,IACxB,IAAK,IAAI68B,EAAI,EAAGA,EAAIgG,EAAOhG,IAAK,CAC5B,MAAM5E,GAAKxN,EAAOruB,KAAKonC,KAAoBH,EAAS,IAAMD,EAAS,GAC7D5M,GAAK/L,EAAOruB,KAAKqnC,KAAoBJ,EAAS,IAAMD,EAAS,GAC7D5O,GAAK/J,EAAOruB,KAAKsnC,KAAoBL,EAAS,IAAMD,EAAS,GAC7D7O,GAAwB,IAApBoP,EACN,KACClZ,EAAOruB,KAAKunC,KAAoBN,EAAS,IAAMD,EAAS,GAE7DL,EAAgBa,UAAY,QAAU3L,EAAI,IAAMzB,EAAI,IAAMhC,EAAI,IAAMD,EAAI,IACxEwO,EAAgBc,SAAShH,EAAG78B,EAAG,EAAG,EACtC,CAEJ,OAAO2iC,EAAOmB,WAClB,CAEI,MAAM,IAAI3nC,MAAM,4BACpB,EAmGJ1C,EAAQgpC,kBA7FkB,CAAChY,EAAQxvB,KAC/B,MAAM8nC,EAAkB1b,SAASub,cAAc,UAAUI,WAAW,MACpE,IAAIe,EACJ,GAAuB,MAAnBhB,EAsFA,MAAM,IAAI5mC,MAAM,6BAtFS,CAEzB,IAAI0mC,EACAC,EACAkB,OAC0BhgC,IAA1B/I,GAASgoC,cAAuD,SAAzBhoC,EAAQgoC,cAC/CJ,EAAQpY,EAAO3pB,KAAK,GACpBgiC,EAASrY,EAAO3pB,KAAK,GACrBkjC,EAAWvZ,EAAO3pB,KAAK,KAGvB+hC,EAAQpY,EAAO3pB,KAAK,GACpBgiC,EAASrY,EAAO3pB,KAAK,GACrBkjC,EAAWvZ,EAAO3pB,KAAK,IAE3B,MAAMoiC,OAA0Bl/B,IAAZ/I,QAA4C+I,IAAnB/I,EAAQgZ,OAAuBhZ,EAAQgZ,OAAkB,MAChGkvB,EAAOloC,GAASkoC,KACtB,IAAIC,EACAC,OACSr/B,IAATm/B,QAAoCn/B,IAAdm/B,EAAKG,KAC3BF,EAAW,CAAC,IAAK,IAAK,IAAK,KAGA,iBAAfD,EAAS,KACjBC,EAAW,CAACD,EAAKG,KAAMH,EAAKG,KAAMH,EAAKG,KAAMH,EAAKG,OAGlDF,EAAW,CAACD,EAAKG,KAAK,GAAIH,EAAKG,KAAK,GAAIH,EAAKG,KAAK,GAAI,UACjCt/B,IAAjBm/B,EAAKG,KAAK,KACVF,EAAS,GAAKD,EAAKG,KAAK,UAIvBt/B,IAATm/B,QAAoCn/B,IAAdm/B,EAAKI,KAC3BF,EAAW,CAAC,EAAG,EAAG,EAAG,GAGM,iBAAfF,EAAS,KACjBE,EAAW,CAACF,EAAKI,KAAMJ,EAAKI,KAAMJ,EAAKI,KAAMJ,EAAKI,OAGlDF,EAAW,CAACF,EAAKI,KAAK,GAAIJ,EAAKI,KAAK,GAAIJ,EAAKI,KAAK,GAAI,QACjCv/B,IAAjBm/B,EAAKI,KAAK,KACVF,EAAS,GAAKF,EAAKI,KAAK,KAIpC,MAAMx4B,EAAS+3B,EAASD,EACxB,QAAgB7+B,IAAZ/I,SACuB+I,IAAnB/I,EAAQgZ,QAAsC,IAAb+vB,GAAqC,SAAnB/oC,EAAQgZ,QAC7C,IAAb+vB,GAAsC,QAAnB/oC,EAAQgZ,QAAuC,QAAnBhZ,EAAQgZ,QACxD,MAAM,IAAI9X,MAAM,iDAIxB,MAAM8nC,EAAO,EACb,IAAIC,EAAgB,EAAGC,EAAgB,EAAGC,EAAgB,EAAGC,EAAgB,EACzEb,EAAiB,EAAGC,EAAiB14B,EAAQ24B,EAA0B,EAAT34B,EAAY44B,GAAkB,EAE5E,SAAhBT,GACAM,EAAiB,EACjBC,EAAiB14B,EACjB24B,EAA0B,EAAT34B,EACjB44B,EAA0B,EAAT54B,GAEI,QAAhBm4B,GACLM,EAAiB,EACjBC,EAAiB14B,EACjB24B,EAA0B,EAAT34B,GAEI,QAAhBm4B,IACLM,EAAiB,EACjBE,EAAiB34B,EACjB04B,EAA0B,EAAT14B,GAErBg5B,EAAQhB,EAAgBuB,gBAAgBzB,EAAOC,GAC/C,IAAK,IAAI9iC,EAAI,EAAGA,EAAI8iC,EAASD,EAAOqB,GAAiBD,EAAME,GAAiBF,EAAMG,GAAiBH,EAAMI,GAAiBJ,EAAMjkC,IAC5H+jC,EAAM3nC,KAAK8nC,IAAkBzZ,EAAOruB,KAAKonC,KAAoBH,EAAS,IAAMD,EAAS,GACrFW,EAAM3nC,KAAK+nC,IAAkB1Z,EAAOruB,KAAKqnC,KAAoBJ,EAAS,IAAMD,EAAS,GACrFW,EAAM3nC,KAAKgoC,IAAkB3Z,EAAOruB,KAAKsnC,KAAoBL,EAAS,IAAMD,EAAS,GACrFW,EAAM3nC,KAAKioC,IAAqC,IAApBV,EACxB,KACClZ,EAAOruB,KAAKunC,KAAoBN,EAAS,IAAMD,EAAS,EAErE,CAIA,OAAOW,CAAK,C,8BC5LhB53B,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,IACtD3vB,EAAQ8qC,gBAAkB9qC,EAAQ+qC,oBAAiB,EACnD,MAAM5C,EAAc,EAAQ,KA+E5BnoC,EAAQ+qC,eAvEe,CAAC//B,EAAQxJ,KAC5B,QAAe+I,IAAXS,EACA,MAAM,IAAItI,MAAM,gCAEpB,QAAuB6H,IAAnB/I,EAAQ6nC,aAA0C9+B,IAAlB/I,EAAQ4nC,MACxC,MAAM,IAAI1mC,MAAM,0CAEpB,GAA6B,SAAzBlB,EAAQgoC,aACR,MAAM,IAAI9mC,MAAM,2CAEpB,MAAM,OAAE2mC,EAAM,MAAED,GAAU5nC,EACpBkoC,EAAOloC,EAAQkoC,MAAQ,CAAEG,KAAM,IAAKC,KAAM,GAChD,IAAIH,EACAC,EAEAD,EADuB,iBAAfD,EAAS,KACN,CAACA,EAAKG,KAAMH,EAAKG,KAAMH,EAAKG,KAAMH,EAAKG,MAGvC,CAACH,EAAKG,KAAK,GAAIH,EAAKG,KAAK,GAAIH,EAAKG,KAAK,GAAIH,EAAKG,KAAK,IAAM,KAGtED,EADuB,iBAAfF,EAAS,KACN,CAACA,EAAKI,KAAMJ,EAAKI,KAAMJ,EAAKI,KAAMJ,EAAKI,MAGvC,CAACJ,EAAKI,KAAK,GAAIJ,EAAKI,KAAK,GAAIJ,EAAKI,KAAK,GAAIJ,EAAKI,KAAK,IAAM,GAE1E,MAAML,OAAiCl/B,IAAnB/I,EAAQgZ,OAAuBhZ,EAAQgZ,OAAS,OAE9DwwB,OAAwCzgC,IAAzB/I,EAAQypC,mBACC1gC,IAAzB/I,EAAQypC,aAA6BzpC,EAAQypC,aAC9C,MACE35B,EAAS+3B,EAASD,EAClB8B,EAA+B,SAAjBF,EAA0B,IAAIlgC,aAAsB,EAATwG,GAAc,IAAIxG,aAAsB,EAATwG,GAE9F,IAAIk5B,EAAO,EAAGC,EAAgB,EAAGC,EAAgB,EAAGC,EAAgB,EAAGC,EAAgB,EACnFb,EAAiB,EAAGC,EAAiB14B,EAAQ24B,EAA0B,EAAT34B,EAAY44B,GAAkB,EAE5E,QAAhBT,IACAe,EAAO,EACPC,EAAgB,EAChBC,EAAgB,EAChBC,EAAgB,EAChBC,GAAiB,GAGA,SAAjBI,EACAd,EAA0B,EAAT54B,EAEK,QAAjB05B,GACLjB,EAAiB,EACjBE,EAAiB34B,EACjB04B,EAA0B,EAAT14B,GAEK,QAAjB05B,IACLf,EAAiB,EACjBD,EAAiB14B,EACjBy4B,EAA0B,EAATz4B,GAErB,IAAK,IAAI/K,EAAI,EAAGA,EAAI+K,EAAQ/K,IAAKkkC,GAAiBD,EAAMG,GAAiBH,EAAME,GAAiBF,EAAMI,GAAiBJ,EACnHU,EAAYnB,MAAqB/+B,EAAOy/B,GAAiBb,EAAS,IAAMD,EAAS,GACjFuB,EAAYlB,MAAqBh/B,EAAO0/B,GAAiBd,EAAS,IAAMD,EAAS,GACjFuB,EAAYjB,MAAqBj/B,EAAO2/B,GAAiBf,EAAS,IAAMD,EAAS,IACzD,IAApBO,IAA4C,IAAnBU,IACzBM,EAAYhB,MAAqBl/B,EAAO4/B,GAAiBhB,EAAS,IAAMD,EAAS,IAMzF,MAFsC,SAAjBqB,EAA0B,IAAI7C,EAAYhX,OAAO,UAAW+Z,EAAa,CAAC,EAAG,EAAG7B,EAAQD,IACzG,IAAIjB,EAAYhX,OAAO,UAAW+Z,EAAa,CAAC,EAAG,EAAG7B,EAAQD,GAC/C,EAuIvBppC,EAAQ8qC,gBAjIgBzpC,MAAOipC,EAAO9oC,KAElC,MAAM2pC,EAA+C,oBAAvB,kBAAsCb,aAAiBc,iBAC/EC,EAAwC,oBAAhB,WAA+Bf,aAAiBgB,UACxEC,EAAyC,oBAAlB,aAAiCjB,aAAiBkB,YACzEC,EAA4B,iBAAVnB,EACxB,IAAI3nC,EACA+oC,EAAwBlqC,GAAW,CAAC,EAExC,GAAI2pC,EAAgB,CAEhB,MAAMjC,EAAStb,SAASub,cAAc,UACtCD,EAAOE,MAAQkB,EAAMlB,MACrBF,EAAOG,OAASiB,EAAMjB,OACtB,MAAMC,EAAkBJ,EAAOK,WAAW,MAC1C,GAAuB,MAAnBD,EA2BA,MAAM,IAAI5mC,MAAM,6BA3BS,CACzB,IAAI2mC,EAASiB,EAAMjB,OACfD,EAAQkB,EAAMlB,MAKlB,QAJgB7+B,IAAZ/I,QAAmD+I,IAA1B/I,EAAQmqC,oBAAwDphC,IAAzB/I,EAAQoqC,eACxEvC,EAAS7nC,EAAQmqC,cACjBvC,EAAQ5nC,EAAQoqC,mBAEJrhC,IAAZ/I,EAAuB,CAEvB,GADAkqC,EAAwBlqC,OACK+I,IAAzB/I,EAAQypC,aACR,MAAM,IAAIvoC,MAAM,+DAGhBgpC,EAAsBT,aAAe,OAEzCS,EAAsBrC,OAASA,EAC/BqC,EAAsBtC,MAAQA,CAClC,MAEIsC,EAAsBT,aAAe,OACrCS,EAAsBrC,OAASA,EAC/BqC,EAAsBtC,MAAQA,EAElCE,EAAgBuC,UAAUvB,EAAO,EAAG,GACpC3nC,EAAO2mC,EAAgBwC,aAAa,EAAG,EAAG1C,EAAOC,GAAQ1mC,IAC7D,CAIJ,KACK,KAAI0oC,EAkCJ,IAAIE,EAAe,CAEpB,QAAgBhhC,IAAZ/I,EACA,MAAM,IAAIkB,MAAM,2DAEpB,MAAM4mC,EAAkB1b,SAASub,cAAc,UAAUI,WAAW,MACpE,GAAuB,MAAnBD,EAAyB,CACzB,MAAMD,EAASiB,EAAMjB,OACfD,EAAQkB,EAAMlB,MAKpB,OAJAE,EAAgBuC,UAAUvB,EAAO,EAAG,EAAGlB,EAAOC,GAC9C1mC,EAAO2mC,EAAgBwC,aAAa,EAAG,EAAG1C,EAAOC,GAAQ1mC,KACzD+oC,EAAsBrC,OAASA,EAC/BqC,EAAsBtC,MAAQA,GACvB,EAAIppC,EAAQ+qC,gBAAgBpoC,EAAM+oC,EAC7C,CAEI,MAAM,IAAIhpC,MAAM,4BAExB,CACK,GAAI+oC,EACL,OAAO,IAAI7pC,SAAQ,CAACC,EAASi3B,KACzB,MAAMoQ,EAAStb,SAASub,cAAc,UAChCh/B,EAAU++B,EAAOK,WAAW,MAClC,IAAKe,IAAUngC,EACX,OAAO2uB,IAEX,MAAMiT,EAAW,IAAIC,MACrBD,EAASE,YAAc,YACvBF,EAASljC,IAAMyhC,EACfyB,EAASvP,OAAS,KACd0M,EAAOE,MAAQ2C,EAAS3C,MACxBF,EAAOG,OAAS0C,EAAS1C,OACzBl/B,EAAQ0hC,UAAUE,EAAU,EAAG,EAAG7C,EAAOE,MAAOF,EAAOG,QACvD,MAAM6C,EAAM/hC,EAAQ2hC,aAAa,EAAG,EAAG5C,EAAOE,MAAOF,EAAOG,QAC5DqC,EAAsBrC,OAASH,EAAOG,OACtCqC,EAAsBtC,MAAQF,EAAOE,MACrCvnC,GAAQ,EAAI7B,EAAQ+qC,gBAAgBmB,EAAIvpC,KAAM+oC,GAAuB,CACxE,IAIL,MAAM,IAAIhpC,MAAM,iEACpB,CA5EyB,CACrB,IAAI2mC,EACAD,EAeJ,QAdgB7+B,IAAZ/I,QAAkD+I,IAAzB/I,EAAQoqC,mBAAwDrhC,IAA1B/I,EAAQmqC,eACvEtC,EAAS7nC,EAAQmqC,cACjBvC,EAAQ5nC,EAAQoqC,eAGhBvC,EAASiB,EAAMjB,OACfD,EAAQkB,EAAMlB,YAEF7+B,IAAZ/I,IACAkqC,EAAwBlqC,GAE5BkqC,EAAsBlxB,OAAS,OAC/BkxB,EAAsBrC,OAASA,EAC/BqC,EAAsBtC,MAAQA,OACd7+B,IAAZ/I,EAAuB,CACvB,MAAM2qC,EAAave,SAASub,cAAc,UAC1CgD,EAAW/C,MAAQA,EACnB+C,EAAW9C,OAASA,EACpB,MAAMC,EAAkB6C,EAAW5C,WAAW,MAC9C,GAAuB,MAAnBD,EAKA,MAAM,IAAI5mC,MAAM,6BAJhB4mC,EAAgB8C,aAAa9B,EAAO,EAAG,GACvC3nC,EAAO2mC,EAAgBwC,aAAa,EAAG,EAAG1C,EAAOC,GAAQ1mC,IAKjE,MAEIA,EAAO2nC,EAAM3nC,IAErB,CA2CA,CACA,QAAa4H,IAAT5H,EACA,OAAO,EAAI3C,EAAQ+qC,gBAAgBpoC,EAAM+oC,GAGzC,MAAM,IAAIhpC,MAAM,iEACpB,C,8BCpNJgQ,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,IACtD3vB,EAAQmxB,YAAS,EACjB,MAAMkb,EAA8B,EAAQ,MACtCC,EAA2B,EAAQ,MACnCC,EAAyB,EAAQ,KAEjCC,EAAwC,IAAIpoC,IAAI,CAClD,CAAC,UAAW0G,cACZ,CAAC,QAAS5B,YACV,CAAC,OAAQuqB,WACT,CAAC,SAAUD,aACX,CAAC,UAAWA,aACZ,CAAC,QAASE,YACV,CAAC,QAASC,YACV,CAAC,OAAQzqB,YACT,CAAC,UAAW0qB,cACZ,CAAC,SAAUC,eAGT4Y,EAAwC,IAAIroC,IAAI,CAClD,CAAC0G,aAAc,WACf,CAAC5B,WAAY,SACb,CAACuqB,UAAW,QACZ,CAACD,YAAa,UACd,CAACE,WAAY,SACb,CAACC,WAAY,SACb,CAACC,aAAc,WACf,CAACC,YAAa,YAKlB,IAAI6Y,GAAkB,EA0ItB1sC,EAAQmxB,OA1HR,MACIzmB,YAAYi+B,EAAMP,EAAMC,GAEpB,IAAIpjC,EACAtC,EACA0E,EAEJ,GAtBY,MAChB,IAAKqlC,EAAiB,CAClBA,GAAkB,EAClB,MAAMC,EAAoD,oBAAlBzhC,eAA+D,mBAAvBA,cAAc0hC,KACxFC,EAAsD,oBAAnBlgB,gBAAiE,mBAAxBA,eAAeigB,KAC7FD,IACAH,EAAsC1pC,IAAI,QAASoI,eACnDuhC,EAAsC3pC,IAAIoI,cAAe,UAEzD2hC,IACAL,EAAsC1pC,IAAI,SAAU6pB,gBACpD8f,EAAsC3pC,IAAI6pB,eAAgB,UAElE,GAIImgB,GAKoB,iBAATnE,EAMP,GAFA1jC,EAAO0jC,EACPthC,EAAOghC,EACM,WAATM,EAAmB,CAEnB,IAAK55B,MAAMsmB,QAAQ+S,GACf,MAAM,IAAI9S,UAAU,kDAIxB3yB,EAAOylC,CACX,KACK,CAED,MAAM2E,EAAwBP,EAAsC3pC,IAAI8lC,GACxE,QAA8Bp+B,IAA1BwiC,EACA,MAAM,IAAIzX,UAAU,4BAA4BqT,MAEpD,GAAI55B,MAAMsmB,QAAQ+S,GAAO,CACrB,GAAa,YAATO,EAIA,MAAM,IAAIrT,UAAU,4BAA4BqT,MAOhDhmC,EAAOoqC,EAAsBH,KAAKxE,EAE1C,KACK,MAAIA,aAAgB2E,GAIrB,MAAM,IAAIzX,UAAU,KAAKrwB,mCAAsC8nC,KAH/DpqC,EAAOylC,CAIX,CACJ,MAOA,GADA/gC,EAAO+gC,EACHr5B,MAAMsmB,QAAQsT,GAAO,CAErB,GAAoB,IAAhBA,EAAK3nC,OACL,MAAM,IAAIs0B,UAAU,uDAExB,MAAM0X,SAA0BrE,EAAK,GACrC,GAAyB,WAArBqE,EACA/nC,EAAO,SACPtC,EAAOgmC,MAEN,IAAyB,YAArBqE,EAQL,MAAM,IAAI1X,UAAU,uCAAuC0X,MAP3D/nC,EAAO,OAIPtC,EAAOuG,WAAW0jC,KAAKjE,EAI3B,CACJ,KACK,CAED,MAAMsE,EAAaR,EAAsC5pC,IAAI8lC,EAAKj+B,aAClE,QAAmBH,IAAf0iC,EACA,MAAM,IAAI3X,UAAU,qCAAqCqT,EAAKj+B,gBAElEzF,EAAOgoC,EACPtqC,EAAOgmC,CACX,CAGJ,QAAap+B,IAATlD,EAEAA,EAAO,CAAC1E,EAAK3B,aAEZ,IAAK+N,MAAMsmB,QAAQhuB,GACpB,MAAM,IAAIiuB,UAAU,0CAGxB,MAAMjsB,GAAO,EAAIkjC,EAAuBW,eAAe7lC,GACvD,GAAIgC,IAAS1G,EAAK3B,OACd,MAAM,IAAI0B,MAAM,iBAAiB2G,iCAAoC1G,EAAK3B,YAE9EyB,KAAK4E,KAAOA,EACZ5E,KAAKwC,KAAOA,EACZxC,KAAKE,KAAOA,EACZF,KAAK4G,KAAOA,CAChB,CACA8E,uBAAuBm8B,EAAO9oC,GAC1B,OAAO,EAAI8qC,EAAyBxB,iBAAiBR,EAAO9oC,EAChE,CAGA6oC,UAAU7oC,GACN,OAAO,EAAI6qC,EAA4BpD,iBAAiBxmC,KAAMjB,EAClE,CACA2rC,YAAY3rC,GACR,OAAO,EAAI6qC,EAA4BrD,mBAAmBvmC,KAAMjB,EACpE,CAGA2J,QAAQ9D,GACJ,OAAO,EAAIklC,EAAuBa,eAAe3qC,KAAM4E,EAC3D,E,6BCxKJqL,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,IACtD3vB,EAAQotC,cAAgBptC,EAAQktC,mBAAgB,EAChD,MAAM/E,EAAc,EAAQ,KAoB5BnoC,EAAQktC,cAde7lC,IACnB,IAAIgC,EAAO,EACX,IAAK,IAAI9C,EAAI,EAAGA,EAAIc,EAAKrG,OAAQuF,IAAK,CAClC,MAAMuF,EAAMzE,EAAKd,GACjB,GAAmB,iBAARuF,IAAqBnL,OAAOssB,cAAcnhB,GACjD,MAAM,IAAIwpB,UAAU,QAAQ/uB,+BAA+BuF,KAE/D,GAAIA,EAAM,EACN,MAAM,IAAIohB,WAAW,QAAQ3mB,2CAA2CuF,KAE5EzC,GAAQyC,CACZ,CACA,OAAOzC,CAAI,EAOfrJ,EAAQotC,cADc,CAACpc,EAAQ3pB,IAAS,IAAI8gC,EAAYhX,OAAOH,EAAO/rB,KAAM+rB,EAAOruB,KAAM0E,E,6BC1BzFqL,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,IACtD3vB,EAAQmxB,YAAS,EACjB,MAAMkc,EAAmB,EAAQ,MAEjCrtC,EAAQmxB,OAASkc,EAAiBlc,M,4BCJlCze,OAAOyzB,eAAenmC,EAAS,aAAc,CAAE2vB,OAAO,IACtD3vB,EAAQkC,aAAU,EAGlBlC,EAAQkC,QAAU,gC,GCNdorC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBjjC,IAAjBkjC,EACH,OAAOA,EAAaztC,QAGrB,IAAIC,EAASqtC,EAAyBE,GAAY,CAGjDxtC,QAAS,CAAC,GAOX,OAHA0tC,EAAoBF,GAAU5mB,KAAK3mB,EAAOD,QAASC,EAAQA,EAAOD,QAASutC,GAGpEttC,EAAOD,OACf,CCnB0ButC,CAAoB,M,MDF1CD,C","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/version.ts","webpack://ort/./lib/wasm/jsep/backend-webgpu.ts","webpack://ort/./lib/wasm/jsep/init.ts","webpack://ort/./lib/wasm/jsep/log.ts","webpack://ort/./lib/wasm/jsep/util.ts","webpack://ort/./lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","webpack://ort/./lib/wasm/jsep/webgpu/gpu-data-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/op-resolve-rules.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/binary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/common.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-grouped.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv2d-mm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/fuse-utils.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gemm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/matmul.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/pool.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/reduce.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/unary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/program-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/types.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/wasm-common.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/wasm-utils.ts","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/../common/dist/cjs/backend-impl.js","webpack://ort/../common/dist/cjs/backend.js","webpack://ort/../common/dist/cjs/env-impl.js","webpack://ort/../common/dist/cjs/env.js","webpack://ort/../common/dist/cjs/index.js","webpack://ort/../common/dist/cjs/inference-session-impl.js","webpack://ort/../common/dist/cjs/inference-session.js","webpack://ort/../common/dist/cjs/onnx-value.js","webpack://ort/../common/dist/cjs/tensor-conversion-impl.js","webpack://ort/../common/dist/cjs/tensor-factory-impl.js","webpack://ort/../common/dist/cjs/tensor-impl.js","webpack://ort/../common/dist/cjs/tensor-utils-impl.js","webpack://ort/../common/dist/cjs/tensor.js","webpack://ort/../common/dist/cjs/version.js","webpack://ort/webpack/bootstrap","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, () => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyInstance();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n\nenv.versions.web = version;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.16.0-dev.20230704-d540c7da0f';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {configureLogger, LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {createGpuDataManager, GpuDataManager} from './webgpu/gpu-data-manager';\nimport {RunFunction, WEBGPU_OP_RESOLVE_RULES} from './webgpu/op-resolve-rules';\nimport {ProgramManager} from './webgpu/program-manager';\nimport {ComputeContext, GpuData, GpuDataType, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/**\n * get a unique key representing the program from the program info,input shapes and types.\n *\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\n *\n */\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTensorShapes: ReadonlyArray<TensorView['dims']>,\n     inputGpuDataTypes: readonly GpuDataType[]): string => {\n      const inputTensorShapesToString = inputTensorShapes.map(d => `${d.join(',')}`).join('_');\n      const inputGpuDataTypesToString = inputGpuDataTypes.join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputTensorShapesToString + ';' + inputGpuDataTypesToString;\n      return key;\n    };\n\n/**\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\n * the first parameter so that it is stored for future use.\n */\nexport class WebGpuBackend {\n  device: GPUDevice;\n  /**\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\n   */\n  gpuDataManager: GpuDataManager;\n  /**\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\n   * artifacts mapping\n   */\n  programManager: ProgramManager;\n\n  /**\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\n   * `null` means no kernel is being computed.\n   * only one kernel can be computed at a moment.\n   */\n  currentKernelId: number|null = null;\n  /**\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\n   */\n  private temporaryData: GpuData[];\n  /**\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\n   */\n  private kernelPersistentData: Map<number, GpuData[]>;\n  /**\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\n   */\n  private kernelCustomData: Map<number, {[key: string]: unknown}>;\n  /**\n   * get the custom data of the current kernel\n   */\n  get currentKernelCustomData(): {[key: string]: unknown} {\n    if (this.currentKernelId === null) {\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\n    }\n\n    let data = this.kernelCustomData.get(this.currentKernelId);\n    if (!data) {\n      data = {};\n      this.kernelCustomData.set(this.currentKernelId, data);\n    }\n\n    return data;\n  }\n\n  /**\n   * a KernelID -> kernel info mapping. value is [ name, run function, [optional] preprocess_attribute_once function ]\n   */\n  kernels: Map<number, [string, RunFunction, [((attribute: unknown) => unknown) | undefined, unknown]]>;\n\n  commandEncoder: GPUCommandEncoder|null = null;\n  computePassEncoder: GPUComputePassEncoder|null = null;\n  pendingDispatchNumber = 0;\n\n  profilingEnabled = false;\n  profilingQuerySet: GPUQuerySet;\n  profilingTimeBase?: bigint;\n\n  async initialize(env: Env): Promise<void> {\n    if (!navigator.gpu) {\n      // WebGPU is not available.\n      throw new Error('WebGpuBackend: WebGPU is not available.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('WebGpuBackend: Failed to get GPU adapter.');\n    }\n\n    const deviceDescriptor: GPUDeviceDescriptor = {\n      requiredLimits: {\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n      }\n    };\n    // WebGPU Spec: Timestamp Queries Inside Passes\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\n    if (adapter.features.has('timestamp-query-inside-passes') && env.webgpu.profilingMode === 'default') {\n      this.profilingEnabled = true;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      deviceDescriptor.requiredFeatures = ['timestamp-query-inside-passes' as any];\n    }\n\n    this.device = await adapter.requestDevice(deviceDescriptor);\n    this.gpuDataManager = createGpuDataManager(this);\n    this.programManager = new ProgramManager(this);\n    this.kernels = new Map();\n    this.kernelPersistentData = new Map();\n    this.kernelCustomData = new Map();\n\n    // set up flags for logger\n    configureLogger(env.logLevel!, !!env.debug);\n\n    // TODO: set up flags\n\n    this.device.onuncapturederror = ev => {\n      if (ev.error instanceof GPUValidationError) {\n        // eslint-disable-next-line no-console\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n      }\n    };\n\n    if (this.profilingEnabled) {\n      this.profilingQuerySet = this.device.createQuerySet({\n        type: 'timestamp',\n        count: 2,\n      });\n    }\n  }\n\n  dispose(): void {\n    // currently, we do not do anything in this function. In all known use cases, we don't have the requirement to\n    // actually dispose the WebGpuBackend instance, because it's always used as a singleton.\n    //\n    // revisit this place if we get real requirement to dispose the instance.\n  }\n\n  getCommandEncoder(): GPUCommandEncoder {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n    return this.commandEncoder;\n  }\n\n  getComputePassEncoder(): GPUComputePassEncoder {\n    if (!this.computePassEncoder) {\n      this.computePassEncoder = this.getCommandEncoder().beginComputePass();\n    }\n    return this.computePassEncoder;\n  }\n\n  endComputePass(): void {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  flush(): void {\n    this.endComputePass();\n    this.device.queue.submit([this.getCommandEncoder().finish()]);\n    this.gpuDataManager.refreshPendingBuffers();\n    this.commandEncoder = null;\n    this.pendingDispatchNumber = 0;\n  }\n\n  /**\n   * run a WebGPU program.\n   * @param program either a ProgramInfo instance containing metadata including the shader code, or a function that\n   * can be called and return a ProgramInfo instance\n   * @param inputs a TensorView array. each element represents a value already exists in GPU.\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n   * index to the kernel's output.\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n   * or persistent (owned by the current kernel)\n   * @returns a TensorView array representing the result.\n   */\n  run(program: ProgramInfoLoader|ProgramInfo, inputs: readonly TensorView[], outputIndices: readonly number[],\n      createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\n      createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView): TensorView[] {\n    if (inputs.length !== program.inputTypes.length) {\n      throw new Error(`Input size must be equal to ${program.inputTypes.length}.`);\n    }\n\n    // create info for inputs\n    const inputDatas: GpuData[] = [];\n    for (let i = 0; i < inputs.length; ++i) {\n      const gpuData = this.gpuDataManager.get(inputs[i].data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for input: ${inputs[i].data}`);\n      }\n      inputDatas[i] = gpuData;\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputs.map(i => i.dims), inputDatas.map(i => i.type));\n    let artifact = this.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // check output indices\n    const validatedOutputIndices = outputIndices.length === 0 ? programInfo.outputs.map((_, i) => i) : outputIndices;\n    if (validatedOutputIndices.length !== programInfo.outputs.length) {\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${programInfo.outputs.length}.`);\n    }\n\n    // create info for outputs\n    const outputTensorViews: TensorView[] = [];\n    const outputDatas: GpuData[] = [];\n    for (let i = 0; i < programInfo.outputs.length; ++i) {\n      // value -1 and -2 are used for creating temporary and persistent outputs. so -2, -1 and 0, 1, 2, ... are valid\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\n      if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -2 ||\n          validatedOutputIndices[i] >= programInfo.outputs.length) {\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n      }\n      const isTemporary = validatedOutputIndices[i] === -1;\n      const isPersistent = validatedOutputIndices[i] === -2;\n      const tensorView = (isTemporary || isPersistent) ?\n          createIntermediateOutput(programInfo.outputs[i].dataType, programInfo.outputs[i].dims) :\n          createKernelOutput(validatedOutputIndices[i], programInfo.outputs[i].dataType, programInfo.outputs[i].dims);\n      const gpuData = this.gpuDataManager.get(tensorView.data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\n      }\n      if (isTemporary) {\n        this.temporaryData.push(gpuData);\n      }\n      if (isPersistent) {\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\n        if (!persistentData) {\n          persistentData = [];\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\n        }\n        persistentData.push(gpuData);\n      }\n      outputTensorViews.push(tensorView);\n      outputDatas.push(gpuData);\n    }\n\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(programInfo.dispatchGroup(inputs));\n\n    if (!artifact) {\n      artifact = this.programManager.build(programInfo, normalizedDispatchGroup);\n      this.programManager.setArtifact(key, artifact);\n    }\n\n    LOG_DEBUG(\n        'info',\n        () => `[ProgramManager] run \"${programInfo.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\n            normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`);\n    this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup);\n\n    return outputTensorViews;\n  }\n\n  upload(gpuDataId: number, data: Uint8Array): void {\n    this.gpuDataManager.upload(gpuDataId, data);\n  }\n\n  memcpy(src: number, dst: number): void {\n    this.gpuDataManager.memcpy(src, dst);\n  }\n\n  async download(gpuDataId: number, getTargetBuffer: () => Uint8Array): Promise<void> {\n    const arrayBuffer = await this.gpuDataManager.download(gpuDataId);\n\n    // the underlying buffer may be changed after the async function is called. so we use a getter function to make sure\n    // the buffer is up-to-date.\n    const data = getTargetBuffer();\n    data.set(new Uint8Array(arrayBuffer, 0, data.byteLength));\n  }\n\n  alloc(size: number): number {\n    return this.gpuDataManager.create(size).id;\n  }\n\n  free(ptr: number): number {\n    return this.gpuDataManager.release(ptr);\n  }\n\n  createKernel(name: string, kernelId: number, attribute: unknown): void {\n    const op = WEBGPU_OP_RESOLVE_RULES.get(name);\n    if (!op) {\n      throw new Error(`kernel not implemented: ${name}`);\n    }\n\n    this.kernels.set(kernelId, [name, op[0], [op[1], attribute]]);\n  }\n\n  releaseKernel(kernelId: number): void {\n    const persistentData = this.kernelPersistentData.get(kernelId);\n    if (persistentData) {\n      for (const data of persistentData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.kernelPersistentData.delete(kernelId);\n    }\n\n    this.kernelCustomData.delete(kernelId);\n    this.kernels.delete(kernelId);\n  }\n\n  computeKernel(kernelId: number, context: ComputeContext): number {\n    const kernel = this.kernels.get(kernelId);\n    if (!kernel) {\n      throw new Error(`kernel not created: ${kernelId}`);\n    }\n    const [name, kernelEntry, attributes] = kernel;\n    if (this.currentKernelId !== null) {\n      throw new Error(`kernel \"${name}\" is not allowed to be called recursively`);\n    }\n    this.currentKernelId = kernelId;\n\n    // parse attributes if necessary\n    if (attributes[0]) {\n      attributes[1] = attributes[0](attributes[1]);\n      attributes[0] = undefined;\n    }\n\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"${name}\"...`);\n\n    this.temporaryData = [];\n    try {\n      kernelEntry(context, attributes[1]);\n      return 0;  // ORT_OK\n    } catch (e) {\n      LOG_DEBUG('warning', `[WebGPU] Kernel \"${name}\" failed. Error: ${e}`);\n      return 1;  // ORT_FAIL\n    } finally {\n      for (const data of this.temporaryData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.temporaryData = [];\n      this.currentKernelId = null;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {OrtWasmModule} from '../binding/ort-wasm';\nimport {DataType, getTensorElementSize} from '../wasm-common';\n\nimport {WebGpuBackend} from './backend-webgpu';\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {ShapeUtil} from './util';\nimport {ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/* eslint-disable no-bitwise */\n\nclass TensorViewImpl implements TensorView {\n  constructor(\n      private module: OrtWasmModule, public readonly dataType: number, public readonly data: number,\n      public readonly dims: readonly number[]) {}\n\n  getFloat32Array(): Float32Array {\n    if (this.dataType !== DataType.float) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new Float32Array() :\n                                new Float32Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getBigInt64Array(): BigInt64Array {\n    if (this.dataType !== DataType.int64) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new BigInt64Array() :\n                                new BigInt64Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  reshape(newDims: readonly number[]): TensorView {\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n      throw new Error('Invalid new shape');\n    }\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\n  }\n}\n\nclass ComputeContextImpl implements ComputeContext {\n  readonly opKernelContext: number;\n  readonly inputs: readonly TensorView[];\n  get customData(): {[key: string]: unknown} {\n    return this.backend.currentKernelCustomData;\n  }\n  constructor(private module: OrtWasmModule, private backend: WebGpuBackend, contextDataOffset: number) {\n    const heapU32 = module.HEAPU32;\n\n    // extract context data\n    let dataIndex = (contextDataOffset >> 2);\n    this.opKernelContext = heapU32[dataIndex++];\n    const inputCount = heapU32[dataIndex++];\n\n    const inputs: TensorView[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = heapU32[dataIndex++];\n      const data = heapU32[dataIndex++];\n      const dim = heapU32[dataIndex++];\n      const dims: number[] = [];\n      for (let d = 0; d < dim; d++) {\n        dims.push(heapU32[dataIndex++]);\n      }\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\n    }\n    this.inputs = inputs;\n  }\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[] {\n    // prepare inputs. inputs should always be valid data.\n    const mappedInputs =\n        inputsOutputsMapping?.inputs?.map(i => typeof i === 'number' ? this.inputs[i] : i) ?? this.inputs;\n    // prepare outputs.\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\n        new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\n      const elementSize = getTensorElementSize(dataType);\n      if (!elementSize) {\n        throw new Error(`Unsupported data type: ${dataType}`);\n      }\n      const bufferSize = elementSize * ShapeUtil.size(dims);\n      return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\n    };\n    return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\n  }\n\n  output(index: number, dims: readonly number[]): number {\n    const stack = this.module.stackSave();\n    try {\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\n      let offset = data >> 2;\n      this.module.HEAPU32[offset++] = dims.length;\n      for (let i = 0; i < dims.length; i++) {\n        this.module.HEAPU32[offset++] = dims[i];\n      }\n      return this.module._JsepOutput(this.opKernelContext, index, data);\n    } finally {\n      this.module.stackRestore(stack);\n    }\n  }\n}\n\nexport const init = async(module: OrtWasmModule, env: Env): Promise<void> => {\n  const init = module.jsepInit;\n  if (init && navigator.gpu) {\n    if (!env.wasm.simd) {\n      throw new Error(\n          'Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP');\n    }\n    const backend = new WebGpuBackend();\n    await backend.initialize(env);\n\n    init(\n        // backend\n        {backend},\n\n        // jsepAlloc()\n        (size: number) => backend.alloc(size),\n\n        // jsepFree()\n        (ptr: number) => backend.free(ptr),\n\n        // jsepCopy(src, dst, size, isSourceGpu)\n        (src: number, dst: number, size: number, isSourceGpu = false) => {\n          if (isSourceGpu) {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\n            backend.memcpy(src, dst);\n          } else {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\n            const data = module.HEAPU8.subarray(src, src + size);\n            backend.upload(dst, data);\n          }\n        },\n\n        // jsepCopyAsync(src, dst, size)\n        async(gpuDataId: number, dataOffset: number, size: number):\n            Promise<void> => {\n              LOG_DEBUG(\n                  'verbose',\n                  () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`);\n\n              await backend.download(gpuDataId, () => module.HEAPU8.subarray(dataOffset, dataOffset + size));\n            },\n\n        // jsepCreateKernel\n        (name: string, kernel: number, attribute: unknown) => backend.createKernel(name, kernel, attribute),\n\n        // jsepReleaseKernel\n        (kernel: number) => backend.releaseKernel(kernel),\n\n        // jsepRun\n        (kernel: number, contextDataOffset: number) => {\n          LOG_DEBUG('verbose', () => `[WebGPU] jsepRun: kernel=${kernel}, contextDataOffset=${contextDataOffset}`);\n          const context = new ComputeContextImpl(module, backend, contextDataOffset);\n          return backend.computeKernel(kernel, context);\n        });\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {logLevelStringToEnum} from '../wasm-common';\n\ntype LogLevel = NonNullable<Env['logLevel']>;\ntype MessageString = string;\ntype MessageFunction = () => string;\ntype Message = MessageString|MessageFunction;\n\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\n\nconst doLog = (level: number, message: string): void => {\n  // eslint-disable-next-line no-console\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\n};\n\nlet configLogLevel: LogLevel|undefined;\nlet debug: boolean|undefined;\n\nexport const configureLogger = ($configLogLevel: LogLevel, $debug: boolean): void => {\n  configLogLevel = $configLogLevel;\n  debug = $debug;\n};\n\n/**\n * A simple logging utility to log messages to the console.\n */\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\n  const messageLevel = logLevelStringToEnum(logLevel);\n  const configLevel = logLevelStringToEnum(configLogLevel);\n  if (messageLevel >= configLevel) {\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\n  }\n};\n\n/**\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\n */\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\n  if (debug) {\n    LOG(...args);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable no-param-reassign */\n\nexport class MatMulUtil {\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\nexport class ShapeUtil {\n  /**\n   * calculate the size (number of elements)\n   */\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) from the given axis (inclusive)\n   */\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) to the given axis (exclusive)\n   */\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  /**\n   * calculate the size (number of elements) from and to the given axis [start, end)\n   */\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be negative.\n      if (dims[i] < 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank ?? axes.length));\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]): void {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], isChannelLast: boolean, autoPad?: string): void {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + (isChannelLast ? 1 : 2)], strides[dim], dilations[dim], kernelShape[dim], pads, dim,\n          dim + inputDims.length - 2, autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\n/**\n * create a new object from the given attribute, and add a cacheKey property to it\n */\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {GpuData, GpuDataId, GpuDataType} from './types';\n\n/**\n * manages GpuDataId -> GpuBuffer\n */\nexport interface GpuDataManager {\n  /**\n   * copy data from CPU to GPU.\n   */\n  upload(id: GpuDataId, data: Uint8Array): void;\n  /**\n   * copy data from GPU to GPU.\n   */\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\n  /**\n   * create new data on GPU.\n   */\n  create(size: number, usage?: number): GpuData;\n  /**\n   * get GPU data by ID.\n   */\n  get(id: GpuDataId): GpuData|undefined;\n  /**\n   * release the data on GPU by ID.\n   *\n   * @return size of the data released\n   */\n  release(id: GpuDataId): number;\n  /**\n   * copy data from GPU to CPU.\n   */\n  download(id: GpuDataId): Promise<ArrayBufferLike>;\n\n  /**\n   * refresh the buffers that marked for release.\n   *\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\n   * actually released.\n   */\n  refreshPendingBuffers(): void;\n}\n\ninterface StorageCacheValue {\n  gpuData: GpuData;\n  originalSize: number;\n}\n\ninterface DownloadCacheValue {\n  data: Promise<ArrayBufferLike>;\n}\n\n/**\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\n */\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\n\nlet guid = 0;\nconst createNewGpuDataId = () => guid++;\n\nclass GpuDataManagerImpl implements GpuDataManager {\n  // GPU Data ID => GPU Data ( storage buffer )\n  storageCache: Map<GpuDataId, StorageCacheValue>;\n\n  // GPU Data ID => GPU Data ( read buffer )\n  downloadCache: Map<GpuDataId, DownloadCacheValue>;\n\n  // pending buffers for uploading ( data is unmapped )\n  private buffersForUploadingPending: GPUBuffer[];\n  // pending buffers for computing\n  private buffersPending: GPUBuffer[];\n\n  constructor(private backend: WebGpuBackend /* , private reuseBuffer: boolean */) {\n    this.storageCache = new Map();\n    this.downloadCache = new Map();\n    this.buffersForUploadingPending = [];\n    this.buffersPending = [];\n  }\n\n  upload(id: GpuDataId, data: Uint8Array): void {\n    const srcArrayBuffer = data.buffer;\n    const srcOffset = data.byteOffset;\n    const srcLength = data.byteLength;\n    const size = calcNormalizedBufferSize(srcLength);\n\n    // get destination gpu buffer\n    const gpuDataCache = this.storageCache.get(id);\n    if (!gpuDataCache) {\n      throw new Error('gpu data for uploading does not exist');\n    }\n    if (gpuDataCache.originalSize !== srcLength) {\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n    }\n\n    // create gpu buffer\n    const gpuBufferForUploading = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC});\n\n    // copy (upload) data\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n    gpuBufferForUploading.unmap();\n\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\n  }\n\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\n    // get source gpu buffer\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\n    if (!sourceGpuDataCache) {\n      throw new Error('source gpu data for memcpy does not exist');\n    }\n    // get destination gpu buffer\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\n    if (!destinationGpuDataCache) {\n      throw new Error('destination gpu data for memcpy does not exist');\n    }\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n      throw new Error('inconsistent source and destination gpu data size');\n    }\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(\n        sourceGpuDataCache.gpuData.buffer, 0, destinationGpuDataCache.gpuData.buffer, 0, size);\n  }\n\n  // eslint-disable-next-line no-bitwise\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\n    // !!!\n    // !!! IMPORTANT: TODO: whether we should keep the storage buffer every time, or always create new ones.\n    // !!!                  This need to be figured out by performance test results.\n    // !!!\n\n    const bufferSize = calcNormalizedBufferSize(size);\n\n    // create gpu buffer\n    const gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\n\n    const gpuData = {id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer};\n    this.storageCache.set(gpuData.id, {gpuData, originalSize: size});\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n    return gpuData;\n  }\n\n  get(id: GpuDataId): GpuData|undefined {\n    return this.storageCache.get(id)?.gpuData;\n  }\n\n  release(id: GpuDataId): number {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('releasing data does not exist');\n    }\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n\n    this.storageCache.delete(id);\n    this.buffersPending.push(cachedData.gpuData.buffer);\n    // cachedData.gpuData.buffer.destroy();\n\n    const downloadingData = this.downloadCache.get(id);\n    if (downloadingData) {\n      this.downloadCache.delete(id);\n    }\n\n    return cachedData.originalSize;\n  }\n\n  async download(id: GpuDataId): Promise<ArrayBufferLike> {\n    const downloadData = this.downloadCache.get(id);\n    if (downloadData) {\n      return downloadData.data;\n    }\n\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('data does not exist');\n    }\n\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    const bufferSize = calcNormalizedBufferSize(cachedData.originalSize);\n    const gpuReadBuffer = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {size: bufferSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});\n    commandEncoder.copyBufferToBuffer(\n        cachedData.gpuData.buffer /* source buffer */, 0 /* source offset */, gpuReadBuffer /* destination buffer */,\n        0 /* destination offset */, bufferSize /* size */\n    );\n    this.backend.flush();\n\n    const readDataPromise = new Promise<ArrayBuffer>((resolve) => {\n      gpuReadBuffer.mapAsync(GPUMapMode.READ).then(() => {\n        const data = gpuReadBuffer.getMappedRange().slice(0);\n        gpuReadBuffer.destroy();\n        resolve(data);\n      });\n    });\n\n    this.downloadCache.set(id, {data: readDataPromise});\n\n    return readDataPromise;\n  }\n\n  refreshPendingBuffers(): void {\n    for (const buffer of this.buffersForUploadingPending) {\n      buffer.destroy();\n    }\n    for (const buffer of this.buffersPending) {\n      buffer.destroy();\n    }\n  }\n}\n\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\n    new GpuDataManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as binaryOps from './ops/binary-op';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {gemm, parseGemmAttributes} from './ops/gemm';\nimport {matMul} from './ops/matmul';\nimport * as pool from './ops/pool';\nimport {parseReduceAttributes, reduceL1, reduceL2, reduceLogSum, reduceLogSumExp, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum, reduceSumSquare} from './ops/reduce';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {ComputeContext} from './types';\n\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\nexport type OperatorImplementation = [RunFunction]|[RunFunction, ParseAttributeFunction];\n\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\n  ['Abs', [unaryOps.abs]],\n  ['Acos', [unaryOps.acos]],\n  ['Acosh', [unaryOps.acosh]],\n  ['Add', [binaryOps.add]],\n  ['Asin', [unaryOps.asin]],\n  ['Asinh', [unaryOps.asinh]],\n  ['Atan', [unaryOps.atan]],\n  ['Atanh', [unaryOps.atanh]],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\n  ['Ceil', [unaryOps.ceil]],\n  ['ClipV10', [unaryOps.clipV10]],\n  ['Clip', [unaryOps.clip]],\n  ['Conv', [conv, parseConvAttributes]],\n  ['Cos', [unaryOps.cos]],\n  ['Cosh', [unaryOps.cosh]],\n  ['Div', [binaryOps.div]],\n  ['Elu', [unaryOps.elu, unaryOps.parseAlphaAttributes]],\n  ['Erf', [unaryOps.erf]],\n  ['Exp', [unaryOps.exp]],\n  ['Floor', [unaryOps.floor]],\n  ['Gemm', [gemm, parseGemmAttributes]],\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\n  ['LeakyRelu', [unaryOps.leakyRelu, unaryOps.parseAlphaAttributes]],\n  ['MatMul', [matMul]],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\n  ['Mul', [binaryOps.mul]],\n  ['Neg', [unaryOps.neg]],\n  ['Pow', [binaryOps.pow]],\n  ['Reciprocal', [unaryOps.reciprocal]],\n  ['ReduceMin', [reduceMin, parseReduceAttributes]],\n  ['ReduceMean', [reduceMean, parseReduceAttributes]],\n  ['ReduceMax', [reduceMax, parseReduceAttributes]],\n  ['ReduceSum', [reduceSum, parseReduceAttributes]],\n  ['ReduceProd', [reduceProd, parseReduceAttributes]],\n  ['ReduceL1', [reduceL1, parseReduceAttributes]],\n  ['ReduceL2', [reduceL2, parseReduceAttributes]],\n  ['ReduceLogSum', [reduceLogSum, parseReduceAttributes]],\n  ['ReduceLogSumExp', [reduceLogSumExp, parseReduceAttributes]],\n  ['ReduceSumSquare', [reduceSumSquare, parseReduceAttributes]],\n  ['Relu', [unaryOps.relu]],\n  ['Sigmoid', [unaryOps.sigmoid]],\n  ['Sin', [unaryOps.sin]],\n  ['Sinh', [unaryOps.sinh]],\n  ['Sqrt', [unaryOps.sqrt]],\n  ['Sub', [binaryOps.sub]],\n  ['Tan', [unaryOps.tan]],\n  ['Tanh', [unaryOps.tanh]],\n  ['ThresholdedRelu', [unaryOps.thresholdedRelu, unaryOps.parseAlphaAttributes]],\n  ['Transpose', [transpose, parseTransposeAttributes]],\n]);\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\n//\n// modified to fit the needs of the project\n\nexport declare type Activation = 'linear' | 'relu' | 'prelu' | 'elu' | 'relu6' | 'leakyrelu' | 'sigmoid';\n\nexport const typeSnippet = (component: number) => {\n  switch (component) {\n    case 1:\n      return 'f32';\n    case 2:\n      return 'vec2<f32>';\n    case 3:\n      return 'vec3<f32>';\n    case 4:\n      return 'vec4<f32>';\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport const activationFnSnippet =\n    (activation?: Activation, _hasPreluActivationWeights = false, _packed = false, _coordsLength = 3): string => {\n      if (!activation) {\n        return '';\n      }\n\n      // TODO: add implementations\n      return '';\n    };\n\nexport const biasActivationSnippet = (hasBias: boolean, activation?: Activation): string => `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {ConvAttributes} from '../conv';\n\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {utilFunctions} from './conv_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\n\nconst conv2dCommonSnippet =\n    (isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean, fitInner: boolean, addBias = false,\n     activation?: Activation, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4,\n     innerElementSize = 4): string => {\n      const getXSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'resData = x[xIndex];';\n          case 3:\n            return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n          case 4:\n            return 'resData = x[xIndex / 4];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const getWSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'return w[row * wShape[3] + colIn];';\n          case 4:\n            return 'return w[row * wShape[3] / 4 + colIn];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const coordASnippet = isChannelsLast ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ` :\n                                             `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n\n      const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` :\n                                               `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n      const xHeight = isChannelsLast ? 'xShape[1]' : 'xShape[2]';\n      const xWidth = isChannelsLast ? 'xShape[2]' : 'xShape[3]';\n      const row = isChannelsLast ? 'row' : 'col';\n      const col = isChannelsLast ? 'col' : 'row';\n      const readXSnippet = `\n    let inChannels = wShape[2];\n    let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (filterDims[1] * inChannels);\n    let WCol = ${col} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, xShape);\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n\n      const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimAOuter && col < dimInner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                       (fitInner && fitBOuter ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimInner && col < dimBOuter) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n      const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n      const resType = typeSnippet(innerElementSize);\n      const aType = isChannelsLast ? typeSnippet(innerElementSizeX) : typeSnippet(innerElementSizeW);\n      const bType = isChannelsLast ? typeSnippet(innerElementSizeW) : typeSnippet(innerElementSizeX);\n      const userCode = `\n    ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < dimAOuter && col < dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n      ${coordResSnippet}\n      ${biasActivationSnippet(addBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n      return userCode;\n    };\n\nexport const createConv2DMatMulProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\n     sequentialAccessByThreads: boolean): ProgramInfo => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n      const batchSize = outputShape[0];\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n      const isVec4 = (((inChannels % 4 === 0 || inChannels % 3 === 0) && isChannelsLast) ||\n                      (outWidth % 4 === 0 && !isChannelsLast)) &&\n          outChannels % 4 === 0;\n\n      // TODO: fine tune size\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] =\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\n      const elementsPerThread =\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\n      ];\n\n      LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\n\n      const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n      const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n\n      const fitAOuter = dimAOuter % tileAOuter === 0;\n      const fitBOuter = dimBOuter % tileBOuter === 0;\n      const fitInner = dimInner % tileInner === 0;\n\n      const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\n        `@group(0) @binding(1) var<storage, read> w: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\n      ];\n      let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\n      }`;\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\n        declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n      }\n\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: () => `\n        ${utilFunctions}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${declareInputs.join('')}\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\n            isVec4 ? 'vec4<f32>' : 'f32'}>;\n        //@group(0) @binding(${declareInputs.length + 1}) var<uniform> uniforms: Uniforms;\n\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        const dimAOuter : i32 = ${dimAOuter};\n        const dimBOuter : i32 = ${dimBOuter};\n        const dimInner : i32 = ${dimInner};\n        ${declareFunctions}\n        ${\n            conv2dCommonSnippet(\n                isChannelsLast, fitAOuter, fitBOuter, fitInner, hasBias, undefined, false, elementsSize[0],\n                elementsSize[1], elementsSize[2])}\n            ${\n            isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, !isChannelsLast, tileInner) :\n                     makeMatMulPackedSource(\n                         elementsPerThread, workGroupSize, !isChannelsLast, tileInner, false, undefined,\n                         sequentialAccessByThreads)}`\n      };\n    };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\n//\n// modified to fit the needs of the project\n\nexport const utilFunctions = `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\n}\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\n//\n// modified to fit the needs of the project\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol);\n        `;\n  }\n};\n\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\n  if (transposeA) {\n    return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n  } else {\n    return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n  }\n};\n\nexport const makeMatMulPackedVec4Source =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, isVectorA = false): string => {\n      const tileAOuter = workgroupSize[1] * workPerThread[1];\n      const tileBOuter = workgroupSize[0] * workPerThread[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n      const innerElementSize = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n\n      if (!(((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n             (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n            tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\n        throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${\n            innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${\n            tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${\n            workPerThread[0]} must be 4.`);\n      }\n      return `\nvar<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = ${isVectorA ? '0' : 'localRow * rowPerThread'};\n  let tileCol = i32(localId.x);\n\n  let globalRow = ${isVectorA ? '0' : 'i32(globalId.y) * rowPerThread'};\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n  var acc: array<vec4<f32>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n    };\n\nconst writeDataToSubASnippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol);\n            `;\n\n  } else {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol);\n            `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) =>\n    transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport const makeMatMulPackedSource =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false): string => {\n      const tileAOuter = workPerThread[1] * workgroupSize[1];\n      const tileBOuter = workPerThread[0] * workgroupSize[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n\n      if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 &&\n            tileInner % workgroupSize[1] === 0)) {\n        throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n            workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n            workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n      }\n      const rowPerThreadA = tileAHight / workgroupSize[1];\n      const colPerThreadA = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n      const matmulSnippet = sequentialAccessByThreads ?\n          `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol);\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<f32, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${\n              transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n                           `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    ` :\n          `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol);\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<f32, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n\n      return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${matmulSnippet}\n  }\n`;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\ntype BinaryFunctionCall = BuiltinFunctionName|BinaryCustomExpression|{\n  scalar: BinaryCustomExpression;\n  vector: BinaryCustomExpression;\n};\n\nconst createBinaryOpProgramShader =\n    (shaderHelper: ShaderHelper, dimsA: readonly number[], dimsB: readonly number[], dimsOutput: readonly number[],\n     vectorize: boolean, doBroadcast: boolean, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     typeA = 'f32', typeB = 'f32', typeOutput = 'f32') => {\n      const outputSize = ShapeUtil.size(dimsOutput);\n      const vecSize = Math.ceil(outputSize / 4);\n\n      let expressionScalar: BinaryCustomExpression;\n      let expressionVector: BinaryCustomExpression;\n      if (typeof funcCall === 'string') {\n        expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\n      } else if (typeof funcCall === 'function') {\n        expressionScalar = expressionVector = funcCall;\n      } else {\n        expressionScalar = funcCall.scalar;\n        expressionVector = funcCall.vector;\n      }\n\n      let broadcastImpl = '';\n      const outputIndicesHelper = createIndicesHelper('output', dimsOutput);\n      if (doBroadcast) {\n        const calcOffsetImpl = (dims: readonly number[]) => {\n          const strides = ShapeUtil.computeStrides(dims);\n          const offsets: string[] = [];\n          for (let i = dims.length - 1; i >= 0; i--) {\n            const idx = dimsOutput.length === 0 ? '0u' :\n                (dimsOutput.length === 1)       ? '(*outputIndices)' :\n                                                  `(*outputIndices)[${i + dimsOutput.length - dims.length}]`;\n            offsets.push(`${strides[i]}u * (${idx} % ${dims[i]}u)`);\n          }\n          return offsets.length > 0 ? offsets.join('+') : '0u';\n        };\n\n        broadcastImpl = `\n  ${outputIndicesHelper.o2iImpl}\n\n  fn calcOffsetA(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsA)};\n  }\n\n  fn calcOffsetB(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsB)};\n  }\n  `;\n      }\n\n      let assignment: string;\n      if (vectorize) {\n        if (doBroadcast) {\n          assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${outputIndicesHelper.o2iCall('global_idx * 4u', 'outputIndices')}\n      let offsetA = calcOffsetA(&outputIndices);\n      let offsetB = calcOffsetB(&outputIndices);\n      outputData[global_idx] = ${expressionVector('aData[offsetA / 4u]', 'bData[offsetB / 4u]')};`;\n        } else {\n          assignment = `outputData[global_idx] = ${expressionVector('aData[global_idx]', 'bData[global_idx]')};`;\n        }\n      } else {\n        if (!doBroadcast) {\n          throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\n        }\n        const singleAssignment = (x: number) => {\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\n          return `\n      ${outputIndicesHelper.o2iCall(`global_idx * 4u + ${x}u`, 'outputIndices')}\n      let offsetA${x} = calcOffsetA(&outputIndices);\n      let offsetB${x} = calcOffsetB(&outputIndices);\n      let indexA${x} = offsetA${x} / 4u;\n      let indexB${x} = offsetB${x} / 4u;\n      let componentA${x} = offsetA${x} % 4u;\n      let componentB${x} = offsetB${x} % 4u;\n      outputData[global_idx][${x}] = ${expressionScalar(expressionA, expressionB)};`;\n        };\n\n        assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${singleAssignment(0)}\n      ${singleAssignment(1)}\n      ${singleAssignment(2)}\n      ${singleAssignment(3)}`;\n      }\n\n      return `\n  @group(0) @binding(0) var<storage, read> aData : array<vec4<${typeA}>>;\n  @group(0) @binding(1) var<storage, read> bData : array<vec4<${typeB}>>;\n  @group(0) @binding(2) var<storage, read_write> outputData : array<vec4<${typeOutput}>>;\n\n  ${additionalImplementation ?? ''}\n  ${broadcastImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n    ${assignment}\n  }`;\n    };\n\nconst createBinaryOpProgramInfo =\n    (metadata: ProgramMetadata, a: TensorView, b: TensorView, funcCall: BinaryFunctionCall,\n     additionalImplementation?: string, outputDataType: number = a.dataType): ProgramInfo => {\n      const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\n      let outputShape = a.dims;\n      let outputSize = ShapeUtil.size(a.dims);\n\n      let vectorize = false;\n\n      // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        outputSize = ShapeUtil.size(outputShape);\n\n        // check whether vectorize can be enabled\n        let sharedDimension = 1;\n        for (let i = 0; i < outputShape.length; i++) {\n          const dimA = a.dims[a.dims.length - i] ?? 1;\n          const dimB = b.dims[b.dims.length - i] ?? 1;\n          if (dimA === dimB) {\n            sharedDimension *= dimA;\n          } else {\n            break;\n          }\n        }\n        if (sharedDimension % 4 === 0) {\n          vectorize = true;\n        }\n\n\n      } else {\n        // element-wise\n        vectorize = true;\n      }\n\n      return {\n        ...metadata,\n        getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\n            shaderHelper, a.dims, b.dims, outputShape, vectorize, isBroadcast, funcCall, additionalImplementation),\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () =>\n            ({x: Math.ceil(outputSize / 64 /* workgroup size */ / (vectorize ? 4 : 1) /* vec size */)})\n      };\n    };\n\nconst createBinaryOpProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata:\n          ProgramMetadata = {name, inputTypes: [GpuDataType.default, GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createBinaryOpProgramInfo(metadata, inputs[0], inputs[1], funcCall, additionalImplementation)\n      };\n    };\n\nexport const add = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Add', (a, b) => `${a}+${b}`));\n};\n\nexport const div = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Div', (a, b) => `${a}/${b}`));\n};\n\nexport const mul = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Mul', (a, b) => `${a}*${b}`));\n};\n\nexport const pow = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Pow', ({scalar: (a, b) => `pow_f32(${a},${b})`, vector: (a, b) => `pow_vf32(${a},${b})`}), `\n    fn pow_f32(a : f32, b : f32) -> f32 {\n      if (b == 0.0) {\n        return 1.0;\n      } else if (a < 0.0 && b != floor(b)) {\n        return pow(a, b); // NaN\n      }\n      return select(sign(a), 1.0, round(abs(b) % 2.0) != 1.0) * pow(abs(a), b);\n    }\n    fn pow_vf32(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {\n      // TODO: implement vectorized pow\n      return vec4<f32>(pow_f32(a.x, b.x), pow_f32(a.y, b.y), pow_f32(a.z, b.z), pow_f32(a.w, b.w));\n    }\n      `));\n};\n\nexport const sub = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Sub', (a, b) => `${a}-${b}`));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\n/**\n * constant value for a workgroup size.\n *\n * We definitely can do further optimization in future, but for now we use 64.\n *\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\n *                needs something different.\n *\n * from: https://surma.dev/things/webgpu/\n **/\nexport const WORKGROUP_SIZE = 64;\n\nexport interface IndicesHelper {\n  /**\n   * WGSL code of function implementation for offset-to-indices\n   */\n  o2iImpl: string;\n  /**\n   * WGSL code of function call for offset-to-indices\n   */\n  o2iCall: (varOffset: string, varIndices: string) => string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   */\n  i2oImpl: string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   *\n   * @param isPtr - whether the variable is a pointer. default is false.\n   */\n  i2oExpression: (varIndices: string, isPtr?: boolean) => string;\n  /**\n   * WGSL code of indices variable declaration\n   *\n   * @param v - variable name.\n   * @param init - initial value.\n   */\n  indicesVariableDeclaration: (v: string, init?: string[]) => string;\n  /**\n   * data type of indices\n   */\n  iType: string;\n}\n\nexport const createIndicesHelper = (name: string, shape: readonly number[]): IndicesHelper => {\n  const iType = shape.length < 2 ? 'u32' : `array<u32, ${shape.length}>`;\n\n  const strides = ShapeUtil.computeStrides(shape);\n  let o2iSnippet = '';\n  for (let i = 0; i < shape.length - 1; i++) {\n    o2iSnippet += `\n    let dim${i} = current / ${strides[i]}u;\n    let rest${i} = current % ${strides[i]}u;\n    (*indices)[${i}] = dim${i};\n    current = rest${i};\n    `;\n  }\n  o2iSnippet += `(*indices)[${shape.length - 1}] = current;`;\n\n  const o2iImpl = shape.length < 2 ? '' : `\n  fn ih_o2i_${name}(offset: u32, indices: ptr<function, ${iType}>) {\n    var current = offset;\n    ${o2iSnippet}\n  }`;\n\n  const o2iCall = (varOffset: string, varIndices: string) =>\n      shape.length < 2 ? `${varIndices}=${varOffset};` : `ih_o2i_${name}(${varOffset}, &${varIndices});`;\n\n  const offsets: string[] = [];\n  if (shape.length === 0) {\n    offsets.push('0u');\n  } else if (shape.length < 2) {\n    offsets.push('(*indices)');\n  } else {\n    for (let i = shape.length - 1; i >= 0; i--) {\n      offsets.push(`${strides[i]}u * ((*indices)[${i}])`);\n    }\n  }\n\n  const i2oImpl = shape.length < 2 ? '' : `\n  fn ih_i2o_${name}(indices: ptr<function, ${iType}>) -> u32 {\n    return ${offsets.join('+')};\n  }`;\n\n  const i2oExpression = (varIndices: string, isPtr?: boolean) =>\n      shape.length < 2 ? `(${isPtr ? '*' : ''}${varIndices})` : `ih_i2o_${name}(${isPtr ? '' : '&'}${varIndices})`;\n\n  const indicesVariableDeclaration = (v: string, init?: string[]) =>\n      `var ${v}:${iType}${init ? `=${iType}(${init.join(',')})` : ''};`;\n\n  return {o2iImpl, o2iCall, i2oImpl, i2oExpression, indicesVariableDeclaration, iType};\n};\n\n/**\n * A ShaderHelper is a helper class for generating WGSL code.\n */\nexport interface ShaderHelper {\n  mainStart(workgroupSize?: number|[number, number, number]): string;\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\n}\n\nclass ShaderHelperImpl implements ShaderHelper {\n  constructor(private normalizedDispatchGroup: [number, number, number]) {}\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number|string): string {\n    // Guard against out-of-bounds work group sizes\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\n  }\n  mainStart(workgroupSize: number|[number, number, number] = WORKGROUP_SIZE) {\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\n\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n    const paramList = is1DimensionDispatch ? '@builtin(global_invocation_id) global_id : vec3<u32>' :\n                                             `@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`;\n    const globalIdxDefinition = is1DimensionDispatch ?\n        'let global_idx = global_id.x;' :\n        `let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0] * this.normalizedDispatchGroup[1]}u +\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${\n            workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_index;`;\n\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n  }\n}\n\nexport const createShaderHelper = (dispatchGroup: [number, number, number]): ShaderHelper =>\n    new ShaderHelperImpl(dispatchGroup);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createGroupedConvProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += b[output_channel];' : '';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n\n      const dataType = 'f32';  // TODO: support other data type\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> x : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> w : array<${dataType}>;`\n      ];\n      if (hasBias) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> b : array<${dataType}>;`);\n      }\n\n      const isChannelLast = attributes.format === 'NHWC';\n      const outputShape = calculateOutputShape(\n          xShape, wShape, attributes.dilations, attributes.pads, attributes.strides, isChannelLast);\n      const outputSize = ShapeUtil.size(outputShape);\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const xIndicesHelper = createIndicesHelper('x', xShape);\n      const wIndicesHelper = createIndicesHelper('w', wShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputStorageBuffersDeclarations.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n  ${outputIndicesHelper.o2iImpl}\n  ${xIndicesHelper.i2oImpl}\n  ${wIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\n          isChannelLast ? 2 : 3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\n\n    var value: ${dataType} = ${dataType}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\n            continue;\n          }\n\n          ${\n          xIndicesHelper.indicesVariableDeclaration(\n              'xIndices',\n              isChannelLast ? ['batch', 'xHeight', 'xWidth', 'input_channel'] :\n                              [\n                                'batch', 'input_channel', 'xHeight', 'xWidth'\n                              ])}\n          let xVal = x[${xIndicesHelper.i2oExpression('xIndices')}];\n          ${\n          wIndicesHelper.indicesVariableDeclaration('wIndices', [\n            'output_channel', 'wInChannel', 'wHeight', 'wWidth'\n          ])}\n          let wVal = w[${wIndicesHelper.i2oExpression('wIndices')}];\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\n/**\n * naive grouped conv implementation, supports 1d/2d conv\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\n */\nexport const createGroupedConvProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const metadata = createGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createGroupedConvProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext} from '../types';\n\nimport {createGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {createConv2DMatMulProgramInfoLoader} from './conv2d-mm';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[], isChannelLast: boolean): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly format: 'NHWC'|'NCHW';\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n  readonly wIsConst: boolean;\n}\n\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support conv 1D and 2D');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\n    if (kernelShape[i - 2] === 0) {\n      kernelShape[i - 2] = inputs[1].dims[i];\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.format === 'NHWC',\n      attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernel_shape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.w_is_const as () => boolean)();\n\n  return createAttributeWithCacheKey(\n      {autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes});\n};\n\nconst conv2d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n\n  // check attributes\n\n  const hasBias = inputs.length === 3;\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\n  const isChannelsLast = attributes.format === 'NHWC';\n\n  // const batchSize = context.inputs[0].dims[0];\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const outputShape = calculateOutputShape(\n      inputs[0].dims, inputs[1].dims, attributes.dilations, adjustedAttributes.pads, attributes.strides,\n      isChannelsLast);\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n\n  const sameSize =\n      isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth && attributes.autoPad === 'VALID';\n  if (sameSize ||\n      (weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 &&\n       attributes.strides[0] === 1 && attributes.strides[1] === 1 &&\n       (attributes.autoPad === 'SAME_UPPER' || attributes.autoPad === 'SAME_LOWER' ||\n        attributes.autoPad === 'VALID'))) {\n    // TODO: implement conv2dByMatMul()\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  if (!isChannelsLast || attributes.group !== 1) {\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  // TODO: implement conv2dWithIm2Col()\n\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight = (context.customData.wT as TensorView | undefined) ??\n      context.compute(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: weightTransposeAttribute.cacheKey,\n            get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n          },\n          {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n  if (attributes.wIsConst && !context.customData.wT) {\n    context.customData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convInputs = [inputs[0], transposedWeight];\n  if (hasBias) {\n    if (!isChannelsLast && inputs[2].dims.length === 1) {\n      convInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\n    } else {\n      convInputs.push(inputs[2]);\n    }\n  }\n\n  // STEP.3: compute matmul\n  context.compute(\n      createConv2DMatMulProgramInfoLoader(\n          convInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n          sequentialAccessByThreads),\n      {inputs: convInputs});\n};\n\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n  const strides = [1].concat(attributes.strides);\n  const dilations = [1].concat(attributes.dilations);\n  const kernelShape = [1].concat(attributes.kernelShape);\n  const adjustedAttributes = getAdjustedConvAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createGroupedConvProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []));\n};\n\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\n  validateInputs(context.inputs, attributes);  // currently will fail if not conv1D/2D\n  if (context.inputs[0].dims.length === 3) {\n    conv1d(context, attributes);\n  } else {\n    conv2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConv2DMatMulProgramInfo} from './3rd-party/conv2d_mm_webgpu';\nimport {ConvAttributes} from './conv';\n\n\nconst createConv2DMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'Conv2DMatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createConv2DMatMulProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes, outputShape: readonly number[], dimAOuter: number,\n     dimBOuter: number, dimInner: number, hasBias: boolean, sequentialAccessByThreads: boolean): ProgramInfoLoader => {\n      const metadata = createConv2DMatMulProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConv2DMatMulProgramInfo(\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n            sequentialAccessByThreads)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MAX_CLIP, MIN_CLIP} from '../../util';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport const getActicationSnippet =\n    (attributes: InternalActivationAttributes): {activationFunction: string; applyActivation: string} => {\n      switch (attributes.activation) {\n        case 'Relu':\n          return {activationFunction: '', applyActivation: 'value = max(value, 0.0);'};\n        case 'Sigmoid':\n          return {activationFunction: '', applyActivation: 'value = (1.0 / (1.0 + exp(-value)));'};\n        case 'Clip':\n          return {\n            activationFunction:\n                `const clip_min_=f32(${attributes.clipMin!});const clip_max_=f32(${attributes.clipMax!});`,\n            applyActivation: 'value = clamp(value, clip_min_, clip_max_);'\n          };\n          // TODO: adding other activations that can be fused.\n        default:\n          return {activationFunction: '', applyActivation: ''};\n      }\n    };\n\nexport const parseInternalActivationAttributes =\n    (attributes: Record<string, unknown>|undefined): InternalActivationAttributes => {\n      const activation = attributes?.activation as string || '';\n\n      if (activation === 'Clip') {\n        const [clipMin, clipMax] = attributes?.activation_params as [number, number] || [MIN_CLIP, MAX_CLIP];\n        return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n      }\n      return {activation, activationCacheKey: activation};\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {GemmUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('Invaid input number.');\n  }\n\n  // 'C' can be of dimensionality 0, 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].dataType !== DataType.float) || (inputs[1].dataType !== DataType.float) ||\n      (inputs.length === 3 && inputs[2].dataType !== DataType.float)) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].dataType !== inputs[1].dataType) ||\n      (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n}\n\nconst offsetC = (m: number, n: number, dims: readonly number[]): string => {\n  if (dims.length === 0) {\n    return '0u';\n  }\n\n  const broadcastM = (dims.length === 1 && m !== 1) || (dims.length === 2 && dims[0] !== m);\n  const broadcastN = dims[dims.length - 1] !== n;\n\n  let offset = '0u';\n  if (!broadcastM) {\n    offset += `+ m * ${dims[dims.length - 1]}u`;\n  }\n  if (!broadcastN) {\n    offset += '+n';\n  }\n\n  return offset;\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      const outputSize = ShapeUtil.size(outputShape);\n      let line = '';\n      if (attributes.transA && attributes.transB) {\n        line = 'value += a[k * M + m] * b[n * K + k];';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += a[k * M + m] * b[k * N + n];';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += a[m * K + k] * b[n * K + k];';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += a[m * K + k] * b[k * N + n];';\n      }\n\n      const dataType = 'f32';  // TODO: support other data type\n      const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= alpha;';\n      const calculateC = inputs.length === 3 ? `value += beta * c[${offsetC(M, N, inputs[2].dims)}];` : '';\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> a : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> b : array<${dataType}>;`\n      ];\n      if (inputs.length === 3) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> c : array<${dataType}>;`);\n      }\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n  const alpha = ${dataType}(${attributes.alpha});\n  const beta = ${dataType}(${attributes.beta});\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${calculateC}\n    output[global_id.x] = value;\n\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createGemmProgramInfoLoader = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputTypes: inputs.length === 3 ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                                      [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGemmProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<GemmAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\n\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createMatmulProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes):\n        ProgramInfo => {\n          const aShape = inputs[0].dims;\n          const bShape = inputs[1].dims;\n          const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n          if (!outputShape) {\n            throw new Error('Can\\'t use matmul on the given tensors');\n          }\n          const outputSize = ShapeUtil.size(outputShape);\n          // TODO: support broadcasting\n\n          const dataType = 'f32';  // TODO: support other data type\n          const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n          const M = outputShape[outputShape.length - 2];\n          const K = aShape[aShape.length - 1];\n          const N = outputShape[outputShape.length - 1];\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read> b : array<${dataType}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let stack = global_idx / (M * N);\n    let mn = global_idx % (M * N);\n    let n = global_idx % N;\n    let m = mn / N;\n\n    let offsetA = stack * (M * K);\n    let offsetB = stack * (K * N);\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\n    }\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n          return {\n            ...metadata,\n            outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n            getShaderSource,\n            dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n          };\n        };\n\nexport const createMatmulProgramInfoLoader =\n    (inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n    };\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n};\n\nexport const matMul = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n\n  context.compute(createMatmulProgramInfoLoader(context.inputs, {activation: '', activationCacheKey: ''}));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\n// TODO: support:\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Pool ops supports 2-D inputs only for now.');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    inputs: readonly TensorView[], attributes: AttributeType, isGlobalOperator: boolean): [AttributeType, number[]] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputShapeAsChannelFirst = isChannelsLast ?\n      [inputs[0].dims[0], inputs[0].dims[3], inputs[0].dims[1], inputs[0].dims[2]] :\n      inputs[0].dims.slice();\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n      isGlobalOperator, inputShapeAsChannelFirst, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n  } else {\n    Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n  }\n  return [\n    newAttributes,\n    isChannelsLast ?\n        [\n          outputShapeAsChannelFirst[0], outputShapeAsChannelFirst[2], outputShapeAsChannelFirst[3],\n          outputShapeAsChannelFirst[1]\n        ] :\n        outputShapeAsChannelFirst\n  ];\n};\n\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    shaderHelper: ShaderHelper, inputDims: readonly number[], outputShape: readonly number[], attributes: AttributeType,\n    op1: string, op2: string, dataType: string, start: string): string => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const rank = inputDims.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const xIndicesHelper = createIndicesHelper('x', inputDims);\n\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}] >= ${inputDims[dimIdxW]}) {\n                  pad++;\n                  continue;\n                }\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n      const dimH = inputDims[dimIdxH];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= ${dimH}) {\n                    pad+= ${kw};\n                    continue;\n                  }\n              `;\n      } else {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var value: ${dataType} = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = attributes.pads.length;\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n              }\n              let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n              ${op1}\n            `;\n    }\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            const pads = array<u32, ${padsRank}>(${attributes.pads.map(i => `${i}u`).join(',')});\n            const inputDims = array<u32, ${rank}>(${inputDims.map(i => `${i}u`).join(',')});\n            const kernelStrides = array<u32, ${stridesRank}>(${kernelStrides.map(i => `${i}u`).join(',')});\n            const strides = array<u32, ${stridesRank}>(${attributes.strides.map(i => `${i}u`).join(',')});\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${kernelSize}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${rank - stridesRank}u]\n                    + offsets[j - ${rank - stridesRank}u] - pads[j - 2u];\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  }\n};\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC'|'NCHW';\n}\n\nexport interface PoolCommonAttributes extends FormatAttributes {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\n  format: attributes.format as FormatAttributes['format'],\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\n  ceilMode: attributes.ceil_mode as number,\n  kernelShape: attributes.kernel_shape as [number, number],\n  strides: attributes.strides as [number, number],\n  pads: attributes.pads as [number, number, number, number]\n});\n\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly countIncludePad: boolean;\n}\n\nconst createAveragePoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: AveragePoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n\n      const dataType = 'f32';\n\n      const op1 = 'value += x_val;';\n      let op2 = '';\n      if (adjustedAttributes.countIncludePad) {\n        op2 += `value /= ${dataType}(${kernelSize});`;\n      } else {\n        op2 += `value /= ${dataType}(${kernelSize} - pad);`;\n      }\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper => generatePoolingCode(\n            shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, dataType, '0.0'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode'\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n\n  return createAttributeWithCacheKey({countIncludePad, ...attr});\n};\n\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'AveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nconst globalPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalAveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nconst createMaxPoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: MaxPoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const op1 = `\n      value = max(x_val, value);\n    `;\n      const op2 = '';\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper =>\n            generatePoolingCode(shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, 'f32', '-1e5'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'MaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const storageOrder = attributes.storage_order as number;\n  const dilations = attributes.dilations as [number, number];\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n\n  return createAttributeWithCacheKey({storageOrder, dilations, ...attr});\n};\n\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalMaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\n    throw new Error('Reduce op requires 1 or 2 inputs.');\n  }\n\n  if (inputs.length === 2 && inputs[1].dims.length !== 1) {\n    throw new Error('Invalid axes input dims.');\n  }\n\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  keepDims: boolean;\n  noopWithEmptyAxes: boolean;\n  axes: number[];\n}\n\ntype ReduceOp = (inputs: readonly TensorView[], axes: number[]) => string[];\nconst noOp: ReduceOp = (): string[] => ['', '', 'value = _A[inputIdx];', ''];\nconst createReduceProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: ReduceAttributes,\n     reduceOp: ReduceOp): ProgramInfo => {\n      const outputShape: number[] = [];\n      const inputShape = inputs[0].dims;\n\n      const idxCopy: string[] = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const outputDimsLength = inputs[0].dims.length - (attributes.keepDims ? 0 : axes.length);\n      const ops = reduceOp(inputs, axes);\n      const inputIndicesHelper = createIndicesHelper('input', inputShape);\n      const initInputIdx = (ops[1] === '') ? '' : `let inputIdx = ${inputIndicesHelper.i2oExpression('inputIndices')};`;\n      let reduceOps = `\n          let inputIdx = ${inputIndicesHelper.i2oExpression('inputIndices')};\n          ${ops[2]};`;\n      const reduceOnAllAxes = !attributes.noopWithEmptyAxes && attributes.axes.length === 0;\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (reduceOnAllAxes || axes.indexOf(k) >= 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `for(var j${k}: u32 = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n                            inputIndices[${k}] = j${k};\n                            ${reduceOps}\n                          }`;\n        } else {\n          if (outputDimsLength > 1) {\n            idxCopy.push(`inputIndices[${k}] = outputIndices[${outputShape.length}];`);\n          } else {\n            idxCopy.push(`inputIndices[${k}] = outputIndices;`);\n          }\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const outputSize = ShapeUtil.size(outputShape);\n      const dataType = 'f32';\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n          @group(0) @binding(0) var<storage, read> _A : array<${dataType}>;\n          @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n          ${outputIndicesHelper.o2iImpl}\n          ${inputIndicesHelper.i2oImpl}\n\n          ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n          ${inputIndicesHelper.indicesVariableDeclaration('inputIndices')}\n          ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n          ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n\n          var value = ${dataType}(0);\n\n          ${idxCopy.join('\\n')}\n          ${ops[0]}       // init ops for reduce max/min\n          ${initInputIdx}\n          ${ops[1]}\n          ${reduceOps}\n          ${ops[3]}       // final computation for reduce mean\n          output[global_idx] = value;\n        }`;\n\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createReduceAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: ReduceAttributes): ReduceAttributes => {\n      const axes: number[] = [];\n      if (inputs[1].dims[0] > 0) {\n        inputs[1].getBigInt64Array().forEach(v => axes.push(Number(v)));\n      }\n      return createAttributeWithCacheKey(\n          {axes, keepDims: attributes.keepDims, noopWithEmptyAxes: attributes.noopWithEmptyAxes});\n    };\n\nconst createReduceProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, attributes: ReduceAttributes, reduceOp: ReduceOp):\n        ProgramInfoLoader => {\n          const updatedAttributes: ReduceAttributes =\n              inputs.length === 1 ? attributes : createReduceAttributesFromInputs(inputs, attributes);\n          const metadata:\n              ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: updatedAttributes.cacheKey};\n          return {\n            ...metadata,\n            get: () => createReduceProgramInfo(\n                metadata, [inputs[0]], updatedAttributes,\n                updatedAttributes.noopWithEmptyAxes && updatedAttributes.axes.length === 0 ? noOp : reduceOp)\n          };\n        };\n\nexport const reduceLogSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', '', 'value += _A[inputIdx];', 'value = log(value);'];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceLogSum', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceL1 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', '', 'value += abs(_A[inputIdx]);', ''];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL1', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceL2 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = ():\n      string[] => ['var t = f32(0); value = 0.0;', '', 't = _A[inputIdx]; value += (t * t);', 'value = sqrt(value);'];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL2', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceLogSumExp = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', '', 'value += exp(_A[inputIdx]);', 'value = log(value);'];\n  context.compute(\n      createReduceProgramInfoLoader(context.inputs, 'ReduceLogSumExp', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMax = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (inputs: TensorView[], axes: number[]): string[] => {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}`, 'value = _A[inputIdx];', 'value = max(value, _A[inputIdx]);', ''];\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMax', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMean = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (inputs: TensorView[], axes: number[]): string[] => {\n    let size = 1.0;\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        size *= inputs[0].dims[k];\n      }\n    }\n\n    return ['value = 0.0;', '', 'value += _A[inputIdx];', `value = value / ${size}.;`];  // ensure real number with `.`\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMean', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMin = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (inputs: TensorView[], axes: number[]): string[] => {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}`, 'value = _A[inputIdx];', 'value = min(value, _A[inputIdx]);', ''];\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMin', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceProd = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', '', 'value *= _A[inputIdx];', ''];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceProd', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', '', 'value += _A[inputIdx];', ''];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceSum', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceSumSquare = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp =\n      (): string[] => ['var t = f32(0); value = 0.0;', '', 't = _A[inputIdx]; value += t * t;', ''];\n  context.compute(\n      createReduceProgramInfoLoader(context.inputs, 'ReduceSumSquare', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const parseReduceAttributes = (attributes: Record<string, unknown>): ReduceAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<ReduceAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nexport const transposeProgramMetadata = {\n  name: 'Transpose',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('input should be float tensor');\n  }\n};\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] =>\n    (perm && perm.length !== inputShape.length) ? [...(inputShape.keys())].reverse() : perm;\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\n    ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape, perm));\n\nconst permFunctionBody = (perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`fn perm(a: ptr<function, array<u32, ${rank}>>, i: ptr<function, array<u32, ${rank}>>) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\t(*a)[${perm[i]}]=(*i)[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nexport const createTransposeProgramInfo = (input: TensorView, permAttr: number[]): ProgramInfo => {\n  const dataType = 'f32';  // TODO: support other data type\n  const inputShape = input.dims;\n  const perm = getAdjustedPerm(inputShape, permAttr);\n  const outputShape = getOutputShape(inputShape, perm);\n  const rank = inputShape.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  // A dims=[${inputs[0].dims.toString()}]\n  // out Dims=[${unpackedOutputShape.toString()}]\n  // based on perm=[${perm.toString()}]\n\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const inputIndicesHelper = createIndicesHelper('a', inputShape);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n  ${permFunctionBody(perm, rank)}\n  ${outputIndicesHelper.o2iImpl}\n  ${inputIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n    ${inputIndicesHelper.indicesVariableDeclaration('aIndices')}\n    perm(&aIndices, &indices);\n\n    output[global_idx] = a[${inputIndicesHelper.i2oExpression('aIndices')}];\n  }`;\n  return {\n    ...transposeProgramMetadata,\n    outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute({\n    ...transposeProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    get: () => createTransposeProgramInfo(context.inputs[0], attributes.perm)\n  });\n};\n\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\n    createAttributeWithCacheKey({perm: attributes.perm as number[]});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {MAX_CLIP, MIN_CLIP, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype ElementwiseCustomExpression = (expression: string) => string;\ntype ElementwiseFunctionCall = BuiltinFunctionName|ElementwiseCustomExpression;\n\nconst createElementwiseProgramShader =\n    (shaderHelper: ShaderHelper, datasize: number, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): string => {\n      const vecSize = Math.ceil(datasize / 4);\n\n      let expression = '';\n      if (typeof funcCall === 'string') {\n        expression = `${funcCall}(a)`;\n      } else {\n        expression = funcCall('a');\n      }\n      return `\n  @group(0) @binding(0) var<storage, read> inputData : array<vec4<f32>>;\n  @group(0) @binding(1) var<storage, read_write> outputData : array<vec4<f32>>;\n\n  ${additionalImplementation ?? ''}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n\n    let a = inputData[global_idx];\n    outputData[global_idx] = ${expression};\n  }`;\n    };\n\nconst createElementwiseProgramInfo =\n    (metadata: ProgramMetadata, input: TensorView, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): ProgramInfo => ({\n      ...metadata,\n      getShaderSource: shaderHelper =>\n          createElementwiseProgramShader(shaderHelper, ShapeUtil.size(input.dims), funcCall, additionalImplementation),\n      outputs: [{dims: input.dims, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n      dispatchGroup: (inputTensors) =>\n          ({x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */)})\n    });\n\nconst createElementwiseProgramInfoLoader =\n    (input: TensorView, name: string, funcCall: ElementwiseFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createElementwiseProgramInfo(metadata, input, funcCall, additionalImplementation)\n      };\n    };\n\nexport const abs = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Abs', 'abs'));\n};\n\nexport const acos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acos', 'acos'));\n};\n\nexport const acosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acosh', 'acosh'));\n};\n\nexport const asin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asin', 'asin'));\n};\n\nexport const asinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asinh', 'asinh'));\n};\n\nexport const atan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atan', 'atan'));\n};\nexport const atanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atanh', 'atanh'));\n};\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clipV10 = (context: ComputeContext, attributes: ClipAttributes): void => {\n  context.compute(\n      createElementwiseProgramInfoLoader(\n          context.inputs[0], 'Clip', a => `clamp(${a}, clip_min_, clip_max_)`, `\n    const clip_min_: vec4<f32> = vec4(f32(${attributes.min}));\n    const clip_max_: vec4<f32> = vec4(f32(${attributes.max}));\n`,\n          attributes.cacheKey),\n      {inputs: [0]});\n};\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\n  const min = (inputs.length >= 2) ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const clip = (context: ComputeContext): void => {\n  const attributes = generateClipAttributesFromInputs(context.inputs);\n  clipV10(context, attributes);\n};\n\nexport const ceil = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Ceil', 'ceil'));\n};\n\nexport const cos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cos', 'cos'));\n};\n\nexport const cosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cosh', 'cosh'));\n};\n\nexport interface AlphaAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const parseAlphaAttributes = (attributes: Record<string, unknown>): AlphaAttributes =>\n    createAttributeWithCacheKey(attributes as {alpha: number});\n\nexport const elu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Elu', a => `elu_vf32(${a})`, `\n  const elu_alpha_: f32 = f32(${attributes.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n      attributes.cacheKey));\n};\n\nexport const erf = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Erf', a => `erf_vf32(${a})`, `\n  const r0: f32 = 0.3275911;\n  const r1: f32 = 0.254829592;\n  const r2: f32 = -0.284496736;\n  const r3: f32 = 1.421413741;\n  const r4: f32 = -1.453152027;\n  const r5: f32 = 1.061405429;\n\n  fn erf_vf32(v: vec4<f32>) -> vec4<f32> {\n    let absv = abs(v);\n    let x = 1.0 / (1.0 + r0 * absv);\n    return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n  }`));\n};\n\nexport const exp = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Exp', 'exp'));\n};\n\nexport const floor = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Floor', 'floor'));\n};\n\nexport const leakyRelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'LeakyRelu', a => `select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<f32>(0.0))`,\n      `const leaky_relu_alpha_: f32 = f32(${attributes.alpha});`, attributes.cacheKey));\n};\n\nexport const neg = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Neg', a => `-${a}`));\n};\n\nexport const reciprocal = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Reciprocal', a => `1.0/${a}`));\n};\n\nexport const relu = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Relu', a => `select(vec4<f32>(0.0), ${a}, ${a} > vec4<f32>(0.0))`));\n};\n\nexport const sigmoid = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sigmoid', a => `(1.0 / (1.0 + exp(-${a})))`));\n};\n\nexport const sin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sin', 'sin'));\n};\n\nexport const sinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sinh', 'sinh'));\n};\n\nexport const sqrt = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sqrt', 'sqrt'));\n};\n\nexport const tan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tan', 'tan'));\n};\n\nexport const tanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tanh', 'tanh'));\n};\n\nexport const thresholdedRelu = (context: ComputeContext, attributes: AlphaAttributes): number => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'ThresholdedRelu', a => `select(vec4<f32>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,\n      `const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${attributes.alpha});`, attributes.cacheKey));\n  return 0;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {createShaderHelper} from './ops/common';\nimport {Artifact, GpuData, ProgramInfo} from './types';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  attributesBound: boolean;\n\n  constructor(private backend: WebGpuBackend) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: GpuData[], outputs: GpuData[], dispatchGroup: [number, number, number]): void {\n    const device = this.backend.device;\n    const computePassEncoder = this.backend.getComputePassEncoder();\n\n    if (this.backend.profilingEnabled) {\n      // profiling write start timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 0);\n    }\n\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\n    const entries = [];\n    for (const input of inputs) {\n      entries.push({binding: entries.length, resource: {buffer: input.buffer}});\n    }\n    for (const output of outputs) {\n      entries.push({binding: entries.length, resource: {buffer: output.buffer}});\n    }\n    const bindGroup = device.createBindGroup({layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries});\n    computePassEncoder.setBindGroup(0, bindGroup);\n\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n\n    this.backend.pendingDispatchNumber++;\n\n    if (this.backend.profilingEnabled) {\n      // profiling write end timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 1);\n      // eslint-disable-next-line no-bitwise\n      const queryData = this.backend.gpuDataManager.create(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n      // eslint-disable-next-line no-bitwise\n      const syncData = this.backend.gpuDataManager.create(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n      this.backend.endComputePass();\n      this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet, 0, 2, queryData.buffer, 0);\n      this.backend.getCommandEncoder().copyBufferToBuffer(queryData.buffer, 0, syncData.buffer, 0, 16);\n      this.backend.flush();\n\n      const kernelId = this.backend.currentKernelId!;\n      const kernelName = this.backend.kernels.get(kernelId)![0];\n\n      syncData.buffer.mapAsync(GPUMapMode.READ).then(() => {\n        const mappedData = new BigUint64Array(syncData.buffer.getMappedRange());\n        const startTimeU64 = mappedData[0];\n        const endTimeU64 = mappedData[1];\n\n        syncData.buffer.unmap();\n\n        if (typeof this.backend.profilingTimeBase === 'undefined') {\n          this.backend.profilingTimeBase = startTimeU64;\n        }\n\n        const startTime = Number(startTimeU64 - this.backend.profilingTimeBase);\n        const endTime = Number(endTimeU64 - this.backend.profilingTimeBase);\n\n        if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n          throw new RangeError('incorrect timestamp range');\n        }\n\n        this.backend.gpuDataManager.release(queryData.id);\n        this.backend.gpuDataManager.release(syncData.id);\n\n        // eslint-disable-next-line no-console\n        console.log(`[profiling] kernel \"${kernelId}|${kernelName}\" execution time: ${endTime - startTime} ns`);\n      });\n    }\n\n    if (this.backend.pendingDispatchNumber >= 16) {\n      this.backend.flush();\n    }\n  }\n  dispose(): void {\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\n    const device = this.backend.device;\n\n    const code = programInfo.getShaderSource(createShaderHelper(normalizedDispatchGroupSize));\n    const shaderModule = device.createShaderModule({code});\n    LOG_DEBUG('verbose', () => `[WebGPU] shader code: ${code}`);\n\n    const computePipeline =\n        device.createComputePipeline({compute: {module: shaderModule, entryPoint: 'main'}, layout: 'auto'});\n\n    return {programInfo, computePipeline};\n  }\n\n  normalizeDispatchGroupSize(dispatchGroup: ReturnType<ProgramInfo['dispatchGroup']>): [number, number, number] {\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\n    const y = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.y || 1);\n    const z = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.z || 1);\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n      return [x, y, z];\n    }\n    const size = x * y * z;\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\n    if (dispatchAverage > limitPerDimension) {\n      dispatchAverage = Math.ceil(Math.cbrt(size));\n      if (dispatchAverage > limitPerDimension) {\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\n      }\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\n    } else {\n      return [dispatchAverage, dispatchAverage, 1];\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor, TensorView} from '../tensor';\n\nimport {ShaderHelper} from './ops/common';\n\nexport enum GpuDataType {\n  default = 0,\n  upload = 1,\n  profile = 2\n}\nexport type GpuDataId = number;\n\nexport interface GpuData {\n  type: GpuDataType;\n  id: GpuDataId;\n  buffer: GPUBuffer;\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  dataType: number;\n  gpuDataType: GpuDataType;\n}\n\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n\n  /**\n   * gpu data types for each input\n   */\n  inputTypes: GpuDataType[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for outputs\n   */\n  outputs: TensorInfo[];\n  /**\n   * the shader's processing source code\n   */\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\n  /**\n   * default is \"main\"\n   */\n  // entryPoint: string;\n\n  dispatchGroup: (inputs: readonly TensorView[]) => {\n    x: number;\n    y?: number;\n    z?: number;\n  };\n}\n\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  computePipeline: GPUComputePipeline;\n}\n\nexport interface ComputeContextInputsOutputsMapping {\n  /**\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\n   * - if it's a number, it's the index of the kernel's input\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\n   *\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\n   */\n  readonly inputs?: ReadonlyArray<TensorView|number>;\n  /**\n   * specify the mapping to the program's outputs. the value must be a number.\n   * - if it's a non-negative number, it's the index of the kernel's output\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\n   * the kernel is executed.\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\n   * kernel is released.\n   *\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\n   */\n  readonly outputs?: readonly number[];\n}\n\n/**\n * A ComputeContext instance carries the states that representing the current running of a kernel.\n */\nexport interface ComputeContext {\n  /**\n   * stores the pointer to OpKernelContext\n   */\n  readonly opKernelContext: number;\n\n  /**\n   * a list of inputs, each input is an instance of TensorView\n   */\n  readonly inputs: readonly TensorView[];\n\n  /**\n   * a custom data object that can be used to store any data that is needed by the kernel\n   */\n  readonly customData: {[key: string]: unknown};\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[];\n  output(index: number, dims: readonly number[]): number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initializeRuntime = async(env: Env): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initRuntime(env);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      checkLastError('Can\\'t create run options.');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\n\nlet runtimeInitialized: boolean;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!runtimeInitialized) {\n      await initializeRuntime(env);\n      runtimeInitialized = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported execution provider: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          checkLastError(`Can't append execution provider: ${epName}.`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      checkLastError('Can\\'t create session options.');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float16':\n          return Uint16Array;\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {init as initJsep} from './jsep/init';\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError} from './wasm-utils';\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError('Can\\'t get session input/output count.');\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError('Can\\'t initialize onnxruntime.');\n  }\n};\n\n/**\n * intialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n\n  // init JSEP if available\n  await initJsep(getInstance(), env);\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * allocate the memory and memcpy the model bytes, preparing for creating an instance of InferenceSession.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session using the prepared buffer containing the model data.\n * @param modelData a 2-elements tuple containing the pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNamesUTF8Encoded = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          checkLastError('Can\\'t create a session.');\n        }\n\n        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n        const inputNames = [];\n        const outputNames = [];\n        for (let i = 0; i < inputCount; i++) {\n          const name = wasm._OrtGetInputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an input name.');\n          }\n          inputNamesUTF8Encoded.push(name);\n          inputNames.push(wasm.UTF8ToString(name));\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const name = wasm._OrtGetOutputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an output name.');\n          }\n          outputNamesUTF8Encoded.push(name);\n          outputNames.push(wasm.UTF8ToString(name));\n        }\n\n        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n        return [sessionHandle, inputNames, outputNames];\n      } catch (e) {\n        inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n        outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n\n        if (sessionHandle !== 0) {\n          wasm._OrtReleaseSession(sessionHandle);\n        }\n        throw e;\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(alloc => wasm._free(alloc));\n      }\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          checkLastError(`Can't create tensor for input[${i}].`);\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise && typeof runPromise.then !== 'undefined') {\n        errorCode = await runPromise;\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode !== 0) {\n        checkLastError('failed to call OrtRun().');\n      }\n\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n        const beforeGetTensorDataStack = wasm.stackSave();\n        // stack allocate 4 pointer value\n        const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n        let type: Tensor.Type|undefined, dataOffset = 0;\n        try {\n          errorCode = wasm._OrtGetTensorData(\n              tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n          if (errorCode !== 0) {\n            checkLastError(`Can't access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i = 0; i < dimsLength; i++) {\n            dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n          }\n          wasm._OrtFree(dimsOffset);\n\n          const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n          type = tensorDataTypeEnumToString(dataType);\n          if (type === 'string') {\n            const stringData: string[] = [];\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < size; i++) {\n              const offset = wasm.HEAPU32[dataIndex++];\n              const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n            output.push([type, dims, data]);\n          }\n        } finally {\n          wasm.stackRestore(beforeGetTensorDataStack);\n          if (type === 'string' && dataOffset) {\n            wasm._free(dataOffset);\n          }\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n\n      return output;\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(v => wasm._OrtReleaseTensor(v));\n    inputAllocs.forEach(p => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach(p => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError('Can\\'t get an profile file name.');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","\r\nvar ortWasm = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm = {})  {\r\n\r\nvar c;c||(c=typeof ortWasm !== 'undefined' ? ortWasm : {});var h,p;c.ready=new Promise((a,b)=>{h=a;p=b});var t=Object.assign({},c),w=\"./this.program\",x=(a,b)=>{throw b;},aa=\"object\"==typeof window,y=\"function\"==typeof importScripts,A=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,B=\"\",C,D,E;\r\nif(A){var fs=require(\"fs\"),F=require(\"path\");B=y?F.dirname(B)+\"/\":__dirname+\"/\";C=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):F.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};E=a=>{a=C(a,!0);a.buffer||(a=new Uint8Array(a));return a};D=(a,b,e,f=!0)=>{a=a.startsWith(\"file://\")?new URL(a):F.normalize(a);fs.readFile(a,f?void 0:\"utf8\",(g,k)=>{g?e(g):b(f?k.buffer:k)})};!c.thisProgram&&1<process.argv.length&&(w=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);x=(a,b)=>{process.exitCode=\r\na;throw b;};c.inspect=()=>\"[Emscripten Module object]\"}else if(aa||y)y?B=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(B=document.currentScript.src),_scriptDir&&(B=_scriptDir),0!==B.indexOf(\"blob:\")?B=B.substr(0,B.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):B=\"\",C=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},y&&(E=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),\r\nD=(a,b,e)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?b(f.response):e()};f.onerror=e;f.send(null)};var ba=c.print||console.log.bind(console),G=c.printErr||console.warn.bind(console);Object.assign(c,t);t=null;c.thisProgram&&(w=c.thisProgram);c.quit&&(x=c.quit);var H;c.wasmBinary&&(H=c.wasmBinary);var noExitRuntime=c.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&I(\"no native wasm support detected\");\r\nvar J,K=!1,L,M,N,O;function ca(){var a=J.buffer;c.HEAP8=L=new Int8Array(a);c.HEAP16=new Int16Array(a);c.HEAP32=N=new Int32Array(a);c.HEAPU8=M=new Uint8Array(a);c.HEAPU16=new Uint16Array(a);c.HEAPU32=O=new Uint32Array(a);c.HEAPF32=new Float32Array(a);c.HEAPF64=new Float64Array(a)}var da=[],ea=[],fa=[];function ha(){var a=c.preRun.shift();da.unshift(a)}var P=0,Q=null,R=null;\r\nfunction I(a){if(c.onAbort)c.onAbort(a);a=\"Aborted(\"+a+\")\";G(a);K=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");p(a);throw a;}function ia(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var S;S=\"ort-wasm.wasm\";if(!ia(S)){var ja=S;S=c.locateFile?c.locateFile(ja,B):B+ja}function ka(a){try{if(a==S&&H)return new Uint8Array(H);if(E)return E(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){I(b)}}\r\nfunction la(a){if(!H&&(aa||y)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>ka(a));if(D)return new Promise((b,e)=>{D(a,f=>b(new Uint8Array(f)),e)})}return Promise.resolve().then(()=>ka(a))}function ma(a,b,e){return la(a).then(f=>WebAssembly.instantiate(f,b)).then(f=>f).then(e,f=>{G(\"failed to asynchronously prepare wasm: \"+f);I(f)})}\r\nfunction na(a,b){var e=S;return H||\"function\"!=typeof WebAssembly.instantiateStreaming||ia(e)||e.startsWith(\"file://\")||A||\"function\"!=typeof fetch?ma(e,a,b):fetch(e,{credentials:\"same-origin\"}).then(f=>WebAssembly.instantiateStreaming(f,a).then(b,function(g){G(\"wasm streaming compile failed: \"+g);G(\"falling back to ArrayBuffer instantiation\");return ma(e,a,b)}))}function oa(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}\r\nfunction T(a){for(;0<a.length;)a.shift()(c)}function pa(a){this.ra=a-24;this.wa=function(b){O[this.ra+4>>2>>>0]=b};this.va=function(b){O[this.ra+8>>2>>>0]=b};this.ta=function(b,e){this.ua();this.wa(b);this.va(e)};this.ua=function(){O[this.ra+16>>2>>>0]=0}}var qa=0,ra=0,sa=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction ta(a,b,e){b>>>=0;var f=b+e;for(e=b;a[e]&&!(e>=f);)++e;if(16<e-b&&a.buffer&&sa)return sa.decode(a.subarray(b,e));for(f=\"\";b<e;){var g=a[b++];if(g&128){var k=a[b++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|k);else{var l=a[b++]&63;g=224==(g&240)?(g&15)<<12|k<<6|l:(g&7)<<18|k<<12|l<<6|a[b++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f}function U(a,b){return(a>>>=0)?ta(M,a,b):\"\"}\r\nfunction V(a){for(var b=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);127>=f?b++:2047>=f?b+=2:55296<=f&&57343>=f?(b+=4,++e):b+=3}return b}\r\nfunction ua(a,b,e,f){e>>>=0;if(!(0<f))return 0;var g=e;f=e+f-1;for(var k=0;k<a.length;++k){var l=a.charCodeAt(k);if(55296<=l&&57343>=l){var q=a.charCodeAt(++k);l=65536+((l&1023)<<10)|q&1023}if(127>=l){if(e>=f)break;b[e++>>>0]=l}else{if(2047>=l){if(e+1>=f)break;b[e++>>>0]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;b[e++>>>0]=224|l>>12}else{if(e+3>=f)break;b[e++>>>0]=240|l>>18;b[e++>>>0]=128|l>>12&63}b[e++>>>0]=128|l>>6&63}b[e++>>>0]=128|l&63}}b[e>>>0]=0;return e-g}\r\nfunction va(a,b,e){return ua(a,M,b,e)}function W(a){return 0===a%4&&(0!==a%100||0===a%400)}var wa=[0,31,60,91,121,152,182,213,244,274,305,335],Aa=[0,31,59,90,120,151,181,212,243,273,304,334];function Ba(a){return(W(a.getFullYear())?wa:Aa)[a.getMonth()]+a.getDate()-1}function Ca(a){var b=V(a)+1,e=Da(b);e&&va(a,e,b);return e}var X={};\r\nfunction Ea(){if(!Y){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:w||\"./this.program\"},b;for(b in X)void 0===X[b]?delete a[b]:a[b]=X[b];var e=[];for(b in a)e.push(b+\"=\"+a[b]);Y=e}return Y}var Y,Fa=[null,[],[]];\r\nfunction Ga(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return e=>crypto.getRandomValues(e);if(A)try{var a=require(\"crypto\");if(a.randomFillSync)return e=>a.randomFillSync(e);var b=a.randomBytes;return e=>(e.set(b(e.byteLength)),e)}catch(e){}I(\"initRandomDevice\")}function Ha(a){return(Ha=Ga())(a)}var Ia=[31,29,31,30,31,30,31,31,30,31,30,31],Ja=[31,28,31,30,31,30,31,31,30,31,30,31];function Ka(a){var b=Array(V(a)+1);ua(a,b,0,b.length);return b}\r\nfunction La(a,b,e,f){function g(d,m,n){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function k(d,m){return g(d,m,\"0\")}function l(d,m){function n(xa){return 0>xa?-1:0<xa?1:0}var z;0===(z=n(d.getFullYear()-m.getFullYear()))&&0===(z=n(d.getMonth()-m.getMonth()))&&(z=n(d.getDate()-m.getDate()));return z}function q(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\r\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function v(d){var m=d.na;for(d=new Date((new Date(d.oa+1900,0,1)).getTime());0<m;){var n=d.getMonth(),z=(W(d.getFullYear())?Ia:Ja)[n];if(m>z-d.getDate())m-=z-d.getDate()+1,d.setDate(1),11>n?d.setMonth(n+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+m);break}}n=new Date(d.getFullYear()+1,0,4);m=q(new Date(d.getFullYear(),\r\n0,4));n=q(n);return 0>=l(m,d)?0>=l(n,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var u=N[f+40>>2>>>0];f={za:N[f>>2>>>0],ya:N[f+4>>2>>>0],pa:N[f+8>>2>>>0],sa:N[f+12>>2>>>0],qa:N[f+16>>2>>>0],oa:N[f+20>>2>>>0],ja:N[f+24>>2>>>0],na:N[f+28>>2>>>0],Ba:N[f+32>>2>>>0],xa:N[f+36>>2>>>0],Aa:u?U(u):\"\"};e=U(e);u={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\r\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var r in u)e=e.replace(new RegExp(r,\"g\"),u[r]);var ya=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),za=\"January February March April May June July August September October November December\".split(\" \");u={\"%a\":function(d){return ya[d.ja].substring(0,3)},\"%A\":function(d){return ya[d.ja]},\"%b\":function(d){return za[d.qa].substring(0,\r\n3)},\"%B\":function(d){return za[d.qa]},\"%C\":function(d){return k((d.oa+1900)/100|0,2)},\"%d\":function(d){return k(d.sa,2)},\"%e\":function(d){return g(d.sa,2,\" \")},\"%g\":function(d){return v(d).toString().substring(2)},\"%G\":function(d){return v(d)},\"%H\":function(d){return k(d.pa,2)},\"%I\":function(d){d=d.pa;0==d?d=12:12<d&&(d-=12);return k(d,2)},\"%j\":function(d){for(var m=0,n=0;n<=d.qa-1;m+=(W(d.oa+1900)?Ia:Ja)[n++]);return k(d.sa+m,3)},\"%m\":function(d){return k(d.qa+1,2)},\"%M\":function(d){return k(d.ya,\r\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.pa&&12>d.pa?\"AM\":\"PM\"},\"%S\":function(d){return k(d.za,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.ja||7},\"%U\":function(d){return k(Math.floor((d.na+7-d.ja)/7),2)},\"%V\":function(d){var m=Math.floor((d.na+7-(d.ja+6)%7)/7);2>=(d.ja+371-d.na-2)%7&&m++;if(m)53==m&&(n=(d.ja+371-d.na)%7,4==n||3==n&&W(d.oa)||(m=1));else{m=52;var n=(d.ja+7-d.na-1)%7;(4==n||5==n&&W(d.oa%400-1))&&m++}return k(m,2)},\"%w\":function(d){return d.ja},\"%W\":function(d){return k(Math.floor((d.na+\r\n7-(d.ja+6)%7)/7),2)},\"%y\":function(d){return(d.oa+1900).toString().substring(2)},\"%Y\":function(d){return d.oa+1900},\"%z\":function(d){d=d.xa;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.Aa},\"%%\":function(){return\"%\"}};e=e.replace(/%%/g,\"\\x00\\x00\");for(r in u)e.includes(r)&&(e=e.replace(new RegExp(r,\"g\"),u[r](f)));e=e.replace(/\\0\\0/g,\"%\");r=Ka(e);if(r.length>b)return 0;L.set(r,a>>>0);return r.length-1}\r\nvar Ma={a:function(a,b,e){(new pa(a)).ta(b,e);qa=a;ra++;throw qa;},l:function(){I(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},f:function(){return 0},K:function(){},u:function(){},x:function(){},M:function(){return 0},I:function(){},D:function(){},H:function(){},j:function(){},w:function(){},s:function(){},J:function(){},t:function(){},k:function(){return!0},A:function(a,b){a=new Date(1E3*(O[a>>>2]+4294967296*N[a+4>>>2]));N[b>>\r\n2>>>0]=a.getUTCSeconds();N[b+4>>2>>>0]=a.getUTCMinutes();N[b+8>>2>>>0]=a.getUTCHours();N[b+12>>2>>>0]=a.getUTCDate();N[b+16>>2>>>0]=a.getUTCMonth();N[b+20>>2>>>0]=a.getUTCFullYear()-1900;N[b+24>>2>>>0]=a.getUTCDay();N[b+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},B:function(a,b){a=new Date(1E3*(O[a>>>2]+4294967296*N[a+4>>>2]));N[b>>2>>>0]=a.getSeconds();N[b+4>>2>>>0]=a.getMinutes();N[b+8>>2>>>0]=a.getHours();N[b+12>>2>>>0]=a.getDate();N[b+16>>2>>>0]=a.getMonth();N[b+\r\n20>>2>>>0]=a.getFullYear()-1900;N[b+24>>2>>>0]=a.getDay();N[b+28>>2>>>0]=Ba(a)|0;N[b+36>>2>>>0]=-(60*a.getTimezoneOffset());var e=(new Date(a.getFullYear(),6,1)).getTimezoneOffset(),f=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();N[b+32>>2>>>0]=(e!=f&&a.getTimezoneOffset()==Math.min(f,e))|0},C:function(a){var b=new Date(N[a+20>>2>>>0]+1900,N[a+16>>2>>>0],N[a+12>>2>>>0],N[a+8>>2>>>0],N[a+4>>2>>>0],N[a>>2>>>0],0),e=N[a+32>>2>>>0],f=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),\r\nk=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),l=Math.min(k,g);0>e?N[a+32>>2>>>0]=Number(g!=k&&l==f):0<e!=(l==f)&&(g=Math.max(k,g),b.setTime(b.getTime()+6E4*((0<e?l:g)-f)));N[a+24>>2>>>0]=b.getDay();N[a+28>>2>>>0]=Ba(b)|0;N[a>>2>>>0]=b.getSeconds();N[a+4>>2>>>0]=b.getMinutes();N[a+8>>2>>>0]=b.getHours();N[a+12>>2>>>0]=b.getDate();N[a+16>>2>>>0]=b.getMonth();N[a+20>>2>>>0]=b.getYear();return b.getTime()/1E3|0},y:function(){return-52},z:function(){},q:function(a,b,e){function f(v){return(v=v.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?\r\nv[1]:\"GMT\"}var g=(new Date).getFullYear(),k=new Date(g,0,1),l=new Date(g,6,1);g=k.getTimezoneOffset();var q=l.getTimezoneOffset();O[a>>2>>>0]=60*Math.max(g,q);N[b>>2>>>0]=Number(g!=q);a=f(k);b=f(l);a=Ca(a);b=Ca(b);q<g?(O[e>>2>>>0]=a,O[e+4>>2>>>0]=b):(O[e>>2>>>0]=b,O[e+4>>2>>>0]=a)},d:function(){I(\"\")},G:function(){I(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},g:function(){return Date.now()},r:function(){return 4294901760},b:A?\r\n()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now(),L:function(a,b,e){M.copyWithin(a>>>0,b>>>0,b+e>>>0)},p:function(a){var b=M.length;a>>>=0;if(4294901760<a)return!1;for(var e=1;4>=e;e*=2){var f=b*(1+.2/e);f=Math.min(f,a+100663296);var g=Math,k=g.min;f=Math.max(a,f);f+=(65536-f%65536)%65536;a:{var l=J.buffer;try{J.grow(k.call(g,4294901760,f)-l.byteLength+65535>>>16);ca();var q=1;break a}catch(v){}q=void 0}if(q)return!0}return!1},E:function(a,b){var e=0;Ea().forEach(function(f,\r\ng){var k=b+e;g=O[a+4*g>>2>>>0]=k;for(k=0;k<f.length;++k)L[g++>>0>>>0]=f.charCodeAt(k);L[g>>0>>>0]=0;e+=f.length+1});return 0},F:function(a,b){var e=Ea();O[a>>2>>>0]=e.length;var f=0;e.forEach(function(g){f+=g.length+1});O[b>>2>>>0]=f;return 0},m:function(a){if(!noExitRuntime){if(c.onExit)c.onExit(a);K=!0}x(a,new oa(a))},e:function(){return 52},i:function(){return 52},n:function(){return 70},h:function(a,b,e,f){for(var g=0,k=0;k<e;k++){var l=O[b>>2>>>0],q=O[b+4>>2>>>0];b+=8;for(var v=0;v<q;v++){var u=\r\nM[l+v>>>0],r=Fa[a];0===u||10===u?((1===a?ba:G)(ta(r,0)),r.length=0):r.push(u)}g+=q}O[f>>2>>>0]=g;return 0},o:function(a,b){Ha(M.subarray(a>>>0,a+b>>>0));return 0},v:La,c:function(a,b,e,f){return La(a,b,e,f)}};\r\n(function(){function a(e){e=e.exports;c.asm=e;J=c.asm.N;ca();ea.unshift(c.asm.O);P--;c.monitorRunDependencies&&c.monitorRunDependencies(P);if(0==P&&(null!==Q&&(clearInterval(Q),Q=null),R)){var f=R;R=null;f()}return e}var b={a:Ma};P++;c.monitorRunDependencies&&c.monitorRunDependencies(P);if(c.instantiateWasm)try{return c.instantiateWasm(b,a)}catch(e){G(\"Module.instantiateWasm callback failed with error: \"+e),p(e)}na(b,function(e){a(e.instance)}).catch(p);return{}})();\r\nc._OrtInit=function(){return(c._OrtInit=c.asm.P).apply(null,arguments)};c._OrtGetLastError=function(){return(c._OrtGetLastError=c.asm.Q).apply(null,arguments)};c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.R).apply(null,arguments)};c._OrtAppendExecutionProvider=function(){return(c._OrtAppendExecutionProvider=c.asm.S).apply(null,arguments)};c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.T).apply(null,arguments)};\r\nc._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.U).apply(null,arguments)};c._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.V).apply(null,arguments)};c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.W).apply(null,arguments)};c._OrtGetInputOutputCount=function(){return(c._OrtGetInputOutputCount=c.asm.X).apply(null,arguments)};c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.Y).apply(null,arguments)};\r\nc._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.Z).apply(null,arguments)};c._OrtFree=function(){return(c._OrtFree=c.asm._).apply(null,arguments)};c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm.$).apply(null,arguments)};c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm.aa).apply(null,arguments)};c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.ba).apply(null,arguments)};\r\nc._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.ca).apply(null,arguments)};c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.da).apply(null,arguments)};c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.ea).apply(null,arguments)};c._OrtRun=function(){return(c._OrtRun=c.asm.fa).apply(null,arguments)};c._OrtEndProfiling=function(){return(c._OrtEndProfiling=c.asm.ga).apply(null,arguments)};\r\nvar Da=c._malloc=function(){return(Da=c._malloc=c.asm.ha).apply(null,arguments)};c._free=function(){return(c._free=c.asm.ia).apply(null,arguments)};function Na(){return(Na=c.asm.ka).apply(null,arguments)}function Oa(){return(Oa=c.asm.la).apply(null,arguments)}function Pa(){return(Pa=c.asm.ma).apply(null,arguments)}c.stackAlloc=Pa;c.stackSave=Na;c.stackRestore=Oa;c.UTF8ToString=U;c.stringToUTF8=va;c.lengthBytesUTF8=V;var Z;R=function Qa(){Z||Ra();Z||(R=Qa)};\r\nfunction Ra(){function a(){if(!Z&&(Z=!0,c.calledRun=!0,!K)){T(ea);h(c);if(c.onRuntimeInitialized)c.onRuntimeInitialized();if(c.postRun)for(\"function\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var b=c.postRun.shift();fa.unshift(b)}T(fa)}}if(!(0<P)){if(c.preRun)for(\"function\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)ha();T(da);0<P||(c.setStatus?(c.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){c.setStatus(\"\")},1);a()},1)):a())}}\r\nif(c.preInit)for(\"function\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();Ra();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveBackend = exports.registerBackend = void 0;\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nconst registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\nexports.registerBackend = registerBackend;\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nconst resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\nexports.resolveBackend = resolveBackend;\n//# sourceMappingURL=backend-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerBackend = void 0;\nvar backend_impl_js_1 = require(\"./backend-impl.js\");\nObject.defineProperty(exports, \"registerBackend\", { enumerable: true, get: function () { return backend_impl_js_1.registerBackend; } });\n//# sourceMappingURL=backend.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst version_js_1 = require(\"./version.js\");\nlet logLevelValue = 'warning';\nexports.env = {\n    wasm: {},\n    webgl: {},\n    webgpu: {},\n    versions: { common: version_js_1.version },\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        logLevelValue = value;\n    },\n    get logLevel() {\n        return logLevelValue;\n    },\n};\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(exports.env, 'logLevel', { enumerable: true });\n//# sourceMappingURL=env-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst env_impl_js_1 = require(\"./env-impl.js\");\n/**\n * Represent a set of flags as a global singleton.\n */\nexports.env = env_impl_js_1.env;\n//# sourceMappingURL=env.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript.html)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n__exportStar(require(\"./backend.js\"), exports);\n__exportStar(require(\"./env.js\"), exports);\n__exportStar(require(\"./inference-session.js\"), exports);\n__exportStar(require(\"./tensor.js\"), exports);\n__exportStar(require(\"./onnx-value.js\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst backend_impl_js_1 = require(\"./backend-impl.js\");\nconst tensor_js_1 = require(\"./tensor.js\");\nclass InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof tensor_js_1.Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof tensor_js_1.Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof tensor_js_1.Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new tensor_js_1.Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    async release() {\n        return this.handler.dispose();\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await (0, backend_impl_js_1.resolveBackend)(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\nexports.InferenceSession = InferenceSession;\n//# sourceMappingURL=inference-session-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst inference_session_impl_js_1 = require(\"./inference-session-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.InferenceSession = inference_session_impl_js_1.InferenceSession;\n//# sourceMappingURL=inference-session.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=onnx-value.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorToImageData = exports.tensorToDataURL = void 0;\n/**\n * implementation of Tensor.toDataURL()\n */\nconst tensorToDataURL = (tensor, options) => {\n    const canvas = document.createElement('canvas');\n    canvas.width = tensor.dims[3];\n    canvas.height = tensor.dims[2];\n    const pixels2DContext = canvas.getContext('2d');\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n        }\n        const inputformat = options?.format !== undefined ? options.format : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        // Default pointer assignments\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n                const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n                const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n                const A = aTensorPointer === -1 ?\n                    255 :\n                    (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n                // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n                pixels2DContext.fillRect(j, i, 1, 1);\n            }\n        }\n        return canvas.toDataURL();\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n};\nexports.tensorToDataURL = tensorToDataURL;\n/**\n * implementation of Tensor.toImageData()\n */\nconst tensorToImageData = (tensor, options) => {\n    const pixels2DContext = document.createElement('canvas').getContext('2d');\n    let image;\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        let channels;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[1];\n            channels = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n            channels = tensor.dims[1];\n        }\n        const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        if (options !== undefined) {\n            if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                throw new Error('Tensor format doesn\\'t match input tensor dims');\n            }\n        }\n        // Default pointer assignments\n        const step = 4;\n        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        image = pixels2DContext.createImageData(width, height);\n        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n            image.data[aImagePointer] = aTensorPointer === -1 ?\n                255 :\n                (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n        }\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n    return image;\n};\nexports.tensorToImageData = tensorToImageData;\n//# sourceMappingURL=tensor-conversion-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorFromImage = exports.bufferToTensor = void 0;\nconst tensor_js_1 = require(\"./tensor.js\");\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nconst bufferToTensor = (buffer, options) => {\n    if (buffer === undefined) {\n        throw new Error('Image buffer must be defined');\n    }\n    if (options.height === undefined || options.width === undefined) {\n        throw new Error('Image height and width must be defined');\n    }\n    if (options.tensorLayout === 'NHWC') {\n        throw new Error('NHWC Tensor layout is not supported yet');\n    }\n    const { height, width } = options;\n    const norm = options.norm ?? { mean: 255, bias: 0 };\n    let normMean;\n    let normBias;\n    if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n    }\n    else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];\n    }\n    if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n    }\n    else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];\n    }\n    const inputformat = options.format !== undefined ? options.format : 'RGBA';\n    // default value is RGBA since imagedata and HTMLImageElement uses it\n    const outputformat = options.tensorFormat !== undefined ?\n        (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n        'RGB';\n    const stride = height * width;\n    const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n    // Default pointer assignments\n    let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGB') {\n        step = 3;\n        rImagePointer = 0;\n        gImagePointer = 1;\n        bImagePointer = 2;\n        aImagePointer = -1;\n    }\n    // Updating the pointer assignments based on the output tensor format\n    if (outputformat === 'RGBA') {\n        aTensorPointer = stride * 3;\n    }\n    else if (outputformat === 'RBG') {\n        rTensorPointer = 0;\n        bTensorPointer = stride;\n        gTensorPointer = stride * 2;\n    }\n    else if (outputformat === 'BGR') {\n        bTensorPointer = 0;\n        gTensorPointer = stride;\n        rTensorPointer = stride * 2;\n    }\n    for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n        if (aTensorPointer !== -1 && aImagePointer !== -1) {\n            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n        }\n    }\n    // Float32Array -> ort.Tensor\n    const outputTensor = outputformat === 'RGBA' ? new tensor_js_1.Tensor('float32', float32Data, [1, 4, height, width]) :\n        new tensor_js_1.Tensor('float32', float32Data, [1, 3, height, width]);\n    return outputTensor;\n};\nexports.bufferToTensor = bufferToTensor;\n/**\n * implementation of Tensor.fromImage().\n */\nconst tensorFromImage = async (image, options) => {\n    // checking the type of image object\n    const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n    const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n    const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n    const isString = typeof image === 'string';\n    let data;\n    let bufferToTensorOptions = options ?? {};\n    // filling and checking image configuration options\n    if (isHTMLImageEle) {\n        // HTMLImageElement - image object - format is RGBA by default\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            let height = image.height;\n            let width = image.width;\n            if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            if (options !== undefined) {\n                bufferToTensorOptions = options;\n                if (options.tensorFormat !== undefined) {\n                    throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                }\n                else {\n                    bufferToTensorOptions.tensorFormat = 'RGBA';\n                }\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            else {\n                bufferToTensorOptions.tensorFormat = 'RGBA';\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            pixels2DContext.drawImage(image, 0, 0);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isImageDataEle) {\n        let height;\n        let width;\n        if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n            height = options.resizedHeight;\n            width = options.resizedWidth;\n        }\n        else {\n            height = image.height;\n            width = image.width;\n        }\n        if (options !== undefined) {\n            bufferToTensorOptions = options;\n        }\n        bufferToTensorOptions.format = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n        if (options !== undefined) {\n            const tempCanvas = document.createElement('canvas');\n            tempCanvas.width = width;\n            tempCanvas.height = height;\n            const pixels2DContext = tempCanvas.getContext('2d');\n            if (pixels2DContext != null) {\n                pixels2DContext.putImageData(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else {\n            data = image.data;\n        }\n    }\n    else if (isImageBitmap) {\n        // ImageBitmap - image object - format must be provided by user\n        if (options === undefined) {\n            throw new Error('Please provide image config with format for Imagebitmap');\n        }\n        const pixels2DContext = document.createElement('canvas').getContext('2d');\n        if (pixels2DContext != null) {\n            const height = image.height;\n            const width = image.width;\n            pixels2DContext.drawImage(image, 0, 0, width, height);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n            bufferToTensorOptions.height = height;\n            bufferToTensorOptions.width = width;\n            return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isString) {\n        return new Promise((resolve, reject) => {\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            if (!image || !context) {\n                return reject();\n            }\n            const newImage = new Image();\n            newImage.crossOrigin = 'Anonymous';\n            newImage.src = image;\n            newImage.onload = () => {\n                canvas.width = newImage.width;\n                canvas.height = newImage.height;\n                context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                bufferToTensorOptions.height = canvas.height;\n                bufferToTensorOptions.width = canvas.width;\n                resolve((0, exports.bufferToTensor)(img.data, bufferToTensorOptions));\n            };\n        });\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n    if (data !== undefined) {\n        return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n};\nexports.tensorFromImage = tensorFromImage;\n//# sourceMappingURL=tensor-factory-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_conversion_impl_js_1 = require(\"./tensor-conversion-impl.js\");\nconst tensor_factory_impl_js_1 = require(\"./tensor-factory-impl.js\");\nconst tensor_utils_impl_js_1 = require(\"./tensor-utils-impl.js\");\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['float16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\nclass Tensor {\n    constructor(arg0, arg1, arg2) {\n        checkBigInt();\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    if (arg0 === 'float16') {\n                        // Throw error here because when user try to use number array as data,\n                        // e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n                        // Uint16Array.from(arg1) which generates wrong data.\n                        throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                    }\n                    else {\n                        // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                        // incorrect results.\n                        // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = typedArrayConstructor.from(arg1);\n                    }\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = (0, tensor_utils_impl_js_1.calculateSize)(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    static async fromImage(image, options) {\n        return (0, tensor_factory_impl_js_1.tensorFromImage)(image, options);\n    }\n    // #endregion\n    // #region conversions\n    toDataURL(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToDataURL)(this, options);\n    }\n    toImageData(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToImageData)(this, options);\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return (0, tensor_utils_impl_js_1.tensorReshape)(this, dims);\n    }\n}\nexports.Tensor = Tensor;\n//# sourceMappingURL=tensor-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorReshape = exports.calculateSize = void 0;\nconst tensor_js_1 = require(\"./tensor.js\");\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexports.calculateSize = calculateSize;\n/**\n * implementation of Tensor.reshape()\n */\nconst tensorReshape = (tensor, dims) => new tensor_js_1.Tensor(tensor.type, tensor.data, dims);\nexports.tensorReshape = tensorReshape;\n//# sourceMappingURL=tensor-utils-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_impl_js_1 = require(\"./tensor-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.Tensor = tensor_impl_js_1.Tensor;\n//# sourceMappingURL=tensor.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = void 0;\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\nexports.version = '1.16.0-dev.20230704-d540c7da0f';\n//# sourceMappingURL=version.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","define","amd","self","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","async","initializeWebAssemblyInstance","pathOrBuffer","options","handler","OnnxruntimeWebAssemblySessionHandler","loadModel","Promise","resolve","wasmBackend","registerBackend","versions","web","version","currentKernelId","commandEncoder","computePassEncoder","pendingDispatchNumber","profilingEnabled","currentKernelCustomData","this","Error","data","kernelCustomData","get","set","gpu","adapter","requestAdapter","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","limits","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","features","has","webgpu","profilingMode","requiredFeatures","device","requestDevice","gpuDataManager","createGpuDataManager","programManager","ProgramManager","kernels","Map","kernelPersistentData","configureLogger","logLevel","debug","onuncapturederror","ev","error","GPUValidationError","console","message","profilingQuerySet","createQuerySet","type","count","dispose","getCommandEncoder","createCommandEncoder","getComputePassEncoder","beginComputePass","endComputePass","end","flush","queue","submit","finish","refreshPendingBuffers","run","program","inputs","outputIndices","createKernelOutput","createIntermediateOutput","inputTypes","inputDatas","i","gpuData","key","programInfo","inputTensorShapes","inputGpuDataTypes","inputTensorShapesToString","map","d","join","inputGpuDataTypesToString","name","cacheHint","getProgramInfoUniqueKey","dims","artifact","getArtifact","validatedOutputIndices","outputs","_","outputTensorViews","outputDatas","isTemporary","isPersistent","tensorView","dataType","temporaryData","push","persistentData","normalizedDispatchGroup","normalizeDispatchGroupSize","dispatchGroup","build","setArtifact","LOG_DEBUG","upload","gpuDataId","memcpy","src","dst","getTargetBuffer","arrayBuffer","download","Uint8Array","byteLength","alloc","size","create","id","free","ptr","release","createKernel","kernelId","attribute","op","WEBGPU_OP_RESOLVE_RULES","releaseKernel","delete","computeKernel","context","kernel","kernelEntry","attributes","undefined","e","TensorViewImpl","constructor","getFloat32Array","elementCount","ShapeUtil","Float32Array","HEAP8","buffer","getBigInt64Array","BigInt64Array","reshape","newDims","ComputeContextImpl","customData","backend","contextDataOffset","heapU32","HEAPU32","dataIndex","opKernelContext","inputCount","dim","compute","inputsOutputsMapping","mappedInputs","index","output","elementSize","getTensorElementSize","bufferSize","stack","stackSave","stackAlloc","offset","_JsepOutput","stackRestore","init","jsepInit","WebGpuBackend","initialize","isSourceGpu","HEAPU8","subarray","dataOffset","logLevelPrefix","configLogLevel","$configLogLevel","$debug","LOG","msg","messageLevel","logLevelStringToEnum","level","log","Date","toISOString","args","MatMulUtil","static","a","b","BroadcastUtil","adims","bdims","isMatMul","arank","brank","crank","max","cdims","Array","cShapeMatMul","calcMatMulShape","aLen","bLen","shape","finalShape","inputRank","finalRank","getSizeFromDimensionRange","axis","start","rank","strides","tensorRank","axes","x","normalizeAxis","perm","v","slice","reverse","pad","shape1","shape2","every","PoolConvUtil","isGlobalOperator","inputDims","kernelShape","dilations","pads","isChannelLast","autoPad","adjustPadAndReturnShape","outputDims","computeShapeHelper","filterDims","inSize","stride","dilation","padHeadIndex","padTailIndex","dkernel","floor","padNeeded","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","isValidBroadcast","MIN_CLIP","MAX_CLIP","AttributeWithCacheKeyImpl","Object","assign","cacheKey","_cacheKey","getOwnPropertyNames","sort","createAttributeWithCacheKey","calcNormalizedBufferSize","guid","GpuDataManagerImpl","storageCache","downloadCache","buffersForUploadingPending","buffersPending","srcArrayBuffer","srcOffset","byteOffset","srcLength","gpuDataCache","originalSize","gpuBufferForUploading","createBuffer","mappedAtCreation","usage","GPUBufferUsage","MAP_WRITE","COPY_SRC","getMappedRange","unmap","copyBufferToBuffer","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","STORAGE","COPY_DST","gpuBuffer","GpuDataType","default","cachedData","downloadData","gpuReadBuffer","MAP_READ","readDataPromise","mapAsync","GPUMapMode","READ","then","destroy","unaryOps","abs","acos","acosh","binaryOps","add","asin","asinh","atan","atanh","pool","averagePool","parseAveragePoolAttributes","clipV10","clip","conv","parseConvAttributes","cos","cosh","div","elu","parseAlphaAttributes","erf","exp","gemm","parseGemmAttributes","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","parseGlobalMaxPoolAttributes","leakyRelu","matMul","maxPool","parseMaxPoolAttributes","mul","neg","pow","reciprocal","reduceMin","parseReduceAttributes","reduceMean","reduceMax","reduceSum","reduceProd","reduceL1","reduceL2","reduceLogSum","reduceLogSumExp","reduceSumSquare","relu","sigmoid","sin","sinh","sqrt","sub","tan","tanh","thresholdedRelu","transpose","parseTransposeAttributes","typeSnippet","component","activationFnSnippet","activation","_hasPreluActivationWeights","_packed","_coordsLength","biasActivationSnippet","hasBias","createConv2DMatMulProgramInfo","metadata","outputShape","dimAOuter","dimBOuter","dimInner","sequentialAccessByThreads","isChannelsLast","format","inChannels","batchSize","outWidth","outHeight","outChannels","isVec4","dispatchX","dispatchY","workGroupSize","elementsPerThread","dispatch","innerElementSize","tileAOuter","tileBOuter","tileInner","fitAOuter","fitBOuter","fitInner","elementsSize","declareInputs","declareFunctions","gpuDataType","y","z","getShaderSource","utilFunctions","computeStrides","addBias","hasPreluActivationWeights","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHeight","xWidth","row","col","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","makeMatMulPackedVec4Source","makeMatMulPackedSource","workPerThread","workgroupSize","transposeA","splitK","splitedDimInner","isVectorA","tileAWidth","tileAHight","rowPerThreadB","calculateResultSnippet","writeDataToSubASnippet","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","createBinaryOpProgramInfoLoader","funcCall","additionalImplementation","outputDataType","isBroadcast","areEqual","outputSize","vectorize","calculatedShape","calcShape","sharedDimension","dimA","shaderHelper","dimsA","dimsB","dimsOutput","doBroadcast","typeA","typeB","typeOutput","vecSize","expressionScalar","expressionVector","scalar","vector","broadcastImpl","outputIndicesHelper","createIndicesHelper","calcOffsetImpl","offsets","idx","o2iImpl","iType","assignment","indicesVariableDeclaration","o2iCall","singleAssignment","expressionA","expressionB","mainStart","guardAgainstOutOfBoundsWorkgroupSizes","createBinaryOpProgramShader","createBinaryOpProgramInfo","WORKGROUP_SIZE","o2iSnippet","varOffset","varIndices","i2oImpl","i2oExpression","isPtr","ShaderHelperImpl","workgroupSizeX","workgroupSizeY","workgroupSizeZ","is1DimensionDispatch","createShaderHelper","createGroupedConvProgramInfoLoader","squeezeOutputShapeFunction","processBias","xShape","wShape","outputChannelsPerGroup","group","activationFunction","applyActivation","getActicationSnippet","inputStorageBuffersDeclarations","calculateOutputShape","xIndicesHelper","wIndicesHelper","createGroupedConvProgramInfo","inputShape","adjustPads","inputSpatialShape","spatialRank","dilatedKernelShape","splice","weightTransposeAttribute","getAdjustedConvAttributes","adjustPadsBasedOnAutoPad","newAttributes","activationAttributes","parseInternalActivationAttributes","auto_pad","kernel_shape","wIsConst","w_is_const","validateInputs","concat","adjustedAttributes","conv1d","inputHeight","inputWidth","inputChannels","weightHeight","weightWidth","transposedWeight","wT","transposeProgramMetadata","createTransposeProgramInfo","convInputs","createConv2DMatMulProgramInfoLoader","conv2d","createConv2DMatMulProgramMetadata","clipMin","clipMax","activation_params","activationCacheKey","aShape","bShape","GemmUtil","getShapeOfGemmResult","transA","transB","line","calculateAlpha","alpha","calculateC","m","n","broadcastM","broadcastN","offsetC","beta","createGemmProgramInfo","createGemmProgramInfoLoader","createMatmulProgramInfoLoader","createMatmulProgramInfo","getAdjustedPoolAttributesAndOutputShape","inputShapeAsChannelFirst","hasDilations","hasOwnProperty","call","adjustPoolAttributes","outputShapeAsChannelFirst","computePoolOutputShape","generatePoolingCode","op1","op2","kw","sw","pwStart","dimIdxW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimIdxH","dimH","kernelSize","kernelStrides","stridesRank","padsRank","padCode","reduce","sum","cur","parsePoolCommonAttributes","ceilMode","ceil_mode","createAveragePoolProgramInfo","countIncludePad","count_include_pad","attr","globalPoolAttributes","storageOrder","createMaxPoolProgramInfo","storage_order","noOp","createReduceProgramInfoLoader","reduceOp","updatedAttributes","forEach","keepDims","noopWithEmptyAxes","createReduceAttributesFromInputs","idxCopy","normalizeAxes","outputDimsLength","ops","inputIndicesHelper","initInputIdx","reduceOps","reduceOnAllAxes","k","indexOf","createReduceProgramInfo","idxZero","getAdjustedPerm","keys","input","permAttr","sortBasedOnPerm","getOutputShape","reverseFunc","permFunctionBody","createElementwiseProgramInfoLoader","datasize","expression","createElementwiseProgramShader","inputTensors","createElementwiseProgramInfo","generateClipAttributesFromInputs","repo","attributesBound","buildArtifact","writeTimestamp","setPipeline","computePipeline","entries","binding","resource","bindGroup","createBindGroup","layout","getBindGroupLayout","setBindGroup","dispatchWorkgroups","queryData","QUERY_RESOLVE","syncData","resolveQuerySet","kernelName","mappedData","BigUint64Array","startTimeU64","endTimeU64","profilingTimeBase","startTime","endTime","isSafeInteger","RangeError","normalizedDispatchGroupSize","code","shaderModule","createShaderModule","createComputePipeline","entryPoint","limitPerDimension","dispatchAverage","cbrt","document","currentScript","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","model","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","endProfiling","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","terminate","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","checkLastError","extra","iterateExtraOptions","WeakSet","value","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_free","runtimeInitialized","path","response","fetch","process","node","promisify","readFile","inputNames","outputNames","modelData","feeds","fetches","inputArray","kvp","tensor","t","result","Tensor","startProfiling","setSessionOptions","sessionOptionsHandle","sessionOptions","session","use_ort_model_bytes_directly","executionProviders","some","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtReleaseSessionOptions","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","typeProto","dateType","tensorTypeToTypedArrayConstructor","Uint16Array","Int8Array","Int16Array","Int32Array","Float64Array","Uint32Array","loggingLevel","_OrtInit","activeSessions","modelDataOffset","_malloc","sessionHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtCreateSession","outputCount","_OrtGetInputOutputCount","HEAP32","getSessionInputOutputCount","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","buf","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","isArray","TypeError","dimsOffset","dimIndex","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","errorCode","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","dimsLength","stringData","maxBytesToRead","_OrtReleaseTensor","p","profileFileName","_OrtEndProfiling","extractTransferableBuffers","tensors","buffers","ortWasmFactory","ortWasmFactoryThreaded","initialized","initializing","aborted","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","postMessage","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPaths","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","setTimeout","reject","locateFile","fileName","scriptDirectory","endsWith","what","race","PThread","terminateAllThreads","dataLength","lengthBytesUTF8","stringToUTF8","prefix","seen","toString","paramsOffset","_OrtGetLastError","errorMessagePointer","errorMessage","_scriptDir","ortWasm","__filename","c","h","ready","C","D","E","w","aa","window","importScripts","A","B","fs","F","dirname","__dirname","startsWith","URL","normalize","readFileSync","f","g","thisProgram","argv","replace","exitCode","inspect","location","href","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","onload","status","onerror","H","ba","print","bind","G","printErr","warn","quit","wasmBinary","noExitRuntime","I","J","L","O","ca","HEAP16","HEAPU16","HEAPF32","HEAPF64","da","ea","fa","ha","preRun","shift","unshift","S","P","Q","R","onAbort","RuntimeError","ia","ja","ka","ma","credentials","ok","catch","la","instantiate","oa","T","pa","ra","wa","va","ta","ua","sa","TextDecoder","decode","String","fromCharCode","l","U","V","charCodeAt","W","Aa","Ba","getFullYear","getMonth","getDate","Ca","Da","X","Ea","Y","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Fa","Ha","crypto","getRandomValues","randomFillSync","randomBytes","Ga","Ia","Ja","La","xa","q","getDay","na","getTime","setDate","setMonth","setFullYear","u","r","za","ya","qa","RegExp","split","substring","includes","Ka","Ma","j","s","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","setTime","getYear","toTimeString","match","now","hrtime","performance","copyWithin","grow","onExit","o","asm","monitorRunDependencies","clearInterval","instantiateWasm","instantiateStreaming","instance","apply","arguments","Z","$","ga","Na","Oa","Pa","Ra","calledRun","onRuntimeInitialized","postRun","setStatus","Qa","preInit","pop","defineProperty","resolveBackend","backends","backendsSortedByPriority","priority","createSessionHandler","currentBackend","backendHints","backendNames","errors","backendName","backendInfo","isInitializing","initPromise","err","backend_impl_js_1","enumerable","version_js_1","logLevelValue","webgl","common","env_impl_js_1","__createBinding","k2","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","__exportStar","prototype","InferenceSession","tensor_js_1","arg1","arg2","isFetchesEmpty","isFetches","arg1Keys","results","returnValue","arg0","arg3","filePathOrUint8Array","ArrayBuffer","inference_session_impl_js_1","tensorToImageData","tensorToDataURL","canvas","createElement","width","height","pixels2DContext","getContext","tensorLayout","inputformat","norm","normMean","normBias","mean","bias","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","fillStyle","fillRect","toDataURL","image","channels","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","createImageData","tensorFromImage","bufferToTensor","outputformat","tensorFormat","float32Data","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","isString","bufferToTensorOptions","resizedHeight","resizedWidth","drawImage","getImageData","newImage","Image","crossOrigin","img","tempCanvas","putImageData","tensor_conversion_impl_js_1","tensor_factory_impl_js_1","tensor_utils_impl_js_1","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isBigIntChecked","isBigInt64ArrayAvailable","from","isBigUint64ArrayAvailable","checkBigInt","typedArrayConstructor","firstElementType","mappedType","calculateSize","toImageData","tensorReshape","tensor_impl_js_1","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}